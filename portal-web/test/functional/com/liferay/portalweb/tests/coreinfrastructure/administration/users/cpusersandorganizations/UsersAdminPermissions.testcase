@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Users and Organizations";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();

			Role.tearDownCP();

			PortalSettings.tearDownCP();
		}
	}

	@priority = "4"
	test AddUserRegRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_users_admin_web_portlet_UsersAdminPortlet",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Info:You do not belong to an organization and are not allowed to view other organizations.");

		AssertElementNotPresent(locator1 = "UsersAndOrganizations#ADD");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_USER",
			resourceName = "90",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		JSONUser.addUser(
			creatorEmailAddress = "userea@liferay.com",
			creatorPassword = "test",
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Permissions.removePermissionViaAPI(
			resourceAction = "ADD_USER",
			resourceName = "90",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		AssertElementNotPresent(locator1 = "UsersAndOrganizations#ADD");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Info:You do not belong to an organization and are not allowed to view other organizations.");

		AssertElementNotPresent(locator1 = "UsersAndOrganizations#ADD");
	}

}