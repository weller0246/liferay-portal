@component-name = "portal-security"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Login";

	@description = "This is a use case for LPS-124898 TC-1: Verify Refresh Token Offset is not existing in the Instance Settings."
	test AssertTokenRefreshOffsetCannotBeSetAtInstanceLevel {
		property keycloak.enabled = "true";
		property portal.upstream = "marcell";
		property test.name.skip.portal.instance = "OpenIDConnect#TokenRefreshOffsetCanBeSetAtSystemLevel";

		OpenIDConnect.getOpenIDAccessToken();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "OpenID Connect",
			configurationScope = "Virtual Instance Scope");

		AssertNotVisible(locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET");
	}

	@description = "This is a use cae for LPS-124900 TC-2: Verify that user session is not terminated after a new access token is generated when Refresh Token Offset is not larger "
	@priority = "5"
	test AssertUserIsStillLoggedInAfterAccessTokenExpiresAndRenew {
		property keycloak.enabled = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#AssertUserIsStillLoggedInAfterAccessTokenExpiresAndRenew";


		// For testing only

		User.loginUserWithOpenIDConnectEnabledPG(
			userEmailAddress = "user1",
			userPassword = "test");

		var firstAccessToken = OpenIDConnect.getOpenIDAccessToken();

		var firstMvccVersion = OpenIDConnect.getOpenIDMvccVersionValue();

		Pause(locator1 = "60000");

		OpenIDConnect.waitForNewAccessTokenValue(firstValue = "${firstMvccVersion}");

		var secondAccessToken = OpenIDConnect.getOpenIDAccessToken();

		Assert.assertNotEquals(firstAccessToken,secondAccessToken);

		var secondMvccVersion = OpenIDConnect.getOpenIDMvccVersionValue();

		//Ellenorizni hogy 1-el kulonboznek csak
		Assert.assertNotEquals(firstMvccVersion,secondMvccVersion);
	}

	@description = "This is a use case for LPS-124898 TC-1: Verify Token Refresh Offset cannot be saved with a value under 30 second."
	test VerifyTokenRefreshOffsetMinimum {
		property keycloak.enabled = "true";
		property portal.upstream = "marcell";
		property test.name.skip.portal.instance = "OpenIDConnect#TokenRefreshOffsetCanBeSetAtSystemLevel";

		OpenIDConnect.getOpenIDAccessToken();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "OpenID Connect",
			configurationScope = "System Scope");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#INFO",
			value1 = "This configuration is not saved yet. The values shown are the default.");

		Type(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "20");

		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Save");

		AssertTextEquals(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "30");

		AssertConsoleTextPresent(value1 = "TODO");
	}

	@description = "This is a use case for LPS-124898 TC-1: Verify Instance admin can set the token refresh offset via System settings."
	test TokenRefreshOffsetCanBeSetAtSystemLevel {
		property keycloak.enabled = "true";
		property portal.upstream = "marcell";
		property test.name.skip.portal.instance = "OpenIDConnect#TokenRefreshOffsetCanBeSetAtSystemLevel";

		OpenIDConnect.getOpenIDAccessToken();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "OpenID Connect",
			configurationScope = "System Scope");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#INFO",
			value1 = "This configuration is not saved yet. The values shown are the default.");

		Type(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "60");

		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Save");

		AssertTextEquals(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "60");
	}

}