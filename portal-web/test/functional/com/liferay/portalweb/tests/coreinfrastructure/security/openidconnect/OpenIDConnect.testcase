@component-name = "portal-security"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "OpenID Connect";
	property user.time.zone = "UTC";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	@description = "This is a use case for LPS-139642 TC6-3: Assert error message when add invalid auth server local metadata."
	@priority = "3"
	test AssertErrorMessageWhenAddInvalidAuthServerLocalMetadata {
		property test.name.skip.portal.instance = "OpenIDConnect#AssertErrorMessageWhenAddInvalidAuthServerLocalMetadata";

		task ("Add Auth Server Local Metadata with invalid metadata") {
			OAuthClient.openOAuthClientAdmin(navbar = "Auth Server Local Metadata");

			OAuthClient.addInvalidAuthServer();
		}

		task ("Assert error message displays in the UI") {
			Alert.viewErrorMessage(errorMessage = "Invalid Authorization Server Metadata: The value must not be null or empty string");
		}

		task ("Add Auth Server Local Metadata with empty metadata") {
			OAuthClient.openOAuthClientAdmin(navbar = "Auth Server Local Metadata");

			OAuthClient.addInvalidAuthServer(authServerMetadata = "");
		}

		task ("Assert error message pops up") {
			AssertConfirm.assertConfirmationNoError(value1 = "Ill-formatted Metadata JSON");
		}
	}

	@description = "This is a use case for LPS-139642 TC2: Verify OAuth client configurations could be removed and readded."
	@priority = "4"
	test AssertOAuthClientCanBeRemovedAndReadded {
		property test.name.skip.portal.instance = "OpenIDConnect#AssertOAuthClientCouldBeRemovedAndReadded";

		task ("Given: Add an OAuth Client") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "okta.json",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("When: Delete the OAuth Client") {
			OAuthClient.deleteClient(rowIndexNumber = "1");
		}

		task ("Then: Verify that the OAuth Client entry is removed from the UI") {
			AssertElementNotPresent(
				key_rowIndexNumber = "1",
				locator1 = "Icon#ROW_VERTICAL_ELLIPSIS_N");
		}

		task ("When: Readd the OAuth Client with the same configurations") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "okta.json",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("Then: Verify that the entry is readded in the UI") {
			AssertElementPresent(
				key_rowIndexNumber = "1",
				locator1 = "Icon#ROW_VERTICAL_ELLIPSIS_N");
		}
	}

	@description = "This is a use case for LPS-139642 TC7: Verify OAuth client cannot be created with duplicate client ID."
	@priority = "4"
	test AssertOAuthClientCannotBeAddedWithDuplicateClientID {
		property test.name.skip.portal.instance = "OpenIDConnect#AssertOAuthClientCannotBeAddedWithDuplicateClientID";

		task ("Given: Add an OAuth Client") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "okta.json",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("When: Add another OAuth Client with the same client ID") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "okta.json",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("Then: Verify that the OAuth Client entry cannot be created with duplicate client ID") {
			Alert.viewErrorMessage(errorMessage = "Duplicate Client");
		}
	}

	@description = "This is a use case for LPS-139642 TC-10: A regular role is assigned to OIDC user if a regular role is defined through the property."
	@priority = "5"
	test AssertRegularRoleIsAssignedToOIDCUser {
		property custom.properties = "open.id.connect.user.info.processor.impl.issuer=https://dev-5081331.okta.com${line.separator}open.id.connect.user.info.processor.impl.regular.role=Administrator";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenRefreshOffset=\"120\"";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#AssertRegularRoleIsAssignedToOIDCUser";

		var userEmailAddress = PropsUtil.get("openid.provider.okta.test.account.email.address");
		var userPassword = PropsUtil.get("openid.provider.okta.test.account.password");

		task ("Given: Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~Okta.config");
		}

		task ("When: Logout and login with OpenID Connect") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");
		}

		task ("Then: Verify that administrator role is assigned to OIDC user") {
			MyAccount.openMyAccountAdmin();

			User.viewUserInformationRolesCP(roleTitle = "Administrator");
		}
	}

	@description = "This is a use case for LPS-124898 TC-6: Verify Refresh Token Offset is not existing in the Instance Settings."
	@priority = "4"
	test AssertTokenRefreshOffsetCannotBeSetAtInstanceLevel {
		property test.name.skip.portal.instance = "OpenIDConnect#AssertTokenRefreshOffsetCannotBeSetAtInstanceLevel";

		PortalSettings.openInstanceSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "OpenID Connect",
			configurationScope = "Virtual Instance Scope");

		AssertElementNotPresent(locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET");
	}

	@description = "This is a use case for LPS-124900 TC-4 and LPS-139642 TC-5: Users should be logged out when they don't have a valid access token because a misconfigured refresh token lifetime at Portal. Blocked by LRQA-77889."
	@ignore = "true"
	@priority = "4"
	test AssertUserIsLoggedOutWithHigherRefreshToken {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenRefreshOffset=\"120\"";
		property test.name.skip.portal.instance = "OpenIDConnect#AssertUserIsLoggedOutWithHigherRefreshToken";

		task ("Startup Keycloak for test") {
			AntCommand(
				locator1 = "build-test-keycloak.xml",
				value1 = "prepare-selenium-keycloak-server");
		}

		task ("Add Auth Server Local Metadata") {
			OAuthClient.openOAuthClientAdmin(navbar = "Auth Server Local Metadata");

			OAuthClient.addAuthServer(jsonFileName = "keycloak-local-metadata.json");

			var wellknownURI = OAuthClient.getWellKnownURI();
		}

		task ("Add OAuth Client") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "keycloak.json",
				wellknownURI = "${wellknownURI}");
		}

		User.logoutPG();

		task ("Verify that the User is logged out due his token lifespan is over at OIDC provider") {
			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "user1",
				userPassword = "test");

			// This pause is required to allow the test to wait for the access token to expire.

			Pause(locator1 = "60000");

			while (IsElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE")) {
				Pause(locator1 = "1000");

				Refresh();
			}

			MyAccount.openMyAccountAdmin();

			User.viewLoggedOutPG();
		}
	}

	@description = "This is a use case for LPS-139642 TC6-2: Cannot add OAuth client with empty configuration."
	@priority = "3"
	test CannotAddOAuthClientWithEmptyConfiguration {
		property test.name.skip.portal.instance = "OpenIDConnect#CannotAddOAuthClientWithEmptyConfiguration";

		task ("Add an OAuth Client with empty well-known URI") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addInvalidClient(jsonFileName = "okta.json");
		}

		task ("Assert error message displays in the UI") {
			Alert.viewErrorMessage(errorMessage = "Invalid Authorization Server Well-known URI");
		}

		task ("Add an OAuth Client with empty client information") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addInvalidClient(
				clientInfo = "",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("Assert error message pops up") {
			AssertConfirm.assertConfirmationNoError(value1 = "Ill-formatted Info JSON");
		}

		task ("Add an OAuth Client with empty auth request parameters") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addInvalidClient(
				authRequestParametersJSON = "",
				jsonFileName = "okta.json",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("Assert error message pops up") {
			AssertConfirm.assertConfirmationNoError(value1 = "Ill-formatted Default Authorization Request Parameters JSON");
		}

		task ("Add an OAuth Client with empty token request parameters") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addInvalidClient(
				jsonFileName = "okta.json",
				tokenRequestParametersJSON = "",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("Assert error message pops up") {
			AssertConfirm.assertConfirmationNoError(value1 = "Ill-formatted Default Token Request Parameters JSON");
		}
	}

	@description = "This is a use case for LPS-139642 TC6-1: Cannot add OAuth client with invalid configurations."
	@priority = "3"
	test CannotAddOAuthClientWithInvalidConfigurations {
		property test.name.skip.portal.instance = "OpenIDConnect#CannotAddOAuthClientWithInvalidConfigurations";

		task ("Add an OAuth Client with invalid client information") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addInvalidClient(wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("Assert error message displays in the UI") {
			Alert.viewErrorMessage(errorMessage = "Invalid Client Information: The value must not be null or empty string");
		}
	}

	@description = "This is a use case for LPS-105151 and LPS-139642 TC-3: Users could configure multiple OpenID Connect providers."
	@priority = "4"
	test ConfigureMultipleOpenIDConnectProviders {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property test.name.skip.portal.instance = "OpenIDConnect#ConfigureMultipleOpenIDConnectProviders";

		var userEmailAddress = PropsUtil.get("email.address.2");
		var userPassword = PropsUtil.get("email.password.2");

		task ("Add CP www.able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Add OAuth Clients") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");

			OAuthClient.openOAuthClientAdmin(
				baseURL = "http://www.able.com:8080",
				navbar = "Clients");

			OAuthClient.addClient(jsonFileName = "googleClient2.json");

			OAuthClient.addClient(jsonFileName = "googleClient3.json");
		}

		task ("Sign out and go to able.com") {
			UserBar.signOut();

			Navigator.openSpecificURL(url = "http://www.able.com:8080/");
		}

		task ("View provider and assert OpenID Connect login option") {
			OpenIDConnect.viewProvider();

			AssertElementPresent(
				key_providerNname = "Google2",
				locator1 = "OpenIDConnectLogin#OPENID_CONNECT_DROPDOWN_OPTION");
		}
	}

	@description = "This is a workaround usecase for LPS-139642 TC-11: Verify the OAuth client of System level should apply to OAuth client of virtual instance."
	@priority = "5"
	test ConfigureOnSystemLevelShouldApplyToInstanceLevel {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#ConfigureOnSystemLevelShouldApplyToInstanceLevel";

		task ("Given: Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~Okta.config");

			OAuthClient.viewOAuthClient();
		}

		task ("When: Add virtual instance and login at able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.firstLoginUI(
				domain = "www.able.com",
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Then: Verify that the OAuth client should display on the virtual instance") {
			OAuthClient.viewOAuthClient(baseURL = "http://www.able.com:8080");
		}
	}

	@description = "This is a use case for LPS-162080 TC-4: Existing OIDC connection can be edited."
	@priority = "5"
	test ExistedUserMapperCanBeEdited {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property test.name.skip.portal.instance = "OpenIDConnect#ExistedUserMapperCanBeEdited";

		var jsonFileName = "keycloak.json";
		var jsonFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies";

		var clientInfo = FileUtil.read("${jsonFileBaseDir}/${jsonFileName}");
		var userMapperInfo = FileUtil.read("${jsonFileBaseDir}/OAuth2_User_mapping.json");

		task ("Given: User starts Keycloak for test and set debug level") {
			AntCommand(
				locator1 = "build-test-keycloak.xml",
				value1 = "prepare-selenium-keycloak-server");

			OpenIDConnect.enableOpenIDConnectDebugLogs();

			OpenIDConnect.enableOpenIDConnectCustomParametersDebugLogs();
		}

		task ("And: Add Auth Server Local Metadata") {
			OAuthClient.openOAuthClientAdmin(navbar = "Auth Server Local Metadata");

			OAuthClient.addAuthServer(jsonFileName = "keycloak-local-metadata.json");

			var wellknownURI = OAuthClient.getWellKnownURI();
		}

		task ("When: User add OAuth Client with custom attributes") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "keycloak.json",
				userMapperJSON = "OAuth2_User_mapping.json",
				wellknownURI = "${wellknownURI}");
		}

		task ("And: Logs in through OIDC to verify user informations") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "tester1@liferay.com",
				userPassword = "test");

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userEmailAddress = "tester1@liferay.com",
				userFirstName = "First1",
				userLastName = "Last1",
				userScreenName = "user1");

			User.logoutPG();
		}

		task ("And: Edit the OIDC connection") {
			User.firstLoginPG();

			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

			var editedUserMapperInfo = StringUtil.replace("${userMapperInfo}", "family_name", "changed");

			FormFields.editTextMultiline(
				fieldName = "OIDCUserInfo",
				fieldValue = "${editedUserMapperInfo}");

			var editedUserMapperInfo = StringUtil.replace("${editedUserMapperInfo}", "given_name", "family_name");

			FormFields.editTextMultiline(
				fieldName = "OIDCUserInfo",
				fieldValue = "${editedUserMapperInfo}");

			var editedUserMapperInfo = StringUtil.replace("${editedUserMapperInfo}", "changed", "given_name");

			FormFields.editTextMultiline(
				fieldName = "OIDCUserInfo",
				fieldValue = "${editedUserMapperInfo}");

			Click(
				key_text = "Save",
				locator1 = "Button#ANY");
		}

		task ("And: Delete the OIDC user") {
			User.openUsersAdmin();

			User.deactivateCP(userFirstName = "user1");

			User.deleteCP(
				deactivateType = "Actions",
				userFirstName = "user1");

			User.logoutPG();
		}

		task ("Then: OIDC user informations will be imported accordingly to the edited connection") {
			Navigator.openURL();

			AssertClick(
				locator1 = "UserBar#USER_SIGN_IN",
				value1 = "Sign In");

			Click(locator1 = "Icon#OPENID_CONNECT");

			Click(locator1 = "Button#SIGN_IN");

			GoogleLogin.acceptConditions();

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userEmailAddress = "tester1@liferay.com",
				userFirstName = "Last1",
				userLastName = "First1",
				userScreenName = "user1");
		}
	}

	@description = "This is a use case for LPS-154744. TC4-1: The OIDC user is assigned the regular role which contains multiple spaces given through the property."
	@priority = "4"
	test MultipleSpacesRoleNameCanBeAssignedToOIDCUser {
		property custom.properties = "open.id.connect.user.info.processor.impl.issuer=https://dev-5081331.okta.com${line.separator}open.id.connect.user.info.processor.impl.regular.role=My Custom Regular Role";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenRefreshOffset=\"120\"";
		property test.name.skip.portal.instance = "OpenIDConnect#MultipleSpacesRoleNameCanBeAssignedToOIDCUser";

		var userEmailAddress = PropsUtil.get("openid.provider.okta.test.account.email.address");
		var userPassword = PropsUtil.get("openid.provider.okta.test.account.password");

		task ("Given: Set up OKTA OIDC Provider") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~Okta.config");
		}

		task ("And: Add a regular role which contains multiple spaces") {
			JSONRole.addRegularRole(
				roleKey = "My Custom Regular Role",
				roleTitle = "My Custom Regular Role");
		}

		task ("When: Login with OpenID Connect") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");
		}

		task ("Then: Multiple spaces role name can be assigned to OKTA user") {
			MyAccount.openMyAccountAdmin();

			User.viewUserInformationRolesCP(roleTitle = "My Custom Regular Role");
		}
	}

	@description = "This is a use case for LPS-105151 and LPS-139642 TC-9: Users could login with instance-level configured OpenID Connect provider."
	@priority = "4"
	test OpenIDConnectOnInstanceLevelSmoke {
		property portal.acceptance = "true";
		property portal.ssl.enabled = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#OpenIDConnectOnInstanceLevelSmoke";

		var userEmailAddress = PropsUtil.get("email.address.2");
		var userPassword = PropsUtil.get("email.password.2");

		task ("Add CP") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com and enable OpenId connect CP") {
			User.firstLoginUI(
				domain = "www.able.com",
				password = "test",
				specificURL = "https://www.able.com:8443",
				userEmailAddress = "test@www.able.com");

			PortalSettings.gotoConfiguration(
				baseURL = "https://www.able.com:8443",
				configurationCategory = "SSO",
				configurationName = "OpenID Connect",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.enableOpenIDConnectCP();
		}

		task ("Add OAuth Client") {
			OAuthClient.openOAuthClientAdmin(
				baseURL = "https://www.able.com:8443",
				navbar = "Clients");

			OAuthClient.addClient(jsonFileName = "googleClient1.json");
		}

		task ("Sign out and Login at able.com with OpenID Connect enabled") {
			UserBar.signOut();

			User.loginUserWithOpenIDConnectEnabledPG(
				specificURL = "https://www.able.com:8443",
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");
		}

		task ("Sign out and Login") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "https://www.able.com:8443",
				userEmailAddress = "test@www.able.com");
		}
	}

	@description = "This is a use case for LRQA-40911. Users could login and logout using OpenID Connect provider."
	@priority = "4"
	test OpenIDConnectSmoke {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#OpenIDConnectSmoke";

		var openIdConnectClientId = PropsUtil.get("google.client.id.3");
		var openIdConnectClientSecret = PropsUtil.get("google.client.secret.3");
		var userEmailAddress = PropsUtil.get("email.address.2");
		var userPassword = PropsUtil.get("email.password.2");

		task ("Add SSO OpenID Connect provider") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://localhost:8080",
				configurationCategory = "SSO",
				configurationName = "OpenID Connect",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.enableOpenIDConnectCP();

			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenID Connect Provider Connection",
				configurationScope = "Virtual Instance Scope");

			OpenIDConnect.addProvider(
				openIdConnectClientId = "${openIdConnectClientId}",
				openIdConnectClientSecret = "${openIdConnectClientSecret}",
				providerName = "Google");
		}

		task ("Logout and login with OpenID Connect") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");
		}

		task ("Logout and login") {
			User.logoutAndLoginPG();
		}
	}

	@description = "This is a use case for LRQA-72792. Users could login and logout using Auth0 as OpenID Connect provider."
	@priority = "5"
	test OpenIDConnectSmokeWithAuth0 {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenRefreshOffset=\"120\"";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#OpenIDConnectSmokeWithAuth0";

		var userEmailAddress = PropsUtil.get("openid.provider.auth0.test.account.email.address");
		var userPassword = PropsUtil.get("openid.provider.auth0.test.account.password");

		task ("Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~Auth0.config");
		}

		task ("Logout and login with OpenID Connect") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");
		}

		task ("Logout and login") {
			User.logoutAndLoginPG();
		}
	}

	@description = "This is a use case for LRQA-72792. Users could login and logout using Azure as OpenID Connect provider."
	@priority = "5"
	test OpenIDConnectSmokeWithAzure {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenRefreshOffset=\"120\"";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#OpenIDConnectSmokeWithAzure";

		var userEmailAddress = PropsUtil.get("openid.provider.azure.test.account.email.address");
		var userPassword = PropsUtil.get("openid.provider.azure.test.account.password");

		task ("Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~Azure.config");
		}

		task ("Logout and login with OpenID Connect") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");
		}

		task ("Logout and login") {
			User.logoutAndLoginPG();
		}
	}

	@description = "This is a use case for LRQA-72792 and LPS-139642 TC1: Users could login and logout using Okta as OpenID Connect provider."
	@priority = "5"
	test OpenIDConnectSmokeWithOkta {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenRefreshOffset=\"120\"";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#OpenIDConnectSmokeWithOkta";

		var userEmailAddress = PropsUtil.get("openid.provider.okta.test.account.email.address");
		var userPassword = PropsUtil.get("openid.provider.okta.test.account.password");

		task ("Add OAuth Client") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "okta.json",
				wellknownURI = "https://dev-5081331.okta.com/.well-known/openid-configuration");
		}

		task ("Logout and login with OpenID Connect") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");
		}

		task ("Logout and login") {
			User.logoutAndLoginPG();
		}
	}

	@description = "This is a use case for LRQA-72792. Users could login and logout using PingOne as OpenID Connect provider. Blocked by ISIT-28728."
	@ignore = "true"
	@priority = "5"
	test OpenIDConnectSmokeWithPingOne {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenRefreshOffset=\"120\"";
		property portal.acceptance = "quarantine";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "OpenIDConnect#OpenIDConnectSmokeWithPingOne";

		var userName = PropsUtil.get("openid.provider.pingone.test.account.username");
		var userPassword = PropsUtil.get("openid.provider.pingone.test.account.password");

		task ("Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~PingOne.config");
		}

		task ("Logout and login with OpenID Connect") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userName}",
				userPassword = "${userPassword}");
		}

		task ("Logout and login") {
			User.logoutAndLoginPG();
		}
	}

	@description = "This is a use case for LPS-148619. User could log in and log out using Google as OpenID Connect provider, using custom parameters for the connection."
	test OpenIDConnectWithGoogleCustomParameters {
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#OpenIDConnectWithGoogleCustomParameters";

		var customTokenRequestParameters = "resource=https://contacts.google.com";
		var customAuthorizationRequestParameters = "access_type=offline";
		var openIdConnectClientId = PropsUtil.get("google.client.id.2");
		var openIdConnectClientSecret = PropsUtil.get("google.client.secret.2");
		var userEmailAddress = PropsUtil.get("email.address.2");
		var userPassword = PropsUtil.get("email.password.2");

		task ("Given the correct log levels are set to DEBUG") {
			OpenIDConnect.enableOpenIDConnectDebugLogs();

			OpenIDConnect.enableOpenIDConnectCustomParametersDebugLogs();
		}

		task ("When OpenID Connect provider is set to Google and the connection is established with custom parameters") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenID Connect",
				configurationScope = "System Scope");

			PortalSettings.enableOpenIDConnectCP(systemLevel = "true");

			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenID Connect Provider Connection",
				configurationScope = "Virtual Instance Scope");

			OpenIDConnect.addProvider(
				customAuthorizationRequestParameters = "${customAuthorizationRequestParameters}",
				customTokenRequestParameters = "${customTokenRequestParameters}",
				openIdConnectClientId = "${openIdConnectClientId}",
				openIdConnectClientSecret = "${openIdConnectClientSecret}",
				providerName = "Google");
		}

		task ("Then the user can log in and log out through the provider and the correct parameters are shown in the console") {
			UserBar.signOut();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "${userEmailAddress}",
				userPassword = "${userPassword}");

			AssertConsoleTextPresent(value1 = "${customAuthorizationRequestParameters}");

			AssertConsoleTextPresent(value1 = "resource");
		}

		task (" And the user is still logged in after the first access token's lifetime is over and they receive a new access token in the background") {

			// This pause is required to allow the test to wait for the new access token to be generated.

			Pause(locator1 = "60000");

			Refresh();

			User.viewLoggedInPG();
		}
	}

	@description = "This is a use case for LPS-124898 TC-1: Verify Instance admin can set the token refresh offset via System settings."
	@priority = "4"
	test TokenRefreshOffsetCanBeSetAtSystemLevel {
		property test.name.skip.portal.instance = "OpenIDConnect#TokenRefreshOffsetCanBeSetAtSystemLevel";

		task ("Enable and set the OpenID connect token refresh offset time") {
			OpenIDConnect.enableOpenIdConnect();

			OpenIDConnect.setTokenRefreshOffset(expirationTime = "60");
		}
	}

	@description = "This is a use case for LPS-162080 TC-2/2: User attributes can be mapped in OpenID Connection."
	@priority = "5"
	test UserAttributesCanBeMappedInOIDCOnInstanceLevel {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property test.name.skip.portal.instance = "OpenIDConnect#UserAttributesCanBeMappedInOIDCOnInstanceLevel";

		task ("Given: User starts Keycloak for test and set debug level") {
			AntCommand(
				locator1 = "build-test-keycloak.xml",
				value1 = "prepare-selenium-keycloak-server");

			OpenIDConnect.enableOpenIDConnectDebugLogs();

			OpenIDConnect.enableOpenIDConnectCustomParametersDebugLogs();
		}

		task ("And: Add virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("When: User adds OIDC connection on able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			OAuthClient.openOAuthClientAdmin(
				baseURL = "http://www.able.com:8080",
				navbar = "Auth Server Local Metadata");

			OAuthClient.addAuthServer(jsonFileName = "keycloak-local-metadata.json");

			var wellknownURI = OAuthClient.getWellKnownURI();

			OAuthClient.openOAuthClientAdmin(
				baseURL = "http://www.able.com:8080",
				navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "keycloak.json",
				userMapperJSON = "OAuth2_User_mapping.json",
				wellknownURI = "${wellknownURI}");

			User.logoutPG(specificURL = "http://www.able.com:8080");
		}

		task ("Then: User information is synced from user database on OIDC login") {
			User.loginUserWithOpenIDConnectEnabledPG(
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "tester1@liferay.com",
				userPassword = "test");

			MyAccount.openMyAccountAdmin(baseURL = "http://www.able.com:8080");

			User.viewUserInformation(
				userBirthday = "12/12/1990",
				userEmailAddress = "tester1@liferay.com",
				userFirstName = "First1",
				userLastName = "Last1",
				userMiddleName = "Middle Name",
				userScreenName = "user1");
		}
	}

	@description = "This is a use case for LPS-162080 TC-2/1: User attributes can be mapped in OpenID Connection."
	@priority = "5"
	test UserAttributesCanBeMappedInOIDCOnSystemLevel {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property test.name.skip.portal.instance = "OpenIDConnect#UserAttributesCanBeMappedInOIDCOnSystemLevel";

		task ("Given: User starts Keycloak for test and set debug level") {
			AntCommand(
				locator1 = "build-test-keycloak.xml",
				value1 = "prepare-selenium-keycloak-server");

			OpenIDConnect.enableOpenIDConnectDebugLogs();

			OpenIDConnect.enableOpenIDConnectCustomParametersDebugLogs();
		}

		task ("And: Add Auth Server Local Metadata") {
			OAuthClient.openOAuthClientAdmin(navbar = "Auth Server Local Metadata");

			OAuthClient.addAuthServer(jsonFileName = "keycloak-local-metadata.json");

			var wellknownURI = OAuthClient.getWellKnownURI();
		}

		task ("When: User add OAuth Client with custom attributes") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "keycloak.json",
				userMapperJSON = "OAuth2_User_mapping.json",
				wellknownURI = "${wellknownURI}");

			User.logoutPG();
		}

		task ("Then: User information is synced from user database on OIDC login") {
			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "tester1@liferay.com",
				userPassword = "test");

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userBirthday = "12/12/1990",
				userEmailAddress = "tester1@liferay.com",
				userFirstName = "First1",
				userLastName = "Last1",
				userMiddleName = "Middle Name",
				userScreenName = "user1");

			User.viewUserInformationRolesCP(roleTitle = "Power User");

			User.logoutPG();
		}
	}

	@description = "This is a use case for LPS-162080 TC-3: User information should be synced towards Keycloak too. Verify that User role can be imported to an existing User on Keycloak from Portal."
	@priority = "5"
	test UserRoleCanBeSyncedToKeycloak {
		property custom.properties = "open.id.connect.user.info.processor.impl.issuer=http://127.0.0.1:18080/auth/realms/master${line.separator}open.id.connect.user.info.processor.impl.regular.role=Power User";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property test.name.skip.portal.instance = "OpenIDConnect#UserRoleCanBeSyncedToKeycloak";

		task ("Given: User starts Keycloak for test and set debug level and custom properties are set accordingly") {
			AntCommand(
				locator1 = "build-test-keycloak.xml",
				value1 = "prepare-selenium-keycloak-server");

			OpenIDConnect.enableOpenIDConnectDebugLogs();

			OpenIDConnect.enableOpenIDConnectCustomParametersDebugLogs();
		}

		task ("And: Add Auth Server Local Metadata") {
			OAuthClient.openOAuthClientAdmin(navbar = "Auth Server Local Metadata");

			OAuthClient.addAuthServer(jsonFileName = "keycloak-local-metadata.json");

			var wellknownURI = OAuthClient.getWellKnownURI();
		}

		task ("And: Add OAuth Client") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "keycloak.json",
				wellknownURI = "${wellknownURI}");
		}

		task ("When: User login as keycloak user") {
			User.logoutPG();

			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "tester2@liferay.com",
				userPassword = "test");
		}

		task ("Then: User has power user role") {
			MyAccount.openMyAccountAdmin();

			User.viewUserInformationRolesCP(roleTitle = "Power User");
		}
	}

	@description = "This is a use case for LPS-162080 TC-1: OpenID configuration mandatory fields should work with unique error messages. Blocked by LPS-164921."
	@ignore = "true"
	@priority = "5"
	test VerifyOIDCMandatoryFields {
		property test.name.skip.portal.instance = "OpenIDConnect#VerifyOIDCMandatoryFields";

		var jsonFileName = "keycloak.json";
		var jsonFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies";

		var clientInfo = FileUtil.read("${jsonFileBaseDir}/${jsonFileName}");
		var userMapperInfo = FileUtil.read("${jsonFileBaseDir}/OAuth2_User_mapping.json");

		task ("Given: User add Auth Server Local Metadata") {
			OAuthClient.openOAuthClientAdmin(navbar = "Auth Server Local Metadata");

			OAuthClient.addAuthServer(jsonFileName = "keycloak-local-metadata.json");

			var wellknownURI = OAuthClient.getWellKnownURI();
		}

		task ("And: Add OAuth Client") {
			OAuthClient.openOAuthClientAdmin(navbar = "Clients");

			OAuthClient.addClient(
				jsonFileName = "${jsonFileName}",
				wellknownURI = "${wellknownURI}");
		}

		task ("When: User save without Well-known URL") {
			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

			FormFields.editText(
				fieldName = "authServerWellKnownURI",
				fieldValue = " ");

			Click(
				key_text = "Save",
				locator1 = "Button#ANY");
		}

		task ("Then: Corresponding error message will block the user from saving without Well-known URL") {
			Alert.viewErrorMessage(errorMessage = "Invalid Authorization Server Well-known URI");
		}

		task ("When: User save without client ID") {
			FormFields.editText(
				fieldName = "authServerWellKnownURI",
				fieldValue = "${wellknownURI}");

			var editedClientInfo = StringUtil.replace("${clientInfo}", "liferay-system-level", " ");

			FormFields.editTextMultiline(
				fieldName = "infoJSON",
				fieldValue = "${editedClientInfo}");

			Click(
				key_text = "Save",
				locator1 = "Button#ANY");
		}

		task ("Then: Corresponding error message will block the user from saving without defining the client ID") {
			Alert.viewErrorMessage(errorMessage = "Invalid Client Information");
		}

		task ("When: User save without mapping User first name") {
			FormFields.editTextMultiline(
				fieldName = "infoJSON",
				fieldValue = "${clientInfo}");

			var editedUserMapperInfo = StringUtil.replace("${userMapperInfo}", "given_name", " ");

			FormFields.editTextMultiline(
				fieldName = "OIDCUserInfo",
				fieldValue = "${editedUserMapperInfo}");

			Click(
				key_text = "Save",
				locator1 = "Button#ANY");
		}

		task ("Then: Corresponding error message will block the user from saving without mapping the user first name") {
			Alert.viewErrorMessage(errorMessage = "firstName is required");
		}

		task ("When: User save without mapping User last name") {
			var editedUserMapperInfo = StringUtil.replace("${userMapperInfo}", "family_name", " ");

			FormFields.editTextMultiline(
				fieldName = "OIDCUserInfo",
				fieldValue = "${editedUserMapperInfo}");

			Click(
				key_text = "Save",
				locator1 = "Button#ANY");
		}

		task ("Then: Corresponding error message will block the user from saving without defining the last name") {
			Alert.viewErrorMessage(errorMessage = "lastName is required ");
		}

		task ("When: User try to save without mapping User email address") {
			var editedUserMapperInfo = StringUtil.replace("${userMapperInfo}", "email", " ");

			FormFields.editTextMultiline(
				fieldName = "OIDCUserInfo",
				fieldValue = "${editedUserMapperInfo}");

			Click(
				key_text = "Save",
				locator1 = "Button#ANY");
		}

		task ("Then: Corresponding error message will block the user from saving without defining the user email address") {
			Alert.viewErrorMessage(errorMessage = "emailAddress is required");
		}

		task ("When: User save with correct data") {
			FormFields.editTextMultiline(
				fieldName = "OIDCUserInfo",
				fieldValue = "${userMapperInfo}");

			Click(
				key_text = "Save",
				locator1 = "Button#ANY");
		}

		task ("Then: Edit will be successfully saved") {
			Alert.viewSuccessMessageText(successMessage = "Success");
		}
	}

	@description = "This is a use case for LPS-124898 TC-5: Verify Token Refresh Offset cannot be saved with a value under 30 second. Blocked by LPS-138193."
	@priority = "4"
	test VerifyTokenRefreshOffsetMinimum {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~default.config";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "OpenIDConnect#VerifyTokenRefreshOffsetMinimum";

		OpenIDConnect.enableOpenIdConnect();

		OpenIDConnect.setTokenRefreshOffset(expirationTime = "20");

		WaitForConsoleTextPresent(value1 = "Token refresh offset needs to be at least 30 seconds");

		AssertTextEquals(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "30");
	}

	@description = "This is a use case for LPS-167751 TC-1: User could login using OIDC with PKCE."
	@priority = "5"
	test VerifyUserCouldLoginWithPKCE {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#VerifyUserCouldLoginWithPKCE";

		task ("Startup Keycloak for test") {
			AntCommand(
				locator1 = "build-test-keycloak.xml",
				value1 = "prepare-selenium-keycloak-server");
		}

		task ("Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~KeycloakPKCE.config");
		}

		User.logoutPG();

		task ("Verify that the User stay logged in after a new access token is generated") {
			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "tester1@liferay.com",
				userPassword = "test");

			User.viewLoggedInPG();
		}
	}

	@description = "This is a use case for LPS-124900 TC-2: User is still logged in after the first access token's lifetime is over and they receive a new access token in the background."
	@priority = "5"
	test VerifyUserIsStillLoggedInAfterAccessTokenExpiresAndRenew {
		property minimum.slave.ram = "24";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.openid.connect.configuration.OpenIdConnectConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenIDConnect#VerifyUserIsStillLoggedInAfterAccessTokenExpiresAndRenew";

		task ("Startup Keycloak for test") {
			AntCommand(
				locator1 = "build-test-keycloak.xml",
				value1 = "prepare-selenium-keycloak-server");
		}

		task ("Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/openidconnect/dependencies",
				osgiConfigFileName = "com.liferay.portal.security.sso.openid.connect.internal.configuration.OpenIdConnectProviderConfiguration~default.config");
		}

		User.logoutPG();

		task ("Verify that the User stay logged in after a new access token is generated") {
			User.loginUserWithOpenIDConnectEnabledPG(
				userEmailAddress = "user1",
				userPassword = "test");

			// This pause is required to allow the test to wait for the new access token to be generated.

			Pause(locator1 = "60000");

			Refresh();

			User.viewLoggedInPG();
		}
	}

}