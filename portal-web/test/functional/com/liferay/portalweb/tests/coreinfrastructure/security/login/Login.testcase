@component-name = "portal-security"
definition {

	property portal.release = "true";
	property portal.upstream = "marcell";
	property testray.main.component.name = "Login";

	@description = "This is a use case for LPS-39744 and LPS-78508. Default landing page could be set by property and user is redirected to the changed landing page."
	@priority = "5"
	test DefaultPortalLandingPageSetByProperty {
		property custom.properties = "default.landing.page.path=/web/guest/landing${line.separator}company.default.home.url=";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Login#DefaultPortalLandingPageSetByProperty";

		task ("Login and add a public page ") {
			User.firstLoginPG();

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "landing");
		}

		task ("Logout and login") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Assert url value") {
			AssertLocation(value1 = "http://localhost:8080/web/guest/landing");
		}

		task ("Assert no errors occurred in the console") {
			AssertConsoleTextNotPresent(value1 = "java.lang.StackOverflowError");
		}
	}

	@description = "This is a use case for LRQA-27624. Users could login and logout using their Facebook profile."
	@priority = "4"
	test FacebookSSOSmoke {
		property portal.ssl.enabled = "true";
		property test.name.skip.portal.instance = "Login#FacebookSSOSmoke";

		var facebookApplicationId = PropsUtil.get("facebook.application.id");
		var facebookApplicationSecret = PropsUtil.get("facebook.application.secret");
		var facebookEmail = PropsUtil.get("facebook.email");
		var facebookPassword = PropsUtil.get("facebook.password");

		task ("Login and edit facebook authentication") {
			User.firstLoginPG();

			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			PortalSettings.gotoConfiguration(
				baseURL = "http://localhost:8080",
				configurationCategory = "SSO",
				configurationName = "Facebook Connect",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.editConfigurationAuthenticationFacebook(
				facebookApplicationId = "${facebookApplicationId}",
				facebookApplicationSecret = "${facebookApplicationSecret}");
		}

		task ("Logout and login with facebook SSO") {
			User.logoutPG();

			User.loginUserWithFacebookSSOEnabledPG(
				facebookEmail = "${facebookEmail}",
				facebookPassword = "${facebookPassword}",
				siteName = "${siteName}");
		}

		task ("Logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}
	}

	@description = "This is a use case for LPS-72398. Users could login to Portal when the default language is not English."
	@priority = "5"
	test LoginWithSpanishOnlyEnabledLocale {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Login#LoginWithSpanishOnlyEnabledLocale";

		task ("Login and configure spanish as default and current portal language") {
			User.firstLoginPG();

			var portalURL = PropsUtil.get("portal.url");

			PortalSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Language",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureCurrentLanguagesCP(
				currentPortalLanguages = "Spanish (Spain)",
				defaultPortalLanguage = "Spanish (Spain)");
		}

		task ("Logout, restart server and login") {
			User.logoutPG();

			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");

			Portlet.assertServerStartup();

			User.firstLoginUI(
				localization = "ES",
				password = "test",
				specificURL = "${portalURL}/es",
				userEmailAddress = "test@liferay.com");
		}
	}

	@description = "Users could login through the UI."
	@priority = "5"
	test LoginWithUI {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Login#DefaultPortalLandingPageSetByProperty";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");
		}
	}

	@description = "This is a use case for LPS-150234. Login page not breaks visually when user enters his credentials incorrectly."
	@priority = "5"
	test LoginWithUIUsingWrongCredentials {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property test.name.skip.portal.instance = "Login#LoginWithUIUsingWrongCredentials";

		task ("When: User tries to login with wrong credential") {
			User.firstLoginUI(userEmailAddress = "wrong@liferay.com");
		}

		task ("Then: Regular UI is present with site logo") {
			WaitForElementPresent(locator1 = "Home#SITE_NAME_LOGO");
		}

		task ("And: Error message is present") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_DISMISSIBLE",
				value1 = "Authentication failed. Please try again.");
		}
	}

	@description = "This is a use case for LPS-150234. Login page not breaks visually when user enters his credentials incorrectly and one MFA verifier is enabled. Blocked by LPS-150234."
	@priority = "5"
	test LoginWithUIUsingWrongCredentialsAndMFAIsEnabled {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.release = "false";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "Login#LoginWithUIUsingWrongCredentialsAndMFAIsEnabled";

		task ("Given: Login and enable OTP and Sign Out as Instance Admin") {
			User.firstLoginUI();

			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");

			SignOut.signOut();
		}

		task ("When: User tries to login with wrong credential") {
			User.firstLoginUI(userEmailAddress = "wrong@liferay.com");
		}

		task ("Then: Regular UI is present with site logo") {
			WaitForElementPresent(locator1 = "Home#SITE_NAME_LOGO");
		}

		task ("And: Error message is present") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_DISMISSIBLE",
				value1 = "Authentication failed. Please try again.");
		}
	}

	@description = "This is a use case for LRQA-43015. Ignore test due to OpenAM 12 doesn't support Tomcat 9."
	@ignore = "true"
	@priority = "5"
	test OpenSSOSmoke {
		property custom.properties = "javascript.single.page.application.enabled=false";
		property dummy.socket.proxy.disabled = "true";
		property openam.enabled = "true";
		property test.name.skip.portal.instance = "Login#OpenSSOSmoke";

		task ("Go to http://test.able.com:8080/openam and run ant command") {
			Navigator.openSpecificURL(url = "http://test.able.com:8080/openam");

			AntCommand(
				locator1 = "build-test-authentication.xml",
				value1 = "run-openam-tools");
		}

		task ("Wait for OpenAM setup") {
			var pauseCount = "0";

			while ((IsElementNotPresent(locator1 = "TextInput#TEXT")) && ("${pauseCount}" != "20")) {
				Refresh();

				// Wait for OpenAM configuration to finish. See LRQA-28959 for more details.

				Pause(locator1 = "30000");

				var pauseCount = ${pauseCount} + 1;

				echo("Pause count: ${pauseCount}");
			}

			if ("${pauseCount}" == "20") {
				fail("OpenAM setup timed out after 10 minutes.");
			}
		}

		task ("Login and configure open SSO") {
			User.firstLoginPG();

			PortalSettings.gotoConfiguration(
				baseURL = "http://localhost:8080",
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureOpenSSO(
				openSsoLoginURL = "http://test.able.com:8080/openam/UI/Login?goto=http://www.able.com:8080/c/portal/login",
				openSsoLogoutURL = "http://test.able.com:8080/openam/UI/Logout?goto=http://www.able.com:8080/web/guest/home",
				openSsoServiceURL = "http://test.able.com:8080/openam");
		}

		task ("Test SSO connection") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://localhost:8080",
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.testOpenSSOConnection();
		}

		task ("Logout and login with open SSO") {
			User.logoutPG();

			User.loginUserWithOpenSSOEnabledPG(
				hostsURL = "http://www.able.com:8080",
				password = "password",
				userScreenName = "test");
		}
	}

	@description = "This is a use case for LRQA-48218. User should be redirected to the changed landing page upon login."
	@priority = "5"
	test RedirectToDefaultPortalLandingPageOnLogin {
		property test.name.skip.portal.instance = "Login#DefaultPortalLandingPage";

		task ("Login and configure landing page CP") {
			User.firstLoginPG();

			PortalSettings.gotoConfiguration(
				baseURL = "http://localhost:8080",
				configurationCategory = "Instance Configuration",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.editDefaultLandingPageCP(defaultLandingPage = "/web/guest/landing");
		}

		task ("Add public page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "landing");
		}

		task ("Logout and login") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Assert url value") {
			AssertLocation(value1 = "http://localhost:8080/web/guest/landing");
		}
	}

	@description = "This is a use case for LRQA-27622. Users could login using Token Based SSO."
	@priority = "5"
	test TokenBasedSSOSmoke {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Login#TokenBasedSSOSmoke";

		task ("Login and reset token based SSO configuration") {
			User.firstLoginPG();

			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "Token Based SSO",
				configurationScope = "System Scope");

			SystemSettings.resetConfiguration();
		}

		task ("Enable and save configuration") {
			FormFields.enableCheckbox(fieldName = "Enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Run and command") {
			AntCommand(
				locator1 = "build-test-authentication.xml",
				value1 = "verify-token-based-login -Dportal.url=http://localhost:8080/web/guest -Duser.token=test@liferay.com");
		}

		task ("Disable configuration") {
			FormFields.disableCheckbox(fieldName = "Enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com and enable token based SSO") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			PortalSettings.openInstanceSettingsAdmin(baseURL = "http://www.able.com:8080");

			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "Token Based SSO",
				configurationScope = "Virtual Instance Scope");

			FormFields.enableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Run ant command") {
			AntCommand(
				locator1 = "build-test-authentication.xml",
				value1 = "verify-token-based-login -Dportal.url=http://www.able.com:8080/web/guest -Duser.token=test@www.able.com");
		}
	}

	@description = "This is a use case for LPS-150388 TC-1/5: Admin password need to be set on first startup if the default admin password property is not set."
	@priority = "3"
	test UserSetNewPasswordWithoutPasswordProperty {
		property custom.properties = "company.security.send.password.reset.link=true${line.separator}passwords.default.policy.change.required=false${line.separator}default.admin.password=${line.separator}jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "OnDemandAdmin#UserSetNewPasswordWithoutPasswordProperty";

		task ("Given: User opens the portal for the first time without default admin password property") {
			Navigator.openURL();
		}

		task ("When: User accepts termss and sets the admin password") {
			SignIn.agreeToTermsOfUse();

			WaitForElementPresent(locator1 = "SignIn#SET_PASSWORD_TITLE");

			User.resetPassword(newPassword = "tester");

			User.answerPasswordReminder();
		}

		task ("Then: Admin password is set and user can log in with this password in the future") {
			AssertLocation(value1 = "http://localhost:8080/web/guest/landing");

			User.logoutPG();

			User.firstLoginUI(password = "tester");
		}
	}

	@description = "This is a use case for LRQA-27619. Verify that LDAP and OpenSSO portlets are present at Instance Settings."
	@priority = "3"
	test ViewInstanceSettingsAuthentication {
		property osgi.app.includes = "portal-security-sso-openid";

		task ("Login and view General CP authentication settings") {
			User.firstLoginPG();

			PortalSettings.viewAuthenticationGeneralCP();
		}

		task ("View LDAP CP authentication settings") {
			PortalSettings.viewAuthenticationLDAPCP();
		}

		task ("View openSSO CP authentication settings") {
			PortalSettings.viewAuthenticationOpenSSOCP();
		}
	}

	@description = "This is a use case for LPS-150388 TC-3: If the default admin password property is not given, virtual instances need to be defined with 3 extra informations: screen name, admin email and password."
	@priority = "3"
	test VirtualInstancesNeedExtraInformationWithoutPasswordProperty {
		property custom.properties = "default.admin.password=";
		property test.name.skip.portal.instance = "OnDemandAdmin#VirtualInstancesNeedExtraInformationWithoutPasswordProperty";

		task ("Given: User opens the portal for the first time without default admin password property") {
			Navigator.openURL();

			SignIn.agreeToTermsOfUse();

			WaitForElementPresent(locator1 = "SignIn#SET_PASSWORD_TITLE");

			User.resetPassword(newPassword = "test");

			User.answerPasswordReminder();
		}

		task ("When: User adds a new virtual instance and sets the new fields with correct information") {
			SAML.addVirtualInstances(
				instanceAdminEmail = "test@www.able.com",
				instanceAdminFirstName = "FirstTest",
				instanceAdminLastName = "LastTest",
				instancePassword = "tester",
				instanceScreenName = "tester",
				virtualHosts = "www.able.com");
		}

		task ("Then: The virtual instance will be created with the given information") {
			User.firstLoginUI(
				password = "tester",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			MyAccount.openMyAccountAdmin(baseURL = "http://www.able.com:8080");

			User.viewUserInfomation(
				userEmailAddress = "test@www.able.com",
				userFirstName = "FirstTest",
				userLastName = "LastTest",
				userScreenName = "tester");
		}
	}

	@description = "This is a use case for LPS-150388 TC-2: If the default admin password property is set, user doesn't need to define screen name, admin email and password upon virtual instance creation."
	@priority = "3"
	test VirtualInstancesNeedNoExtraInformationWithPasswordProperty {
		property custom.properties = "company.security.send.password.reset.link=true${line.separator}passwords.default.policy.change.required=false${line.separator}default.admin.password=tester";
		property test.name.skip.portal.instance = "OnDemandAdmin#VirtualInstancesNeedNoExtraInformationWithPasswordProperty";

		task ("Given: User opens the portal with a set admin password and logs in") {
			User.firstLoginPG();
		}

		task ("When: User start to create a virtuali instance") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			LexiconEntry.gotoAdd();
		}

		task ("Then: The screen name field will not be present and can create an instance with setting basic information") {
			AssertElementNotPresent(locator1 = "TextInput#VIRTUAL_INSTANCE_SCREEN_NAME");

			SAML.addVirtualInstances(virtualHosts = "www.able.com");
		}
	}

}