@component-name = "portal-user-management-and-portal-configuration"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Personal Data";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			BlogsEntry.tearDownCP();

			DMDocument.tearDownCP();

			MessageboardsThread.tearDownCP();

			WikiPage.tearDownCP();

			Site.tearDownCP();
		}
	}

	@priority = "4"
	test AnonymizeAllEntries {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addFolder(
			folderName = "WC GDPR Folder",
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Anonymize testing.",
			folderName = "WC GDPR Folder",
			groupName = "Guest",
			title = "GDPR Anonymize Article in Folder",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Anonymize testing.",
			groupName = "Guest",
			title = "GDPR Anonymize Article",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Wiki");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoAllPagesCP();

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.anonymizeDataViaReviewData(allApplications = "true");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		BlogsEntry.viewEntryTable(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryAuthorCP(
			entryAuthorFullName = "Anonymous Anonymous",
			entryTitle = "Blogs Entry Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		for (var entryTitle : list "WC GDPR Folder,GDPR Anonymize Article") {
			WebContent.viewEntryListAuthor(
				author = "Anonymous Anonymous",
				entryTitle = "${entryTitle}");
		}

		WebContentFolder.gotoCP(
			folderName = "WC GDPR Folder",
			webContentTitle = "WC GDPR Folder");

		WebContent.viewEntryListAuthor(
			author = "Anonymous Anonymous",
			entryTitle = "GDPR Anonymize Article in Folder");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
			value1 = "Anonymous Anonymous");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Anonymous Anonymous",
			replyCount = "0",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Wiki");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoAllPagesCP();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		var key_wikiPageTitle = "Wiki Page Title";
		var key_wikiPageUsername = "Anonymous Anonymous";

		AssertTextEquals(
			locator1 = "WikiTable#ALL_PAGES_USER",
			value1 = "Anonymous Anonymous");
	}

	@priority = "5"
	test AnonymizeEntryFromApplication {
		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.anonymizeDataViaReviewData(application = "Documents and Media");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
			value1 = "Anonymous Anonymous");
	}

	@description = "This test asserts that all applications that do not have items are visible but disabled."
	@ignore = "Test Stub"
	@priority = "2"
	test AppsWithNoEntriesAreDisabledInNewDataExport {

		// TODO LRQA-50751 View app level data and switch between different lists of entities (LPS-77750)

	}

	@description = "This test anonymizes all entries from an application"
	@priority = "3"
	test CanAnonymizeAllEntriesFromAnApplication {
		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.anonymizeAllEntriesinApplicationCP(
			applications = "Documents and Media",
			itemsCount = "3");

		GDPR.viewNoEntryInApplicationCP(applications = "Documents and Media");

		for (var entryTitle : list "Document_1,Document_2,Document_3") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${entryTitle}");

			DMDocument.expandInfo();

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
				value1 = "Anonymous Anonymous");
		}
	}

	@description = "This test anonymizes all staged data from an application"
	@ignore = "Test Stub"
	@priority = "3"
	test CanAnonymizeAllStagedDataFromAnApplication {

		// TODO LRQA-50755 Anonymize all staged data from an Application

	}

	@description = "This test adds an asset and link a related asset."
	@ignore = "Test Stub"
	@priority = "3"
	test CanAnonymizeARelatedAsset {

		// TODO LRQA-50758

	}

	@description = "This test anonymizes a staged and a live entry from an applciation."
	@ignore = "Test Stub"
	@priority = "3"
	test CanAnonymizeASingleStagedAndLiveEntryFromAnApplication {

		// TODO LRQA-50756 Anonymize a single staged and live entry from an Application

	}

	@description = "This test anonymizes entries from an application that has hierarachy"
	@ignore = "Test Stub"
	@priority = "3"
	test CanAnonymizeEntriesFromAnApplicationWithHierarchy {

		// TODO LRQA-50731 Data Erasure - Anonymize entries from an Application that has a hierarchy

	}

	@description = "LPS-77748"
	@priority = "3"
	test CanAnonymizeMultipleEntriesFromAnApplication {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(dmFolderName = "Folder1");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "Documents and Media",
			itemsCount = "5");

		GDPR.anonymizeMultipleEntriesCP(rowEntry = "Folder1,Document_2.docx");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
			value1 = "Anonymous Anonymous");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "Folder1");

		Click.clickAt(locator1 = "Icon#INFO");

		AssertTextPresent(
			locator1 = "Sidebar#SIDEBAR",
			value1 = "Anonymous Anonymous");
	}

	@description = "This test anonymizes only one entry from an application via the Info panel"
	@priority = "2"
	test CanAnonymizeViaInfoPanel {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry 1");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry 2");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "Blogs",
			itemsCount = "2");

		GDPR.anonymizeSingleEntryViaInfoPanel(rowEntry = "Blogs Entry 1");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		BlogsEntry.viewEntryAuthorCP(
			entryAuthorFullName = "Anonymous Anonymous",
			entryTitle = "Blogs Entry 1");
	}

	@description = "This test deletes multiple staged data from an application."
	@ignore = "Test Stub"
	@priority = "3"
	test CanDeleteAllStagedDataFromAnApplication {

		// TODO LRQA-50753 Delete all staged data from an Application

	}

	@description = "This test deletes and anonymizes all entries from all applications"
	@priority = "3"
	test CanDeleteAndAnonymizeAllEntries {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.deleteAndAnonymizeAllEntriesCP(
			itemsCount = "2",
			userName = "userfn userln");
	}

	@description = "This test deletes export process"
	@ignore = "Test Stub"
	@priority = "3"
	test CanDeleteAnExportProcess {

		// TODO LRQA-50743 Delete Export

	}

	@description = "This test adds an asset and link a related asset."
	@ignore = "Test Stub"
	@priority = "3"
	test CanDeleteARelatedAsset {

		// TODO LRQA-50757

	}

	@description = "This test deletes a staged and a live entry from an applciation."
	@ignore = "Test Stub"
	@priority = "3"
	test CanDeleteASingleStagedAndLiveEntryFromAnApplication {

		// TODO LRQA-50754 Delete a staged and live single entry from an Application

	}

	@description = "This test deletes entries from an application that has hierarchy"
	@ignore = "Test Stub"
	@priority = "3"
	test CanDeleteEntriesFromAnApplicationWithHierarchy {

		// TODO LRQA-50724 Data Erasure - Delete entries from an Application that has a hierarchy

	}

	@description = "This is a use case for LPS-77748. This test deletes multiple selected entries from a single application."
	@priority = "3"
	test CanDeleteMultipleEntriesFromAnApplication {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(dmFolderName = "Folder1");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "Documents and Media",
			itemsCount = "5");

		AssertTextPresent(value1 = "DLFOLDER");

		AssertTextPresent(value1 = "DLFILEENTRY");

		GDPR.deleteMultipleEntriesCP(rowEntry = "Folder1,Document_2.docx");

		GDPR.filterByApplications(
			applications = "Documents and Media",
			itemsCount = "3");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertTextNotPresent(value1 = "Folder1");

		AssertTextNotPresent(value1 = "Document_2");
	}

	@description = "LRQA-50747"
	@ignore = "Test Stub"
	@priority = "2"
	test CanFilterAndOrderExportProcesses {

		// TODO LRQA-50747 Test Case 6c - Can Filter and Order Exports

	}

	@description = "This test filters application to Forms, Web Content, Bookmarks, and Contacts and views all filtered data in Review Data section"
	@priority = "3"
	test CanFilterAndViewData {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Form Page");

		Navigator.gotoPage(pageName = "Form Page");

		Portlet.addPG(
			pageName = "Form Page",
			portletName = "Form");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm();

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextLabel(
			fieldLabel = "Text Field",
			fieldName = "${fieldTextField}");

		FormFields.editText(
			fieldName = "${fieldTextField}",
			fieldValue = "Text Field Value");

		FormPortlet.submitSuccessfully();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			widgetName = "Contacts Center");

		Navigator.gotoPage(pageName = "Contacts Center Page");

		ContactsCenter.addPG(
			contactName = "testfn testln",
			emailAddress = "test1@liferay.com");

		ContactsCenter.viewContactPG(
			contactName = "testfn testln",
			emailAddress = "test1@liferay.com");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR testing.",
			groupName = "Guest",
			title = "GDPR Article",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Bookmarks");

		Bookmark.addCP(
			bookmarkDescription = "This is a test bookmark!",
			bookmarkName = "Test Bookmark",
			bookmarkURL = "https://www.liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		Click.clickNoWaitForVisible(
			key_selectData = "Contacts Center",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		AssertElementPresent(
			key_rowEntry = "testfn testln",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		GDPR.filterByScope(scope = "Regular Sites");

		Click.clickNoWaitForVisible(
			key_selectData = "Bookmarks",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		AssertElementPresent(
			key_rowEntry = "Test Bookmark",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		Click.clickNoWaitForVisible(
			key_selectData = "Forms",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		AssertElementPresent(
			key_rowEntry = "Created Form Name",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		Click.clickNoWaitForVisible(
			key_selectData = "Web Content",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		Click.clickNoWaitForVisible(
			key_selectData = "JournalArticle",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		AssertElementPresent(
			key_rowEntry = "gdpr-article",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
	}

	@description = "LPS-77749"
	@priority = "2"
	test CanOrderDataInViewData {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "A",
			dmDocumentFile = "Document_1.jpeg",
			dmDocumentTitle = "Document_1");

		DMDocument.addCP(
			dmDocumentDescription = "B",
			dmDocumentFile = "Document_2.docx",
			dmDocumentTitle = "Document_2");

		DMDocument.addCP(
			dmDocumentDescription = "C",
			dmDocumentFile = "Document_3.txt",
			dmDocumentTitle = "Document_3");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "Documents and Media",
			itemsCount = "3");

		for (var orderBy : list "Name,Description") {
			ManagementBar.setFilterAndOrder(orderBy = "${orderBy}");

			ManagementBar.toggleViewOrder(order = "list-up");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_3.txt");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_1.jpeg");

			ManagementBar.toggleViewOrder(order = "list-down");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_1.jpeg");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_3.txt");
		}
	}

	@description = "This test publishes a staged entry to live after deleting live entry."
	@ignore = "Test Stub"
	@priority = "3"
	test CanPublishToLiveADeletedLiveEntry {

		// TODO LRQA-50759 Publish to live a deleted live entry (Message Board)

	}

	@priority = "4"
	test DeleteAllEntriesFromInstanceScope {
		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			widgetName = "Announcements");

		JSONAnnouncement.addAnnouncement(
			announcementContent = "This is an announcement added via json.",
			announcementTitle = "Announcement Entry Title",
			announcementURL = "http://www.liferay.com",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.gotoPage(pageName = "Announcements Page");

		AnnouncementsEntry.viewPG(
			distributionScope = "General",
			entryContent = "This is an announcement added via json.",
			entryTitle = "Announcement Entry Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByScope(scope = "Instance");

		GDPR.filterByApplications(
			applications = "All Applications",
			itemsCount = "1");

		GDPR.deleteAllEntriesCP();

		Navigator.gotoPage(pageName = "Announcements Page");

		AnnouncementsEntry.viewNoPG(entryTitle = "Announcement Entry Title");
	}

	@priority = "4"
	test DeleteAllEntriesFromPersonalSiteScope {
		property test.name.skip.portal.instance = "GDPR#DeleteEntryFromPersonalSiteScope";

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		UserBar.gotoDropdownItem(dropdownItem = "My Profile");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry in My Profile");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry in My Dashboard");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject in My Dashboard");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByScope(scope = "Personal Site");

		GDPR.filterByApplications(
			applications = "All Applications",
			itemsCount = "4");

		GDPR.deleteAllEntriesCP();

		GDPR.viewNoEntryInApplicationCP(applications = "All Applications");
	}

	@priority = "4"
	test DeleteAllEntriesFromRegularSitesScope {
		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Page 1");

		JSONUser.addUserToSite(
			groupName = "Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByScope(scope = "Regular Sites");

		GDPR.filterByApplications(
			applications = "All Applications",
			itemsCount = "1");

		GDPR.deleteAllEntriesCP();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		LexiconEntry.viewNoEntry(rowEntry = "Blogs Entry Title");
	}

	@priority = "5"
	test DeleteEntryFromApplication {
		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "Blogs",
			itemsCount = "1");

		GDPR.deleteSingleEntryCP(rowEntry = "Blogs Entry Title");

		GDPR.viewNoEntryInApplicationCP(applications = "Blogs");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.viewNoEntry(rowEntry = "Blogs Entry Title");
	}

	@priority = "4"
	test EditEntryFromApplication {
		ProductMenuHelper.openProductMenu();

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "Documents and Media",
			itemsCount = "1");

		GDPR.editEntryCP(
			applications = "Documents and Media",
			rowEntry = "Document_1.txt");

		DMDocument.editCmd(
			dmDocumentDescriptionEdit = "Edit DM Document Description",
			dmDocumentTitleEdit = "Edit DM Document Title");

		Button.clickPublish();

		AssertElementPresent(
			key_firstName = "userfn",
			key_lastName = "userln",
			locator1 = "DataErasure#HEADER");

		GDPR.viewEntryRowInApplicationCP(
			tableEntry = "Document_1.txt",
			tableEntryPartialTextList = "Document_1.txt,Edit DM Document Description");
	}

	@description = "LPS-77750 This test asserts that the details of the entry display when user clicks on the Info icon."
	@priority = "3"
	test EntryDetailsDisplayInInfoPanel {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(
			dmFolderDescription = "Folder_1 Description",
			dmFolderName = "Folder_1");

		DMDocument.addCP(
			dmDocumentDescription = "Document_1 Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Document_1 Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "Documents and Media",
			itemsCount = "2");

		AssertTextPresent(value1 = "DLFOLDER");

		AssertTextPresent(value1 = "DLFILEENTRY");

		LexiconEntry.selectEntry(rowEntry = "Folder_1");

		Click.clickAt(locator1 = "Icon#INFO");

		for (var infoPanel : list "Folder_1,Folder_1 Description") {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMedia#SIDEBAR_INFO_ACTIVE",
				value1 = "${infoPanel}");
		}

		LexiconEntry.selectEntry(rowEntry = "Document_1.txt");

		Uncheck(
			key_rowEntry = "Folder_1",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");

		for (var infoPanel : list "Document_1 Title,Document_1 Description,txt") {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMedia#SIDEBAR_INFO_ACTIVE",
				value1 = "${infoPanel}");
		}
	}

	@priority = "4"
	test ExportAllEntries {
		property portal.acceptance = "true";

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			widgetName = "Announcements");

		JSONAnnouncement.addAnnouncement(
			announcementContent = "Announcements Entry Content",
			announcementTitle = "Announcements Entry Title",
			announcementURL = "http://www.liferay.com",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.gotoPage(pageName = "Announcements Page");

		AnnouncementsEntry.viewPG(
			distributionScope = "General",
			entryContent = "Announcements Entry Content",
			entryTitle = "Announcements Entry Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			widgetName = "Contacts Center");

		Navigator.gotoPage(pageName = "Contacts Center Page");

		ContactsCenter.addPG(
			contactName = "test1",
			emailAddress = "test1@liferay.com");

		ContactsCenter.viewContactPG(
			contactName = "test1",
			emailAddress = "test1@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addFolder(
			folderName = "WC GDPR Export Folder",
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Export testing.",
			folderName = "WC GDPR Export Folder",
			groupName = "Guest",
			title = "GDPR Export Article in Folder",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Export testing.",
			groupName = "Guest",
			title = "GDPR Export Article",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.openURL();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Wiki");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoAllPagesCP();

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.exportPersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.addExportProcessCP(
			applications = "Web Content,Wiki,Message Boards,Contacts Center,Blogs,Announcements,Documents and Media",
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.downloadExportedPersonalData(applications = "Web Content,Wiki,Message Boards,Contacts Center,Blogs,Announcements,Documents and Media");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AssertConsoleTextNotPresent(value1 = "com.liferay.portal.kernel.exception.SystemException");
	}

	@description = "This test changes pagination and assert export processes display properly."
	@ignore = "Test Stub"
	@priority = "2"
	test PaginationWorksInExportPersonalData {

		// TODO LRQA-50749 GDPR - Test Case 6e - Assert Pagination

	}

	@description = "This test changes pagination and assert entries display properly."
	@ignore = "Test Stub"
	@priority = "2"
	test PaginationWorksInNewDataExport {

		// TODO LRQA-50752 Test Case 6h - For the New Data Export page, assert pagination

	}

	@description = "LPS-91766. This test asserts that the Remaining Items count under Status Summary is accurate"
	@priority = "3"
	test RemainingItemsCountIsAccurate {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title 2",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applications = "All Applications",
			itemsCount = "6");

		for (var applicationsCount : list "Blogs (2),Documents and Media (4)") {
			AssertTextPresent(value1 = "${applicationsCount}");
		}

		GDPR.deleteAllEntriesCP();

		AssertElementPresent(
			key_tab = "Auto Anonymize Data",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		GDPR.viewNoEntryInApplicationCP(applications = "All Applications");
	}

}