@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Password Policies";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();

			PasswordPolicies.tearDownCP();
		}
	}

	@priority = "5"
	test AdminCanUnlockUserAfterExcessiveFailedLoginAttempts {
		property environment.acceptance = "false";
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableLockout(passwordPolicyName = "Default Password Policy");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPoliciesNavigator.gotoPolicy(passwordPolicyName = "Default Password Policy");

		PasswordPolicies.viewPasswordPolicyLockout(passwordPolicyName = "Default Password Policy");

		User.logoutPG();

		User.loginUserInvalidPG(
			loginAttempts = "3",
			maximumFailure = "3",
			password = "incorrectpassword",
			userEmailAddress = "userea@liferay.com");

		User.loginUserPG();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.unlockUserAccount(userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG();
	}

	@description = "This test asserts a user can remove an assignee to the policy."
	@priority = "5"
	test CanAddAndRemoveAssignee {
		JSONUser.addUser(
			userEmailAddress = "userea5@liferay.com",
			userFirstName = "userfn5",
			userLastName = "userln5",
			userScreenName = "usersn5");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.assignMembers(
			assigneeName = "userfn5 userln5",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		PasswordPolicies.removeAssignee(assigneeName = "userfn5 userln5");
	}

	@description = "This test assigns multiple members to a policy and bulk removes them."
	@priority = "4"
	test CanBulkAssignAndRemoveAssignees {
		for (var userNum : list "1,2,3") {
			JSONUser.addUser(
				userEmailAddress = "userea${userNum}@liferay.com",
				userFirstName = "userfn${userNum}",
				userLastName = "userln${userNum}",
				userScreenName = "usersn${userNum}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.assignMembers(
			assigneeNames = "userfn1 userln1,userfn2 userln2,userfn3 userln3",
			assigneeType = "Users",
			bulkAssign = "true",
			passwordPolicyName = "Password Policy Name");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.viewAssignees(
			assigneeNames = "userfn1 userln1,userfn2 userln2,userfn3 userln3",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		PasswordPolicies.removeAssignee(
			assigneeNames = "userfn1 userln1,userfn2 userln2,userfn3 userln3",
			bulkRemove = "true");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No users were found.");
	}

	@description = "This test deletes a multiple policies at once through the management toolbar."
	@priority = "4"
	test CanBulkDeletePolicies {
		for (var passwordPolicyName : list "Policy One,Policy Two,Policy Three") {
			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "Password Policies");

			PasswordPolicies.addCP(passwordPolicyName = "${passwordPolicyName}");
		}

		PasswordPolicies.bulkDeleteCP(passwordPolicyName = "Policy One,Policy Two,Policy Three");
	}

	@description = "This test deletes a Password Policy."
	@priority = "5"
	test CanDeleteAPolicy {
		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.deleteCP(passwordPolicyName = "Password Policy Name");
	}

	@description = "This is a use case for LPS-60180. This test enables Password Syntax Checking. It also asserts that the specific error message displays when user attempts to enter a short password."
	@priority = "4"
	test ErrorMessageDisplaysWhenPasswordIsShorterThanMinimumLength {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property test.smtp.server.enabled = "true";

		var portalURL = PropsUtil.get("portal.url");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Sender",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureEmailSender(
			emailAddress = "test@liferay.com",
			emailSenderName = "Joe Bloggs");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		// Enabling Syntax Checking will set minimum length to 6 by default

		PasswordPolicies.enableSyntaxChecking(passwordPolicyName = "Default Password Policy");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.logoutPG();

		User.forgotPasswordSendResetLink(userEmailAddress = "userea@liferay.com");

		MockMock.openBodyLink(
			asset = "${portalURL}: Reset Your Password",
			content = "You can reset your password for ${portalURL}",
			subject = "${portalURL}: Reset Your Password");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
			value1 = "test");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
			value1 = "test");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "That password is too short. Please make sure your password is at least 6 characters long.");

		// Asserts user's password did not change

		User.loginPG(
			resetPassword = "Password2",
			syntaxCheckingEnabled = "true",
			userEmailAddress = "userea@liferay.com");
	}

	@description = "This is a use case for LPS-118342"
	@priority = "3"
	test LoginUserAfterPasswordPolicyChanged {
		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableChangeable(
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "false",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.togglePasswordExpiration(
			enablePasswordExpiration = "true",
			graceLimit = "0",
			minimumAge = "52 Weeks",
			passwordPolicyName = "Default Password Policy",
			warningTime = "2 Weeks");

		User.logoutPG();

		User.createAccount(
			newPassword = "Password1",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.loginPG(
			password = "Password1",
			userEmailAddress = "userea@liferay.com");
	}

	@description = "This test sets the Reset Ticket Max Age which defines how long a password reset link is valid."
	@priority = "3"
	test PasswordResetLinkGoesInvalidAfterResetTicketMaxAge {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property test.smtp.server.enabled = "true";

		var portalURL = PropsUtil.get("portal.url");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Sender",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureEmailSender(
			emailAddress = "test@liferay.com",
			emailSenderName = "Joe Bloggs");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "false",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes",
			resetTicketMaxAge = "5 Minutes");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.logoutPG();

		User.forgotPasswordSendResetLink(userEmailAddress = "userea@liferay.com");

		Pause(locator1 = "300000");

		MockMock.openBodyLink(
			asset = "${portalURL}: Reset Your Password",
			content = "You can reset your password for ${portalURL}",
			subject = "${portalURL}: Reset Your Password");

		AssertTextEquals(
			locator1 = "Message#ERROR_3_ALT",
			value1 = "Your password reset link is no longer valid Request a new password reset link.");
	}

	@description = "This test asserts that a user cannot be added to another policy if he is already assigned to a policy."
	@priority = "4"
	test UserCannotBeAddedToTwoPolicies {
		JSONUser.addUser(
			userEmailAddress = "userea6@liferay.com",
			userFirstName = "userfn6",
			userLastName = "userln6",
			userScreenName = "usersn6");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.assignMembers(
			assigneeName = "userfn6 userln6",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name 2");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Assign Members",
			rowEntry = "Password Policy Name 2");

		Navigator.gotoNavItem(navItem = "Users");

		LexiconEntry.gotoAdd();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertNotEditable(
			key_rowEntry = "userfn6 userln6",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");
	}

	@description = "This test sets the Password Changes Minimum Age to 30 minutes to assert the error message when a user attempts to change password right away."
	@priority = "4"
	test UserIsNotAbleToChangePasswordWithinThePasswordMinimumAge {
		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "false",
			minimumAge = "30 Minutes",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UserNavigator.gotoUser(userScreenName = "usersn2");

		User.editPassword(newPassword = "pass");

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "test");

		Type(
			key_text = "Enter Again",
			locator1 = "TextInput#ANY",
			value1 = "test");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "You cannot change your password yet. Please wait");
	}

	@description = "This test turns on Enable Password History. It attempts to reuse a password and asserts that a user cannot do so."
	@priority = "4"
	test UserIsNotAbleToReuseAPasswordIfHistoryIsEnabled {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableHistory(
			historyCount = "2",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password History");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		// First password

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Type(
			key_text = "Enter Again",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Second password

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "password");

		Type(
			key_text = "Enter Again",
			locator1 = "TextInput#ANY",
			value1 = "password");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Attempt to input first password

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Type(
			key_text = "Enter Again",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "That password has already been used. Please enter a different password.");

		// Enter a different password so we can reach history count of 2

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass2");

		Type(
			key_text = "Enter Again",
			locator1 = "TextInput#ANY",
			value1 = "pass2");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Assert entering first password works after reaching history count

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Type(
			key_text = "Enter Again",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Disabling Password History

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.disableHistory(
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password History");

		// After disabling history, we will assert that password history doesn't save

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		for (var password : list "pass3,password") {
			Type(
				key_text = "New Password",
				locator1 = "TextInput#ANY",
				value1 = "${password}");

			Type(
				key_text = "Enter Again",
				locator1 = "TextInput#ANY",
				value1 = "${password}");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}
	}

	@description = "This test sets the Reset Failure Count for lockout which defines how long the number of attempts is stored."
	@priority = "4"
	test UserWillNotBeLockedOutIfHeAttemptsToLoginAfterTheDefinedMaximumFailure {
		JSONUser.addUser(
			userEmailAddress = "userea3@liferay.com",
			userFirstName = "userfn3",
			userLastName = "userln3",
			userScreenName = "usersn3");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			newPassword = "test",
			requireReset = "false",
			userEmailAddress = "userea3@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableLockout(
			lockoutDuration = "Until unlocked by an administrator",
			maximumFailure = "2",
			passwordPolicyName = "Default Password Policy",
			resetFailureCount = "5 Minutes");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		User.logoutPG();

		Navigator.gotoLoginPage();

		Type.typePause(
			locator1 = "TextInput#EMAIL_ADDRESS",
			value1 = "userea3@liferay.com");

		Type.typePause(
			locator1 = "TextInput#PASSWORD",
			value1 = "test2");

		Click(locator1 = "Button#SIGN_IN");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_DISMISSIBLE",
			value1 = "Authentication failed. Please try again.");

		Pause(locator1 = "300000");

		Type.typePause(
			locator1 = "TextInput#EMAIL_ADDRESS",
			value1 = "userea3@liferay.com");

		Type.typePause(
			locator1 = "TextInput#PASSWORD",
			value1 = "test2");

		Click(locator1 = "Button#SIGN_IN");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_DISMISSIBLE",
			value1 = "Authentication failed. Please try again.");
	}

	@priority = "4"
	test ViewInvalidPasswordChangeSyntax {
		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableSyntaxChecking(passwordPolicyName = "Default Password Policy");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordInvalidCP(
			minimumNumbers = "1",
			newPassword = "password",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordInvalidCP(
			newPassword = "pass",
			passwordTooShort = "true",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
			value1 = "Password1");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
			value1 = "Password1");

		PortletEntry.save();

		User.logoutPG();

		Navigator.openURL();

		Navigator.gotoLoginPage();

		Type(
			locator1 = "TextInput#EMAIL_ADDRESS",
			value1 = "userea@liferay.com");

		Type(
			locator1 = "TextInput#PASSWORD",
			value1 = "Password1");

		Click(
			locator1 = "Button#SIGN_IN",
			value1 = "Sign In");

		AssertElementNotPresent(locator1 = "Button#SIGN_IN");

		User.acceptEndUserLicenseAgreement();

		Type(
			locator1 = "TextInput#PASSWORD",
			value1 = "password");

		Type(
			locator1 = "TextInput#ENTER_AGAIN",
			value1 = "password");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "That password must contain at least 1 numbers.");

		Type(
			locator1 = "TextInput#PASSWORD",
			value1 = "pass");

		Type(
			locator1 = "TextInput#ENTER_AGAIN",
			value1 = "pass");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "That password is too short. Please make sure your password is at least 6 characters long.");

		Type(
			locator1 = "TextInput#PASSWORD",
			value1 = "Password2");

		Type(
			locator1 = "TextInput#ENTER_AGAIN",
			value1 = "Password2");

		Button.clickSave();

		User.answerPasswordReminder();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		User.logoutPG();

		User.loginUserPG();
	}

	@description = "This is a use case for LPS-119650"
	@priority = "3"
	test ViewInvalidRegularExpressionMessage {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		var regex = '''^((?=.*?[a-z])(?=.*?\d)(?=.*?[;~!@ #$%^&*_\-+=`|\\(){}\[\]:;\"'<>,.?/])|(?=.*?[A-Z])(?=.*?\d)(?=.*?[;~!@ #$%^&*_\-+=`|\\(){}\[\]:;\"'<>,.?/])|(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[;~!@ #$%^&*_\-+=`|\\(){}\[\]:;\"'<>,.?/])|(?=.*?[A-Z])(?=.*?[a-z])(?=.*?\d)).{12,24}$''';

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableSyntaxChecking(passwordPolicyName = "Default Password Policy");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableSyntaxChecking(
			passwordPolicyName = "Default Password Policy",
			regularExpression = "${regex}");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordInvalidCP(
			newPassword = "Habanero0*#",
			regex = "${regex}",
			userEmailAddress = "test1@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableSyntaxChecking(
			passwordPolicyName = "Default Password Policy",
			regularExpression = "(?=.{4})(?:[a-zA-Z0-9]*)");
	}

	@priority = "4"
	test ViewPasswordChangeableAndChangeRequired {
		property portal.acceptance = "quarantine";

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.gotoEditCP(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		AssertElementPresent(
			key_checkboxName = "Require Password Reset",
			locator1 = "Checkbox#CHECKBOX_DISABLED");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "false",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		User.openUsersAdmin();

		User.gotoEditCP(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		AssertElementNotPresent(
			key_checkboxName = "Require Password Reset",
			locator1 = "Checkbox#CHECKBOX_DISABLED");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "true",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		User.openUsersAdmin();

		User.gotoEditCP(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		AssertElementPresent(
			key_checkboxName = "Require Password Reset",
			locator1 = "Checkbox#CHECKBOX_DISABLED");

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.gotoEditCP(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		AssertElementNotPresent(
			key_checkboxName = "Require Password Reset",
			locator1 = "Checkbox#CHECKBOX_DISABLED");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.disableChangeable(
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		User.openUsersAdmin();

		User.editPasswordInvalidCP(
			changeable = "false",
			newPassword = "password2",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

		MyAccount.editPasswordInvalidCP(
			changeable = "false",
			currentPassword = "password",
			newPassword = "password2");
	}

	@description = "This is a use case for LPS-92178"
	@priority = "5"
	test ViewUserAccountExpired {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property environment.acceptance = "false";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableChangeable(
			passwordPolicyName = "Password Policy Name",
			passwordPolicyPanel = "Password Changes");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.togglePasswordExpiration(
			enablePasswordExpiration = "true",
			graceLimit = "1",
			minimumAge = "2 Weeks",
			passwordPolicyName = "Password Policy Name",
			warningTime = "1 Week");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.assignMembers(
			assigneeName = "userfn userln",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		var script = '''
			import com.liferay.portal.kernel.model.User;
			import com.liferay.portal.kernel.service.ServiceContext;
			import com.liferay.portal.kernel.service.ServiceContextFactory;
			import com.liferay.portal.kernel.service.UserLocalServiceUtil;
			import java.util.Date;

			ServiceContext serviceContext = ServiceContextFactory.getInstance(
				actionRequest);

			long creatorUserId = serviceContext.getUserId();
			User creatorUser = UserLocalServiceUtil.getUser(creatorUserId);
			long companyId = creatorUser.getCompanyId();
			String screenName = "usersn";
			String password = "test";

			use(groovy.time.TimeCategory) {
				def passwordModifiedDate = new Date() - 1.months

				long userId = UserLocalServiceUtil.getUserIdByScreenName(companyId, screenName);
				UserLocalServiceUtil.updatePasswordManually(
					userId, password, false, false,
					passwordModifiedDate);
				println passwordModifiedDate;
			}
		''';

		ServerAdministration.openServerAdmin();

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		User.logoutPG();

		User.firstLoginUI(userEmailAddress = "userea@liferay.com");

		Alert.viewErrorMessage(errorMessage = "Your password is expired. You have 0 grace login(s) remaining.");
	}

	@priority = "4"
	test ViewUserAccountLockoutviaOrganizationPasswordPolicy {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONOrganization.addOrganization(organizationName = "Organization Name");

		JSONOrganization.assignUserToOrganization(
			organizationName = "Organization Name",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.enableLockout(
			maximumFailure = "3",
			passwordPolicyName = "Password Policy Name",
			passwordPolicyPanel = "Lockout");

		JSONOrganization.assignPasswordPolicyToOrganization(
			organizationName = "Organization Name",
			passwordPolicyName = "Password Policy Name");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPoliciesNavigator.gotoPolicy(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.viewPasswordPolicyLockout(
			maximumFailure = "3",
			passwordPolicyName = "Password Policy Name");

		User.logoutPG();

		User.loginUserInvalidPG(
			loginAttempts = "3",
			maximumFailure = "3",
			password = "incorrectpassword",
			userEmailAddress = "userea@liferay.com");

		User.loginUserPG();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.unlockUserAccount(userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG();
	}

}