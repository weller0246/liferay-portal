@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			Navigator.gotoNavItem(navItem = "Element Sets");

			FormsAdmin.teardownElementSets();

			Page.tearDownCP();
		}
	}

	@description = "Verify that the backspace function can delete all entries in the Calculator"
	@priority = "5"
	test BackspaceCanDeleteAllEntriesInCalculator {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "Numeric",
			label = "Numeric 1");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "Numeric",
			label = "Numeric 2");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Numeric 1",
			conditionOperator = "Is not empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Calculate",
			actionRowNumber = "1",
			actionTarget = "Numeric 2");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "(");

		FormRules.selectCalculateField(calculateFieldOption = "Numeric 1");

		FormRules.chooseCalculateOperator(calculateOperator = "*");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "2");

		FormRules.chooseCalculateOperator(calculateOperator = "+");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "7");

		FormRules.chooseCalculateOperator(calculateOperator = "-");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "5");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = ")");

		FormRules.chooseCalculateOperator(calculateOperator = "/");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "2");

		for (var i : list "1,2,3,4") {
			FormRules.clickOnCalculatorBackspace();
		}

		FormRules.viewCalculatorExpression(calculatorExpression = "(Numeric 1*2+7-");

		for (var i : list "1,2,3,4") {
			FormRules.clickOnCalculatorBackspace();
		}

		FormRules.viewCalculatorExpression(calculatorExpression = "(Numeric 1*");

		for (var i : list "1,2,3") {
			FormRules.clickOnCalculatorBackspace();
		}

		FormRules.viewCalculatorExpression(calculatorExpression = "");
	}

	@description = "Verify that a Rule Action can be deleted"
	@ignore = "True"
	@priority = "5"
	test CanBeDeleted {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is not empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Numeric",
			conditionField = "Text",
			conditionOperator = "Is not empty",
			ruleNumber = "1");

		FormRules.gotoEdit(ruleNumber = "1");

		Click(locator1 = "FormRules#RULE_BUILDER_ADD_ACTION");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "2",
			actionTarget = "Text");

		FormRules.deleteActions(rowNumber = "1");

		FormRules.viewActionNotPresent(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.viewAction(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionOperator = "Is not empty",
			ruleNumber = "1");
	}

	@description = "Verify that a Rule Action can be edited"
	@priority = "5"
	test CanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is not empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Numeric",
			conditionField = "Text",
			conditionOperator = "Is not empty",
			ruleNumber = "1");

		FormRules.gotoEdit(ruleNumber = "1");

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is not empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		Form.validateNoFieldLabel(fieldLabel = "Numeric");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewLabel(
			fieldLabel = "Numeric",
			fieldName = "Numeric");

		FormFields.viewRequiredAsteriskDataFieldNotPresent(fieldFieldLabel = "Numeric");
	}

	@description = "Verify that a Rule with 'Jump to page' action can be created"
	@priority = "4"
	test CanCreateAJumpToPageRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.editPageTitle(
			formPageName = "Page A",
			formTitleNumber = "1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Form.addPage(formAddNewPageNumber = "1");

		Form.editPageTitle(
			formPageName = "Page B",
			formTitleNumber = "2");

		Form.addPage(formAddNewPageNumber = "2");

		Form.editPageTitle(
			formPageName = "Page C",
			formTitleNumber = "3");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Contains",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Jump to Page",
			actionRowNumber = "1",
			actionTarget = "3 Page C");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		Form.viewPageName(
			formPageName = "Page A",
			formTitleNumber = "1");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormPortlet.clickNextPage();

		Form.viewPageName(
			formPageName = "Page C",
			formTitleNumber = "1");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that a Rule with 'Enable' action can be created"
	@priority = "4"
	test CanCreateAnEnableRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Contains",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Enable",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewFieldDisabled(fieldName = "Numeric");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.clickSubmit();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that a Rule with more than one Action can be created"
	@priority = "5"
	test CanCreateARuleWithMoreThanOneAction {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(fieldType = "Text");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "2",
			fieldType = "Paragraph");

		FormFields.editParagraphBody(content = "Test");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is not empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.addAction();

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "2",
			actionTarget = "Paragraph");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewField(fieldName = "Numeric");

		FormFields.viewFieldNotRequired(fieldLabel = "Numeric");

		FormFields.viewFieldNotVisible(fieldName = "Paragraph");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewFieldVisible(fieldName = "Paragraph");

		FormFields.viewFieldRequired(fieldLabel = "Numeric");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.submit();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that a Rule with 'Show' action can be created"
	@priority = "5"
	test CanCreateAShowRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(fieldType = "Text");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Contains",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewFieldNotVisible(fieldName = "Numeric");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewFieldVisible(fieldName = "Numeric");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.submit();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that a Calculate Rule can be created using the decimal point"
	@priority = "5"
	test CanIncludeDecimalPointInCalculations {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		for (var fieldAndPosition : list "Text-0,Numeric-1") {
			var field = StringUtil.extractFirst("${fieldAndPosition}","-");
			var position = StringUtil.extractLast("${fieldAndPosition}","-");

			Form.gotoAddField(
				fieldPositionNumber = "${position}",
				fieldType = "${field}",
				formPageNumber = "0");

			Form.closeSidebar();
		}

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Contains",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Calculate",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		for (var value : list "1,.,5,+,2,.,5") {
			if ("${value}" == "+") {
				FormRules.chooseCalculateOperator(calculateOperator = "${value}");
			}
			else {
				FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "${value}");
			}
		}

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "4");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that a Calculate Rule can be created using Numeric Fields in the calculation"
	@priority = "5"
	test CanIncludeNumericFieldsInCalculations {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Numeric 1");

		Form.gotoAdvancedTab();

		Form.editFieldReferenceMetal(fieldValue = "ValueReference1");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Numeric 2");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Numeric 1",
			conditionOperator = "Is not empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Calculate",
			actionRowNumber = "1",
			actionTarget = "Numeric 2");

		FormRules.selectCalculateFieldByFieldReference(calculateFieldOption = "ValueReference1");

		FormRules.chooseCalculateOperator(calculateOperator = "*");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewNumericFieldValue(
			fieldName = "Numeric",
			rowNumber = "2",
			value = "");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "15");

		FormFields.viewNumericFieldValue(
			fieldName = "Numeric",
			rowNumber = "2",
			value = "30");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that a Calculate Rule can be created using all operators (+, -, *, /)"
	@priority = "5"
	test CanIncludeOperatorsInCalculations {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Contains",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Calculate",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "(");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "1");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "0");

		FormRules.chooseCalculateOperator(calculateOperator = "+");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "1");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "0");

		FormRules.chooseCalculateOperator(calculateOperator = "-");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "5");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = ")");

		FormRules.chooseCalculateOperator(calculateOperator = "/");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "3");

		FormRules.chooseCalculateOperator(calculateOperator = "*");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "10");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that a Calculate Rule can be created using the parenthesis"
	@priority = "5"
	test CanIncludeParenthesisInCalculations {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Contains",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Calculate",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "(");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "1");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "0");

		FormRules.chooseCalculateOperator(calculateOperator = "+");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "1");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "0");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = ")");

		FormRules.chooseCalculateOperator(calculateOperator = "/");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "10");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

}