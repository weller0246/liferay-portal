@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Create a dynamic segment with individuals"
	@priority = "5"
	test CanCreateDynamicSegmentWithIndividuals {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		Navigator.openURL();

		Pause(locator1 = "5000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "email");

		ACSegments.editTextCriterion(textInput = "test@liferay.com");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");

		AssertElementPresent(
			key_userName = "Test Test",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Create a Dynamic Individuals Segment with a criteria that uses is unknown"
	@priority = "5"
	test CanCreateDynamicSegmentWithIndividualsUseUnknown {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		Navigator.openURL();

		Pause(locator1 = "5000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "fullName");

		ACSegments.editFormControlCriterion(
			criterionName = "fullName",
			option = "is unknown");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");

		AssertElementPresent(
			key_userName = "Test Test",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Create a segment that contains anonymous individuals"
	@priority = "5"
	test CanCreateSegmentWithAnonymousIndividuals {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		Navigator.openURL();

		Pause(locator1 = "5000");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.openURL();

		Pause(locator1 = "5000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.includeAnonymous();

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "fullName");

		ACSegments.editFormControlCriterion(
			criterionName = "fullName",
			option = "is unknown");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACSegments.viewSegmentMembershipLegendNumbers(
			anonymousNumber = "1",
			knownNumber = "1",
			totalNumber = "2");

		ACSegments.viewIncludeAnonymousLabel();
	}

	@description = "Create a static segment with individual"
	@priority = "5"
	test CanCreateStaticSegmentWithIndividuals {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		Navigator.openURL();

		Pause(locator1 = "5000");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "userfn userln");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Static Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "STATIC SEGMENT");

		AssertElementPresent(
			key_userName = "userfn userln",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

}