@component-name = "portal-publications"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONPublications.enablePublications();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ApplicationsMenu.gotoPortlet(
				category = "Publications",
				panel = "Applications",
				portlet = "Settings");

			Publications.disablePublications();
		}
	}

	@description = "Assert the form with Data Provider is published to production and submit successfully."
	@priority = "4"
	test PublishPublicationWithDataProviderInForm {
		property test.name.skip.portal.instance = "PublicationsForms#PublishPublicationWithDataProviderInForm";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		FormsAdminNavigator.enableLocalNetworkDataProvider();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		Navigator.gotoNavItem(navItem = "Data Providers");

		FormsAdminNavigator.gotoAddDataProvider();

		var portalURL = PropsUtil.get("portal.url");

		FormsAdmin.editDataProvider(
			name = "Liferay Countries",
			outputParameterLabel = "Country Names",
			outputParameterName = "Country Names",
			outputParameterPath = "nameCurrentValue",
			outputParameterType = "List",
			password = "test",
			url = "${portalURL}/api/jsonws/country/get-countries",
			username = "test@liferay.com");

		FormsAdmin.saveDataProvider();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.editDescription();

		Form.gotoAddField(fieldType = "Select from List");

		var fieldNameDataProvider = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Data Provider Select Field");

		Form.editFieldDataProvider(
			dataProvider = "Liferay Countries",
			dataProviderOutput = "Country Names");

		Form.closeSidebar();

		Form.save();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Form Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Form Page",
			widgetName = "Form");

		Navigator.gotoPage(pageName = "Form Page");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm();

		PortletEntry.save();

		Navigator.openURL();

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewSelectLabel(
			fieldLabel = "Data Provider Select Field",
			fieldName = "${fieldNameDataProvider}");

		FormFields.selectSelectOption(
			fieldName = "${fieldNameDataProvider}",
			selectOption = "China");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Data Provider Select Field",
			fieldValue = "China");
	}

	@description = "Assert the form with edited Element Set is published to production"
	@priority = "4"
	test PublishPublicationWithEditedElementSetInForm {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		Navigator.gotoNavItem(navItem = "Element Sets");

		FormsAdminNavigator.gotoAddElementSet();

		Form.editName(formName = "Element Set Name");

		Form.editDescription(formDescription = "Element Set Description");

		Form.addTextField();

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Image");

		Form.closeSidebar();

		Form.saveElementSet();

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		Navigator.gotoNavItem(navItem = "Element Sets");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Element Set Name");

		Form.gotoAddField(
			fieldPositionNumber = "2",
			fieldType = "Upload");

		Form.closeSidebar();

		Form.saveElementSet();

		Publications.gotoReviewChanges(publicationName = "Publication Name 2");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Dynamic Data Mapping Structure",
			changeSite = "Guest",
			changeTitle = "Element Set Name",
			changeType = "Modified",
			changeUser = "Test Test");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.gotoAddElementSet(elementSetTitle = "Element Set Name");

		Form.save();

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");
	}

	@description = "Assert the conflict needs manually resolved on Forms within Publications."
	@priority = "4"
	test ResolveConflictingPublicationsByDiscarding {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.editPageTitle(
			formPageName = "Created Form Page Name",
			formTitleNumber = "1");

		Form.addTextField();

		Form.editFieldLabelMetal(fieldValue = "Label");

		Form.closeSidebar();

		Form.save();

		JSONPublications.addPublication(publicationName = "Publication Name 1");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName();

		Form.editName(formName = "Created Form Name Edited");

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Single Selection");

		Form.closeSidebar();

		Form.save();

		Publications.gotoReviewChanges(publicationName = "Publication Name 1");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Dynamic Data Mapping Structure",
			changeSite = "Guest",
			changeTitle = "Created Form Name Edited",
			changeType = "Modified",
			changeUser = "Test Test");

		JSONPublications.addPublication(publicationName = "Publication Name 2");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		Form.deleteCP(formName = "Created Form Name");

		Publications.gotoReviewChanges(publicationName = "Publication Name 2");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Dynamic Data Mapping Structure",
			changeSite = "Guest",
			changeTitle = "Created Form Name",
			changeType = "Deleted",
			changeUser = "Test Test");

		JSONPublications.publishPublication(publicationName = "Publication Name 2");

		Publications.viewPublicationPublished(publicationName = "Publication Name 2");

		Publications.gotoPublish(
			gotoManagePublications = "true",
			publicationName = "Publication Name 1");

		Publications.discardChanges(
			changeCategory = "Dynamic Data Mapping Structure",
			changeTitle = "Created Form Name",
			conflictingChanges = "true",
			entryTitle = "Dynamic Data Mapping Structure");

		JSONPublications.publishPublication(publicationName = "Publication Name 1");

		Publications.viewPublicationPublished(publicationName = "Publication Name 1");
	}

	@description = "Assert the form with mutiple pages can be submited successfully within publications and the entry can be published to production."
	@priority = "4"
	test SubmitFormWithMultiplePagesWithinPublications {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.editPageTitle(
			formPageName = "Page 1",
			formTitleNumber = "1");

		Form.addTextField();

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.addPage(formAddNewPageNumber = "1");

		Form.editPageTitle(
			formPageName = "Page 2",
			formTitleNumber = "2");

		Form.gotoAddField(
			fieldType = "Single Selection",
			formPageNumber = "1");

		var fieldSingleSelectionField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Radio Field");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1");

		FormFields.editOptionsRow(
			optionName = "Option2",
			optionValue = "Option 2",
			rowNumber = "2");

		Form.closeSidebar();

		// Workaround LPS-117633

		/*Form.addPage(formAddNewPageNumber = "2");

		Form.editPageTitle(
			formPageName = "Page 3",
			formTitleNumber = "3");

		Form.gotoAddField(
			fieldType = "Upload"
			formPageNumber = "2");

		var fieldUploadField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Upload Field");

		Form.closeSidebar();*/

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName();

		Form.publishForm();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Form Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Form Page",
			widgetName = "Form");

		Navigator.gotoPage(pageName = "Form Page");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm();

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Next");

		FormFields.editText(
			fieldName = "${fieldTextField}",
			fieldValue = "Single Line Text");

		FormPortlet.nextPage(
			formPageCurrent = "Page 1",
			formPageNext = "Page 2");

		FormFields.viewRadioLabel(
			fieldLabel = "Radio Field",
			fieldName = "${fieldSingleSelectionField}");

		FormFields.selectRadioOption(
			fieldName = "${fieldSingleSelectionField}",
			radioOption = "Option 1");

		/*FormPortlet.nextPage(
			formPageCurrent = "Page 2",
			formPageNext = "Page 3");

		FormFields.viewUploadField(
			fieldLabel = "Upload Field",
			fieldName = "${fieldUploadField}");

		ItemSelector.gotoItemSelectorViaSelectButton();

		ItemSelector.uploadFile(
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg");*/

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Text Field",
			fieldValue = "Single Line Text");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Radio Field",
			fieldValue = "Option 1");

		/*FormsAdmin.viewFormTableEntry(
			fieldLabel = "Upload Field",
			fieldValue = "Document_1.jpg");*/

		var changeTitle = JSONDDMForm.getFormInstanceRecordId(
			formName = "Created Form Name",
			groupName = "Guest");

		Publications.gotoReviewChanges();

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Form Instance",
			changeSite = "Guest",
			changeTitle = "Created Form Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Form Record",
			changeSite = "Guest",
			changeTitle = "${changeTitle}",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesViaContextStyle(
			changeCategory = "Form Record",
			changeDescription = "Test Test added a Form Record in Guest",
			changeTitle = "${changeTitle}");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Text Field",
			fieldValue = "Single Line Text");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Radio Field",
			fieldValue = "Option 1");

		/*FormsAdmin.viewFormTableEntry(
			fieldLabel = "Upload Field",
			fieldValue = "Document_1.jpg");*/
	}

	@description = "Assert the form with rule can be submited successfully within publications and published to production."
	@priority = "4"
	test SubmitFormWithRuleWithinPublications {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.addTextField();

		var fieldNameTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Date");

		var fieldNameDateField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Date Field");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text Field",
			conditionOperator = "Is Not Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Date Field");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewDateFieldNotPresent(
			fieldLabel = "Date Field",
			fieldName = "${fieldNameDateField}");

		FormFields.editText(
			fieldName = "${fieldNameTextField}",
			fieldValue = "Test");

		FormFields.viewDateField(
			fieldLabel = "Date Field",
			fieldName = "${fieldNameDateField}");

		FormFields.editTextWithBackspace(fieldName = "${fieldNameTextField}");

		FormFields.viewDateFieldNotPresent(
			fieldLabel = "Date Field",
			fieldName = "${fieldNameDateField}");

		Navigator.openURL();

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName();

		FormsAdminNavigator.gotoRules();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Date Field",
			conditionField = "Text Field",
			conditionOperator = "Is Not Empty",
			ruleNumber = "1");
	}

}