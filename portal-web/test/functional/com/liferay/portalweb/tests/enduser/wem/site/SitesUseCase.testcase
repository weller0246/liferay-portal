@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			Site.tearDownCP();

			Organization.tearDownCP();

			Team.tearDownCP();

			Page.tearDownCP();

			UserGroup.tearDownCP();
		}
	}

	@priority = "5"
	test AddChildSiteFromImportedSiteTemplate {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "SitesUsecase#AddChildSiteFromImportedSiteTemplate";
		property testray.component.names = "Training";

		JSONOrganization.addOrganization(organizationName = "Space Program Academy of Continuing Education");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Suborganization.addCP(
			orgName = "Space Program Academy of Continuing Education",
			suborgName = "College of Agricultural Science");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		LAR.exportPortlet(larFileName = "organizations.lar");

		Suborganization.removeCP(
			orgName = "Space Program Academy of Continuing Education",
			subOrgName = "College of Agricultural Science");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.deleteCP(orgName = "Space Program Academy of Continuing Education");

		Organization.deleteCP(orgName = "College of Agricultural Science");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		LAR.importPortlet(
			larFileName = "organizations.lar",
			portletName = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.viewCP(
			orgName = "Space Program Academy of Continuing Education",
			orgType = "Organization");

		User.openUsersAdmin();

		Organization.addSiteCP(orgName = "College of Agricultural Science");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.addCP(siteTemplateName = "Digital Class Room");

		for (var pageName : list "Courses,Student Boards,Materials") {
			SiteTemplates.addSitePageViaSiteTemplateCP(
				pageName = "${pageName}",
				siteTemplateName = "Digital Class Room");
		}

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.exportPortlet(larFileName = "class-site-template.lar");

		SiteTemplates.deleteCP(siteTemplateName = "Digital Class Room");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.importPortlet(
			larFileName = "class-site-template.lar",
			portletName = "Site Templates",
			siteTemplateName = "Digital Class Room");

		Site.openSitesAdmin();

		Site.addBlankCP(
			membershipType = "Private",
			parentSiteName = "College of Agricultural Science",
			siteName = "Moon Rocks 101",
			siteType = "Blank");

		Navigator.gotoBack();

		Site.selectPageType(
			selectPrivatePages = "true",
			siteTemplate = "Digital Class Room");

		Site.openSitesAdmin();

		Site.addBlankCP(
			membershipType = "Private",
			parentSiteName = "College of Agricultural Science",
			siteName = "Moon Rocks 202",
			siteType = "Blank");

		Navigator.gotoBack();

		Site.selectPageType(
			checkPrivatePagesPropagation = "true",
			selectPrivatePages = "true",
			siteTemplate = "Digital Class Room");

		Navigator.openPrivateSiteURL(siteName = "Moon Rocks 101");

		for (var pageName : list "Courses,Student Boards,Materials") {
			Navigator.gotoPrivateSitePage(
				pageName = "${pageName}",
				siteName = "Moon Rocks 101");
		}

		Navigator.openPrivateSiteURL(siteName = "Moon Rocks 202");

		for (var pageName : list "Courses,Student Boards,Materials") {
			Navigator.gotoPrivateSitePage(
				pageName = "${pageName}",
				siteName = "Moon Rocks 202");
		}
	}

	@priority = "5"
	test AddOrganizationSitesAndDeactivate {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SitesUseCase#AddOrganizationSitesAndDeactivate";
		property testray.component.names = "Site Administration,Training,Users and Organizations";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Inactive Request Handler",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Show Inactive Request Message");

		SystemSettings.saveConfiguration();

		SiteTemplates.addCP(siteTemplateName = "Site Template Name 1");

		SiteTemplates.addCP(siteTemplateName = "Site Template Name 2");

		JSONOrganization.addOrganization(organizationName = "Organization Name 1");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			orgName = "Organization Name 1",
			siteTemplateName = "Site Template Name 1");

		Site.openSiteSettingsAdmin(siteURLKey = "organization-name-1");

		Site.manageMembershipOptions(
			allowManualMembershipManagement = "true",
			membershipType = "Open",
			selectMembershipType = "true");

		Site.openSitesAdmin();

		Site.viewCP(
			siteMember = "Organization",
			siteName = "Organization Name 1");

		JSONOrganization.addOrganization(organizationName = "Organization Name 2");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			orgName = "Organization Name 2",
			siteTemplateName = "Site Template Name 2");

		Site.openSiteSettingsAdmin(siteURLKey = "organization-name-2");

		Site.manageMembershipOptions(
			allowManualMembershipManagement = "true",
			membershipType = "Open",
			selectMembershipType = "true");

		Site.openSitesAdmin();

		Site.viewCP(
			siteMember = "Organization",
			siteName = "Organization Name 2");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		Site.assignUserSitesCP(
			siteName = "Organization Name 1",
			userScreenName = "usersn");

		User.openUsersAdmin();

		Site.assignUserSitesCP(
			siteName = "Organization Name 2",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		User.firstLoginPG(userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Organization Name 1");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Organization Name 1");

		Navigator.openSiteURL(siteName = "Organization Name 2");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Organization Name 2");

		Navigator.openSiteURL(siteName = "Organization Name 2");

		Site.openSitesAdmin();

		Site.deactivateCP(
			siteName = "Organization Name 2",
			successMessage = "true");

		var baseURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${baseURL}/web/organization-name-2");

		Page.viewInactiveRequestMessage(resource = "site");
	}

	@priority = "3"
	test MySitesDropDownDoesNotShowUserOrganizationOnTop {
		property testray.component.names = "Site Administration,Users and Organization";

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		for (var siteNameListsCount : list "Site1 Name,Site2 Name,Site3 Name,Site4 Name,Site5 Name,Site6 Name,Site7 Name,Site8 Name,Site9 Name,Site10 Name") {
			Site.openSitesAdmin();

			Site.addCP(
				siteName = "${siteNameListsCount}",
				siteTemplateName = "Site Template Name",
				siteType = "Site Template");
		}

		JSONOrganization.addOrganization(organizationName = "Site Organization Name");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			orgName = "Site Organization Name",
			siteTemplateName = "Site Template Name");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.assignUser(
			orgName = "Site Organization Name",
			userFirstName = "Test",
			userLastName = "Test",
			userName = "Test Test",
			userScreenName = "test");

		Navigator.openSiteURL(siteName = "Site Organization Name");
	}

	@priority = "3"
	test OnlySiteOwnersCanAssignSiteRolesToUserGroups {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration,User Groups";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		Site.openSiteMembershipsAdmin(siteURLKey = "guest");

		Site.assignUserGroupAsMemberCP(userGroupName = "UG UserGroup Name");

		JSONRole.addRegularRole(
			roleKey = "Roles Regrole Name",
			roleTitle = "Roles Regrole Name");

		for (var resourceActionIndex : list "ASSIGN_MEMBERS,ASSIGN_USER_ROLES,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Roles Regrole Name");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ASSIGN_MEMBERS",
			resourceName = "com.liferay.portal.kernel.model.Role",
			roleTitle = "Roles Regrole Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Roles Regrole Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Site.openSiteMembershipsAdmin(siteURLKey = "guest");

		Site.assignSiteRoleCP(
			resourceName = "userfn userln",
			roleTitle = "Roles Siterole Name");

		Site.openSiteMembershipsAdmin(siteURLKey = "guest");

		NavItem.gotoUserGroups();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");
	}

	@priority = "4"
	test PrivateVirtualHostUrlDoesNotRedirectUserToLoginPage {
		property custom.properties = "auth.login.prompt.enabled=true${line.separator}jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Site.openSiteSettingsAdmin(siteURLKey = "guest");

		Site.addVirtualHostsURLCP(
			privatePageVirtualHostURL = "www.able.com",
			privateVirtualHosts = "true");

		JSONLayout.addPrivateLayout(
			groupName = "Guest",
			layoutName = "Test Private Page");

		User.logoutPG();

		Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");

		Site.viewPrivateVirtualHostUrlUserLoginRedirect(userEmailAddress = "@liferay.com");

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		User.firstLoginUI(
			specificURL = "http://www.able.com:8080/test-private-page",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");

		AssertLocation(value1 = "http://www.able.com:8080/test-private-page");
	}

	@priority = "3"
	test ReturnWrongLayoutForSignedInUserWithVirtualHostsConfigured {
		property custom.properties = "layout.default.template.id=2_columns_iii${line.separator}layout.user.private.layouts.enabled=false${line.separator}layout.user.private.layouts.auto.create=false${line.separator}layout.user.private.layouts.power.user.required=true${line.separator}layout.user.public.layouts.enabled=false${line.separator}layout.user.public.layouts.auto.create=false${line.separator}layout.user.public.layouts.power.user.required=true";
		property test.name.skip.portal.instance = "SitesUsecase#ReturnWrongLayoutForSignedInUserWithVirtualHostsConfigured";
		property testray.component.names = "Site Administration";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Instance Configuration",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.editVirtualHostCP(virtualHostName = "www.able.com");

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.editConfigurationAuthenticationGeneral(enableRequireStrangers = "true");

		PortalSettings.editConfigurationUsersEmailNotificationsCP(
			configurationName = "Account Created Notification",
			notificationsBody = "[$USER_PASSWORD$]");

		PortalSettings.editConfigurationUsersEmailNotificationsCP(
			configurationName = "Email Verification Notification",
			notificationsBody = "[$EMAIL_VERIFICATION_CODE$]");

		JSONGroup.addGroup(groupName = "Site Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site-name");

		Site.addVirtualHostsURLCP(
			publicPageVirtualHostURL = "www.baker.com",
			publicVirtualHosts = "true");

		SitePages.openPagesAdmin(siteURLKey = "Site Name");

		SitePages.addPublicPage(pageName = "Site Page Name");

		ServerAdministration.openServerAdmin();

		ServerAdministration.configureMailServerSettings(
			userName = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"));

		Navigator.openSpecificURL(url = "http://www.able.com:8080/");

		Navigator.openSpecificURL(url = "http://www.baker.com:8080/");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
			value1 = "password");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
			value1 = "password");

		PortletEntry.save();

		User.logoutPG();

		Pause(locator1 = "30000");

		Gmail.login(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"));

		Gmail.gotoHtmlMode();

		Gmail.gotoMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "Address Verification",
			gmailMessageTitle = "Email Address Verification");

		var emailVerification = selenium.getText("Gmail#EMAIL_VERIFICATION_CODE");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(gmailMessageTitleList = "Email Address Verification,Your New Account,Your New Password");

		Navigator.openSpecificURL(url = "http://www.baker.com:8080/");

		User.signInPG(
			emailPassword = "password",
			emailVerification = "${emailVerification}",
			userEmailAddress = PropsUtil.get("email.address.3"));

		User.firstLoginUI(specificURL = "http://www.able.com:8080/");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Verification Notification",
			configurationScope = "Virtual Instance Scope");

		Type.typeCKEditor(
			locator1 = "CKEditor#BODY_FIELD",
			value1 = "[$EMAIL_VERIFICATION_URL$]");

		PortletEntry.save();

		Navigator.openSpecificURL(url = "http://www.baker.com:8080/");

		Navigator.gotoAccountSettings();

		User.editUserInformation(userEmailAddressEdit = PropsUtil.get("email.address.4"));

		Gmail.logoutAndLogin(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userPassword = PropsUtil.get("email.password.4"));

		Gmail.gotoHtmlMode();

		Gmail.gotoMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "Address Verification",
			gmailMessageTitle = "Email Address Verification");

		var emailAddressVerificationURL = selenium.getText("Gmail#EMAIL_ADDRESS_VERIFICATION_URL");

		Click(locator1 = "Gmail#EMAIL_ADDRESS_VERIFICATION_URL");

		SelectWindow(locator1 = "title=Verify Email Address - Site Name - ${siteName}");

		AssertLocation(value1 = "${emailAddressVerificationURL}");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(gmailMessageTitleList = "Email Address Verification,Your New Account,Your New Password");
	}

	@priority = "3"
	test SiteFriendlyURLLayoutImporter {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration";

		var portalURL = PropsUtil.get("portal.url");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(userGroupName = "User Group Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.gotoAddPageCP(userGroupName = "User Group Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "site Page Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		UserGroup.openUserGroupsAdmin();

		UserGroup.assignMemberCP(
			userGroupName = "User Group Name",
			userScreenName = "usersn");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

		AssertLocation(value1 = "${portalURL}/user/usersn");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Site Page Name");

		Site.openSiteSettingsAdmin(siteURLKey = "guest");

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/liferay");

		Navigator.openSpecificURL(url = "${portalURL}/web/liferay/site-page-name");

		AssertLocation(value1 = "${portalURL}/web/liferay/site-page-name");

		Site.openSiteSettingsAdmin(siteURLKey = "liferay");

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/guest");
	}

	@priority = "3"
	test SitesDeactivated {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "SitesUsecase#SitesDeactivated";
		property testray.component.names = "Site Administration";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Inactive Request Handler",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Show Inactive Request Message");

		SystemSettings.saveConfiguration();

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		JSONGroup.addGroup(groupName = "Site1 Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site1-name");

		Site.selectPageType(
			selectPublicPages = "true",
			siteTemplate = "Site Template Name");

		JSONGroup.addGroup(groupName = "Site2 Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site2-name");

		Site.editCP(
			siteName = "Site2 Name",
			siteNameEdit = "Site2 Name Edit");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = "Site1 Name",
			userScreenName = "usersn");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Site1 Name");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Site1 Name",
			siteTemplate = "Community");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Site.openSiteSettingsAdmin(siteURLKey = "site1-name");

		Site.inactivateCP(siteName = "Site1 Name");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		var baseURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${baseURL}/web/site1-name");

		Page.viewInactiveRequestMessage(resource = "site");
	}

	@priority = "4"
	test SitesDemoSiteManagement {
		property custom.properties = "auth.login.prompt.enabled=true${line.separator}jsonws.web.service.paths.excludes=";
		property portal.release = "true";
		property test.name.skip.portal.instance = "SitesUsecase#SitesDemoSiteManagement";
		property testray.component.names = "Site Administration,Site Pages Administration";

		var portalURL = PropsUtil.get("portal.url");

		Site.openSitesAdmin();

		Site.addBlankCP(
			membershipTypeOption = "Open",
			siteDescription = "This is the site description test",
			siteDetails = "true",
			siteName = "World Cup - Russia 2018");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Site Settings");

		for (var tagName : list "World Cup,Russia,2018") {
			Tag.addViaSiteCP(tagName = "${tagName}");
		}

		Site.addVirtualHostsURLCP(
			privatePageVirtualHostURL = "www.baker.com",
			privateVirtualHosts = "true",
			publicPageVirtualHostURL = "www.able.com",
			publicVirtualHosts = "true");

		Navigator.gotoBack();

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/russia2018");

		for (var publicPageName : list "Home,Arenas") {
			JSONLayout.addPublicLayout(
				groupName = "World Cup - Russia 2018",
				layoutName = "${publicPageName}");
		}

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			JSONLayout.addPublicLayout(
				groupName = "World Cup - Russia 2018",
				layoutName = "${childPageName}",
				parentLayoutName = "Arenas");
		}

		for (var privatePageName : list "Accomodations,Maps") {
			JSONLayout.addPrivateLayout(
				groupName = "World Cup - Russia 2018",
				layoutName = "${privatePageName}");
		}

		SitePages.openPagesAdmin(siteURLKey = "russia2018");

		Site.changeSiteLogo(
			logoFile = "Document_3.png",
			pageName = "Public Pages");

		SitePages.openPagesAdmin(siteURLKey = "russia2018");

		Page.addJavaScript(
			javaScript = "alert(&apos;Welcome to Russia.&apos;);",
			pageName = "Arenas");

		Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

		AssertConfirm(value1 = "Welcome to Russia.");

		User.logoutPG();

		Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

		AssertConfirm(value1 = "Welcome to Russia.");

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Open.openNoError(locator1 = "${portalURL}/web/russia2018");

		Page.viewCustomLogoPG();

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			Page.viewChildPageDropdown(
				childPageName = "${childPageName}",
				javaScriptPage = "Welcome to Russia.",
				pageName = "Arenas",
				viewChildPageDropdown = "PAGE_2");
		}

		Open.openNoError(locator1 = "${portalURL}/web/russia2018");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		Page.addJavaScript(
			javaScript = " ",
			pageName = "Arenas");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		Site.assignUserSitesCP(
			siteName = "World Cup - Russia 2018",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.assignSiteRoleCP(
			siteRoleName = "Site Administrator",
			userScreenName = "usersn");

		User.logoutPG();

		User.viewLoggedOutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.baker.com:8080/group/russia2018",
			userEmailAddress = "userea@liferay.com");

		Page.viewSpecificPG(pageNameList = "Accomodations,Maps");

		User.firstLoginUI(
			password = "test",
			specificURL = "${portalURL}/web/russia2018",
			userEmailAddress = "userea@liferay.com");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Export");

		LexiconEntry.gotoAdd();

		LAR.exportWithAssertionOnSuccess();

		var larFileName = LAR.getLarFileName();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Click(locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_DOWNLOAD");

		DownloadTempFile();

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			Navigator.gotoSitePage(
				pageName = "Home",
				siteName = "Site Name");

			Page.viewChildPageDropdown(
				childPageName = "${childPageName}",
				pageName = "Arenas",
				viewChildPageDropdown = "PAGE_2");
		}
	}

	@priority = "4"
	test SiteTeamsPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Permissions,Site Administration";

		JSONGroup.addGroup(groupName = "Site Name");

		SitePages.openPagesAdmin(siteURLKey = "Site Name");

		SitePages.addPublicPage(
			pageName = "Blog Page Template",
			pageTemplateName = "Blog");

		JSONUser.addUser(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea1@liferay.com");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = "Site Name",
			userScreenName = "usersn1");

		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "Site Name",
			userScreenName = "usersn2");

		SitePages.openPagesAdmin(siteURLKey = "Site Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.addCP(
			teamDescription = "Site Team Description",
			teamName = "Site Team Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.assignMembersCP(
			teamName = "Site Team Name",
			userScreenName = "usersn1");

		PermissionsInline.gotoPagePG(
			pageName = "Blog Page Template",
			site = "Site Name");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		Navigator.gotoSitePage(
			pageName = "Blog Page Template",
			siteName = "Site Name");

		PermissionsInline.gotoPagePG(
			pageName = "Blog Page Template",
			site = "Site Name");

		for (var permissionsInLineUncheckListsCount : list "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX") {
			Role.removePermissionPG(
				permissionDefinitionKey = "${permissionsInLineUncheckListsCount}",
				roleTitle = "Site Member");
		}

		Navigator.gotoSitePage(
			pageName = "Blog Page Template",
			siteName = "Site Name");

		PermissionsInline.gotoPagePG(
			pageName = "Blog Page Template",
			site = "Site Name");

		for (var permissionsInLineCheckListsCount : list "ACTION_ADD_DISCUSSION,ACTION_ADD_LAYOUT,ACTION_CONFIGURE_PORTLETS,ACTION_CUSTOMIZE,ACTION_DELETE,ACTION_DELETE_DISCUSSION,ACTION_PERMISSIONS,ACTION_UPDATE,ACTION_UPDATE_DISCUSSION,ACTION_VIEW") {
			Team.definePermissionPG(
				permissionDefinitionKey = "${permissionsInLineCheckListsCount}",
				teamName = "Site Team Name");
		}

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea1@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Blog Page Template",
			siteName = "Site Name");

		PageTemplatesAdminGlobalSite.viewDefaultPortletPG(
			pageTemplateName = "Blog",
			portletTitleList = "Blogs,Tag Cloud,Recent Bloggers");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Navigator.openSiteURL(siteName = "Site Name");

		AssertElementNotPresent(locator1 = "Home#PAGE");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test SiteTeamsXSS {
		property testray.component.names = "Site Administration,XSS";

		JSONGroup.addGroup(groupName = "Site Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.addCP(
			teamDescription = '''<script>alert(123);</script>''',
			teamName = '''<script>alert(123);</script>''');

		Site.openSiteSettingsAdmin(siteURLKey = "site-name");

		Site.assignDefaultSiteTeam(teamName = '''<script>alert(123);</script>''');

		AssertAlertNotPresent();

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@description = "This is a test for LPS-102711. The changes of site scope configuration in Instance Settings should be applied to the site."
	@priority = "4"
	test ViewChangesOfSiteScopeConfigurationDefinedInInstanceSettings {
		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Navigate to Site Settings admin in new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "Test Site Name");
		}

		task ("Navigate to Message Boards configuration") {
			Click(
				key_itemName = "Message Boards",
				locator1 = "ListGroupItem#ITEM_TEXT");
		}

		task ("View the checkbox of Message Boards is unchecked") {
			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Navigate to Message Boards configuration in Instance Settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Message Boards",
				configurationName = "Message Boards Moderation Workflow",
				configurationScope = "Site Scope");
		}

		task ("Check the Enable Message Boards Moderation") {
			Check.checkNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");

			SystemSettings.saveConfiguration();
		}

		task ("Navigate to Site Settings admin in new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "Test Site Name");
		}

		task ("Navigate to Message Boards configuration") {
			Click(
				key_itemName = "Message Boards",
				locator1 = "ListGroupItem#ITEM_TEXT");
		}

		task ("View the checkbox of Message Boards is checked") {
			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = "This ensures that the custom site logo can be viewed in cards and list views."
	@priority = "4"
	test ViewSiteLogo {
		property portal.upstream = "true";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Page");

		JSONGroup.addChildSite(
			groupName = "Child SiteName",
			parentGroupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Child SiteName",
			layoutName = "Site Page",
			parentGroupName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Site.changeSiteLogo(
			logoFile = "Document_2.png",
			pageName = "Public Pages");

		Navigator.openSiteURL(siteName = "Child SiteName");

		Site.changeSiteLogo(
			logoFile = "Document_3.png",
			pageName = "Public Pages");

		Site.viewCustomSiteLogoInDifferentViews(site = "Site Name");

		IFrame.closeFrame();

		Site.viewCustomSiteLogoInDifferentViews(site = "Child SiteName");
	}

}