@component-name = "portal-frontend-infrastructure"
definition {

	property osgi.modules.includes = "frontend-taglib-clay-sample-web";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Clay";
	property testray.main.component.name = "User Interface";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Clay Sample Test Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Clay Sample Test Page",
			layoutTemplate = "1 Column");

		Navigator.gotoPage(pageName = "Clay Sample Test Page");

		Portlet.addPG(portletName = "Clay Sample");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();
		}
	}

	@description = "Verify clay multiple select API options can be configured"
	@priority = "5"
	@refactorneeded
	test MultipleCanBeConfigured {
		Navigator.gotoNavTab(navTab = "Form Elements");

		AssertEditable(
			key_label = "Multiple Select Element",
			locator1 = "ClaySamplePortlet#SELECTOR");

		Click(
			key_label = "Multiple Select Element",
			key_option = "Sample 1",
			locator1 = "ClaySamplePortlet#SELECTOR_OPTION");

		RobotType.robotTypeShortcut(locator1 = "Ctrl");

		Click(
			key_label = "Multiple Select Element",
			key_option = "Sample 2",
			locator1 = "ClaySamplePortlet#SELECTOR_OPTION");

		takeScreenshot();

		SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#SELECTOR_MULTIPLE_PNG");

		AssertNotEditable(
			key_label = "Disabled Multiple Select Element",
			locator1 = "ClaySamplePortlet#SELECTOR");
	}

	@description = "Verify clay regular select API options can be configured"
	@priority = "5"
	@refactorneeded
	test RegularCanBeConfigured {
		Navigator.gotoNavTab(navTab = "Form Elements");

		ScrollWebElementIntoView(
			key_label = "Multiple Select Element",
			locator1 = "ClaySamplePortlet#SELECTOR");

		AssertEditable(
			key_label = "Regular Select Element",
			locator1 = "ClaySamplePortlet#SELECTOR");

		Select(
			key_label = "Regular Select Element",
			locator1 = "ClaySamplePortlet#SELECTOR",
			value1 = "Sample 1");

		takeScreenshot();

		// Temporarily remove sikuli assertion until fix in LRQA-65984

		//SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#SELECTOR_REGULAR_PNG");

		AssertNotEditable(
			key_label = "Disabled Regular Select Element",
			locator1 = "ClaySamplePortlet#SELECTOR");
	}

}