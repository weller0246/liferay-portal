@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a fragment collection") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Navigate to the fragment collection") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-101258. Add a fragment into fragment with dropzone."
	@priority = "5"
	test AddButtonFragmentToFragmentWithDropZone {
		property portal.acceptance = "true";

		task ("Add a fragment with drop zone") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			FragmentsEditor.typeHtmlEditor(content = '''<lfr-drop-zone id="drop-zone"></lfr-drop-zone>''');

			FragmentsEditor.waitForAutoSave();

			PortletEntry.publish();
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");

			AssertVisible(
				key_content = "Place fragments here.",
				key_fragmentClass = "content",
				key_position = "1",
				locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");
		}

		task ("Add a Button fragment to the new fragment") {
			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				key_index = "2",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#FRAGMENT_WITH_DROP_TARGET",
				value1 = "");

			AssertElementPresent(
				key_fragmentName = "Button",
				key_inFragmentName = "Fragment Name",
				locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");
		}
	}

	@description = "This is a test for LPS-101258. Can create a fragment with multiple Drop Zone areas."
	@priority = "4"
	test AddFragmentWithTwoDropZones {
		task ("Add a fragment with drop zone") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			FragmentsEditor.typeHtmlEditor(content = '''<lfr-drop-zone id="drop-zone1"></lfr-drop-zone>
		<lfr-drop-zone id="drop-zone2"></lfr-drop-zone>''');

			FragmentsEditor.waitForAutoSave();

			PortletEntry.publish();
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");
		}

		task ("View the new fragment is shown on page") {
			AssertVisible(
				key_content = "Place fragments here.",
				key_fragmentClass = "content",
				key_position = "1",
				locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");

			AssertVisible(
				key_content = "Place fragments here.",
				key_fragmentClass = "content",
				key_position = "2",
				locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");
		}
	}

}