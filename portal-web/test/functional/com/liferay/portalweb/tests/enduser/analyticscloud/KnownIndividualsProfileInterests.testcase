@component-name = "portal-analytics-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9132 | Test Summary: Individuals interest details has a tab that shows active pages"
	@priority = "3"
	test AssertIndividualsinterestActivePages {
		property portal.upstream = "quarantine";

		// AC Refactor: data doesn't appear on time
		// AC Refactor ticket: LRAC-9152

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to the Individual > KnownIndividual > Interests") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "Test Test");

			ACNavigation.switchTab(tabName = "Interests");
		}

		task ("Assert Active pages shown for individuals and assert details") {
			ACInterests.clickInterest(interestTopic = "ac page 1");

			var portalURL = PropsUtil.get("portal.url");
			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			ACInterests.viewInterestPage(
				pageName = "AC Page 1 - Site Name - ${siteName}",
				pageUrl = "${portalURL}/web/site-name/ac-page");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9131 | Test Summary: Individuals interest details has a tab that shows inactive pages"
	@priority = "3"
	test AssertIndividualsInterestInactivePages {
		property portal.upstream = "quarantine";

		// AC Refactor: data doesn't appear on time
		// AC Refactor ticket: LRAC-9151

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to the Individual > KnownIndividual > Interests") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "Test Test");

			ACNavigation.switchTab(tabName = "Interests");
		}

		task ("Assert Inactive pages shown for individuals") {
			ACInterests.clickInterest(interestTopic = "ac page 1");

			ACIndividualsDashboard.goToTabName(tabName = "Inactive Pages");

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no Pages found.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8950 | Test Summary: Interests that are associated with the individual appear in the list"
	@priority = "5"
	test InterestsAssociatedWithIndividualAppearInList {
		property portal.upstream = "quarantine";

		// AC Refactor: data doesn't appear on time
		// AC Refactor ticket: LRAC-9151

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Add specific pages to Site as interest topics") {
			Navigator.openSiteURL(siteName = "Site Name");

			for (var layoutName : list "Movies,Music,Science,Sports,Technology") {
				JSONLayout.addPublicLayout(
					groupName = "Site Name",
					layoutName = "${layoutName}");
			}
		}

		task ("Add new users and sync the Contact Data") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			ACDXPSettings.syncNewContactData();
		}

		task ("View new pages in site as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			for (var pageName : list "Movies,Music,Science,Sports,Technology") {
				Navigator.gotoSitePage(
					pageName = "${pageName}",
					siteName = "Site Name");
			}
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to the Individual > KnownIndividual > Interests") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "ac ac");

			ACNavigation.switchTab(tabName = "Interests");
		}

		task ("Assert interests that are associated with the individual appear in the list") {
			for (var interestTopic : list "movies,music,science,sports,technology") {
				ACInterests.viewInterest(
					interestTopic = "${interestTopic}",
					knownIndividuals = "true");
			}
		}
	}

}