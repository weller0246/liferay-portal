@component-name = "portal-ab-test"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "A/B Test";

	setUp {
		task ("Open Analytics Cloud") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			Navigator.openURL(baseURL = "${analyticsCloudURL}");
		}

		task ("Take token from Analytics Cloud") {
			AnalyticsCloud.loginAnalyticsCloud(
				emailAddress = "test@liferay.com",
				password = "test");

			AnalyticsCloud.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP portal, login and create site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Navigator.openURL();

			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Connect and synchronyze with Analytics Cloud") {
			AnalyticsCloud.syncAnalyticsCloud(siteName = "Test Site Name");
		}

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Navigator.openURL();

		AnalyticsCloud.teardownAnalyticsCloud();

		JSONGroup.deleteGroupByName(groupName = "Test Site Name");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Validate if the user can create an A/B Test by Bounce rate"
	@priority = "5"
	@uitest
	test CreateABTestByBounceRate {
		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkAnalyticsCloudInfo(ABtestTitle = "AB test title");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-119475 Validate if the user can create an A/B Test by Click"
	@priority = "5"
	@uitest
	test CreateABTestByClick {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.clickPencil();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");

			ABTest.selectElementID();

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkAnalyticsCloudInfo(ABtestTitle = "AB test title");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-119475 Validate if, in the AB Test by Click, the sidebar informs the user that the element id is mandatory"
	@priority = "3"
	@uitest
	test CreateABTestByClickInvalidId {
		task ("Create AB test, write an invalid ID for the element and run the test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");

			ABTest.writeId(elementId = "invalidID");

			ABTest.runTest();
		}

		task ("Assert an error message is displayed") {
			AssertElementPresent(locator1 = "ABTest#INVALID_ID_MESSAGE");
		}
	}

	@description = "LPS-86285 Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control if the user add variants and remove all variants"
	@priority = "4"
	@uitest
	test CreateABTestRunWithDeletedVariants {
		task ("Create AB test, create variant, delete variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.deleteVariant();

			ABTest.runTest();
		}

		task ("Assert an error message is displayed") {
			AssertTextEquals(
				locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
				value1 = "A variant needs to be created.");
		}
	}

	@description = "LPS-86285 Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control"
	@priority = "5"
	@uitest
	test CreateABTestRunWithNoVariants {
		task ("Create AB test and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.runTest();
		}

		task ("Assert an error message is displayed") {
			AssertTextEquals(
				locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
				value1 = "A variant needs to be created.");
		}
	}

}