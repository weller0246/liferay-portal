@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use test for LPS-101248. Delete a web content template used in Content Display fragment."
	@priority = "2"
	test DeleteSelectedTemplate {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a web content template for Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			var templateScript = '''<a>${content.getData()}</a>''';

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				customWebcontenttemplate = "WC Template Name",
				fragmentName = "Content Display",
				webcontent = "true",
				webContentTitle = "Web Content Title");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}

		task ("View delete the web content template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.deleteCP(templateName = "WC Template Name");
		}
	}

	@description = "This is a test for LPS-101248. Can select any custom web content template as a "Template" for web content selected in content fragment."
	@priority = "5"
	test SelectCustomWebContentTemplate {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "This content maps from web content",
			groupName = "Test Site Name",
			title = "Webcontent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			generalVariables = "Site ID",
			structureName = "Basic Web Content",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name");

		var siteID = Site.getSiteId();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			customWebcontenttemplate = "WC Template Name",
			fragmentName = "Content Display",
			webcontent = "true",
			webContentContent = "${siteID}",
			webContentTitle = "Webcontent Title");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "${siteID}");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "This content maps from web content");
	}

	@description = "This is a test for LPS-101248. Can select web content template from Global site as a "Template" for Content Display fragment."
	@priority = "2"
	test SelectWebContentTemplateFromGlobalSite {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a new template for Basic Web Content in Global site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			NavItem.gotoTemplates();

			var templateScript = '''<a>${content.getData()}</a>''';

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				customWebcontenttemplate = "WC Template Name",
				fragmentName = "Content Display",
				webcontent = "true",
				webContentTitle = "Web Content Title");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			PageEditor.clickPublish();
		}

		task ("View the web content is shown in Content Display") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a test for LPS-101248. Can select web content template from script file as a "Template" for Content Display fragment."
	@priority = "2"
	test SelectWebContentTemplateFromScriptFile {
		task ("Add a web content structure with Text and Numeric fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			for (var fieldName : list "Text,Numeric") {
				DataEngine.addField(
					fieldFieldLabel = "${fieldName}",
					fieldName = "${fieldName}");
			}

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFile = "wc_template_2.ftl",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentNumeric = "9",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				customWebcontenttemplate = "WC Template Name",
				fragmentName = "Content Display",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("Assert the web content is shown in Content Display") {
			AssertVisible(
				key_content = "//p[contains(@class,'text')][contains(.,'This is a Text field')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			AssertVisible(
				key_content = "//p[contains(@class,'numeric')][contains(.,'9')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a test for LPS-101248. The available web content template options are grouped and listed in alphabetical order in Content Display. Additionally, the web content templates for other structrue and deleted ones shouldn't be available."
	@priority = "3"
	test ViewAvailableWebContentTemplates {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a new web content structrue") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structrue") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Text",
				templateName = "WC Template For Text");
		}

		task ("Add three templates for Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				generalVariables = "Site ID",
				structureName = "Basic Web Content",
				templateFieldNames = "Content",
				templateName = "First Template For Basic Web Content");

			WebContentTemplates.addCP(
				generalVariables = "Portal Instance ID",
				structureName = "Basic Web Content",
				templateFieldNames = "Content",
				templateName = "Second Template For Basic Web Content");

			WebContentTemplates.addCP(
				generalVariables = "Device",
				structureName = "Basic Web Content",
				templateFieldNames = "Content",
				templateName = "Third Template For Basic Web Content");
		}

		task ("Delete the Third Template For Basic Web Content") {
			WebContentTemplates.deleteCP(templateName = "Third Template For Basic Web Content");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				webcontent = "true",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View the order of templates options in Content Display") {
			var n = "1";

			for (var templateName : list "Basic Web Content,First Template For Basic Web Content,Second Template For Basic Web Content") {
				AssertTextEquals(
					key_fieldLabel = "Template",
					key_groupLabel = "Basic Web Content",
					key_index = "${n}",
					locator1 = "Select#GROUPED_SELECT_VALUE_ANY",
					value1 = "${templateName}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the WC Template For Text and Third Template For Basic Web Content are not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Template",
				key_groupLabel = "Text",
				key_value = "WC Template For Text",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementNotPresent(
				key_fieldLabel = "Template",
				key_groupLabel = "Basic Web Content",
				key_value = "Third Template For Basic Web Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with all fields in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithAllFields {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "1",
				templateName = "WC Template Name",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Test Page Name",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.jpg",
				webContentWebContent = "WC Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				customWebcontenttemplate = "WC Template Name",
				fragmentName = "Content Display",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the web content is shown in Content Display") {
			for (var content : list "This is a Text field,Value2,Value3,10 Oct 2020,9,FF0D0D") {
				AssertTextEquals.assertPartialText(
					locator1 = "WCD#WEB_CONTENT_CONTENT",
					value1 = "${content}");
			}

			var multipleSelectionFieldValue = '''["First"]''';

			AssertTextEquals.assertPartialText(
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "${multipleSelectionFieldValue}");

			var gridFieldValue = '''{"R1":"C1"}''';

			AssertTextEquals.assertPartialText(
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "${gridFieldValue}");

			AssertVisible(
				key_content = "//img[contains(@src,'Document_3.png')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			AssertVisible(
				key_content = "//p[contains(.,'This is a Rich Text field')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			AssertVisible(
				key_content = "//a[contains(@href,'Document_1.jpg')][contains(.,'Download Upload')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			AssertVisible(
				key_content = "//a[contains(.,'WC Title')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			AssertVisible(
				key_content = "//div[contains(@id,'Geolocation')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			AssertVisible(
				key_content = "//a[contains(.,'Link to Page')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

}