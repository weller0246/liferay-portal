@component-name = "portal-analytics-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8588 | Test Summary: Assert segment overview shows criteria"
	@priority = "3"
	test AssertSegmentOverviewShowsCriteria {
		task ("Create Blog and Add to Page") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Conect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Navigate to Page and Blog") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		task ("Close all sessions and wait") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and Switch Property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Segments and Create Dynamic Segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Add Segment Field and Edit Web Behavior Criteria") {
			ACSegments.addSegmentField(segmentField = "Viewed Blog");

			ACSegments.editWebBehaviorCriterion(
				indexField = "1",
				occurenceNumber = "4",
				searchTerm = "Blogs AC Title");

			ACSegments.saveSegment();
		}

		task ("Go to Segments and access the Dynamic Segment Test") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Assert the result of Segment Criteria Web Behavior") {
			ACSegments.viewSegmentCriteriaWebBehavior(
				activitiesOption = "has",
				atLeastMost = "at least",
				occurenceNumber = "4",
				searchTerm = "'Blogs AC Title'",
				timeOption = "since",
				timePeriod = "Last 24 hours");
		}
	}

	@description = "Edit a dynamic segment and check the edits are saved"
	@priority = "5"
	test CanEditDynamicSegmentCheckEditSaved {
		ACUtils.createBlogsAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Blog");

		ACSegments.editWebBehaviorCriterion(
			indexField = "1",
			occurenceNumber = "4",
			searchTerm = "Blogs AC Title");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACSegments.viewSegmentCriteriaWebBehavior(
			activitiesOption = "has",
			atLeastMost = "at least",
			occurenceNumber = "4",
			searchTerm = "'Blogs AC Title'",
			timeOption = "since",
			timePeriod = "Last 24 hours");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");

		ACNavigation.goToSegments();

		ACSegments.editSegment(searchTerm = "Dynamic Segment Test");

		ACSegments.editWebBehaviorCriterion(
			activitiesOption = "has not",
			atLeastMost = "at most",
			indexField = "1",
			occurenceNumber = "5",
			timeOption = "ever");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACSegments.viewSegmentCriteriaWebBehavior(
			activitiesOption = "has not",
			atLeastMost = "at most",
			occurenceNumber = "5",
			searchTerm = "'Blogs AC Title'",
			timeOption = "ever");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8135 | Test Summary: Edit a static segment and check the edits are saved"
	@priority = "5"
	test CanEditStaticSegmentCheckEditSaved {
		ACUtils.createBlogsAndAddToPage();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

			Pause(locator1 = "5000");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Static Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");

		ACNavigation.goToSegments();

		ACSegments.editSegment(searchTerm = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "liferay liferay");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Static Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		for (var name : list "ac,liferay") {
			AssertElementPresent(
				key_userName = "${name} ${name}",
				locator1 = "ACSegments#SEGMENT_MEMBERS");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8136 | Test Summary: Rename Individuals Segment"
	@priority = "5"
	test CanRenameIndividualsSegment {
		ACUtils.createBlogsAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Blog");

		ACSegments.editWebBehaviorCriterion(
			indexField = "1",
			searchTerm = "Blogs AC Title");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Dynamic Segment Test");

		ACSegments.editSegment(searchTerm = "Dynamic Segment Test");

		ACSegments.nameSegment(segmentName = "Rename Dynamic Segment Test");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Rename Dynamic Segment Test");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8585 | Test Summary: It is not possible to add a duplicate user to a static segment"
	@priority = "4"
	test CantDuplicateUserToStaticSegment {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			Pause(locator1 = "5000");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

		AssertElementPresent(
			key_memberName = "ac ac",
			locator1 = "ACSegments#DISABLED_MEMBER");

		ACNavigation.clickCancelButton();

		ACSegments.addStaticMember(tableMember = "liferay liferay");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8589 | Test Summary: Editor shows static segment label"
	@priority = "3"
	test EditorShowsStaticSegmentLabel {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.editSegment(searchTerm = "Static Segment Test");

		ACSegments.viewEditorLabel(labelName = "Static Segment");

		ACUtils.assertPageTitle(pageTitle = "Edit Individuals Segment");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8587 | Test Summary: Paginate list of members to be added to the segment"
	@priority = "3"
	test PaginateListOfMembersToBeAddedToTheSegment {
		var users = "ac1,ac2,ac3,ac4,ac5,ac6,ac7";

		task ("Add new users") {
			for (var name : list "${users}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}

			ACDXPSettings.syncNewContactData();
		}

		task ("Login with new users and go to site page") {
			for (var name : list "${users}") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${name}@liferay.com",
					userLoginFullName = "${name} ${name}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Close all sections and wait") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC and switch property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to segments") {
			ACNavigation.goToSegments();
		}

		task ("Create segments and add 1 member") {
			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "Static Segment Test");

			ACSegments.addStaticMember(tableMember = "ac1 ac1");

			ACSegments.saveSegment();
		}

		task ("Edit Segment and go to Add Member") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(searchTerm = "Static Segment Test");

			Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");
		}

		task ("Select the 5 Items in Pagination") {
			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("View only 5 users are shown in page 1") {
			for (var username : list "ac2 ac2,ac3 ac3,ac4 ac4,ac5 ac5,ac6 ac6") {
				ACAssets.viewAssets(assetName = "${username}");
			}

			AssertElementNotPresent(
				key_assetName = "ac7 ac7",
				locator1 = "ACAssets#ASSETS_TABLE");
		}

		task ("Navigate to the page 2") {
			ACUtils.checkAnyPage(pageNumber = "2");
		}

		task ("View the ac7 ac7 is shown in page 2") {
			ACAssets.viewAssets(assetName = "ac7 ac7");

			ACNavigation.clickCancelButton();
		}

		task ("Add multiple members") {
			ACSegments.addStaticMultiMember(tableMember = "ac2 ac2,ac3 ac3,ac4 ac4,ac5 ac5,ac6 ac6,ac7 ac7");
		}

		task ("Navigate to view added view added members tab") {
			ACUtils.clickAnyButton(button = "View Added Members");
		}

		task ("Select the 5 Items in Pagination") {
			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("View only 5 users are shown in page 1") {
			for (var username : list "ac2 ac2,ac3 ac3,ac4 ac4,ac5 ac5,ac6 ac6") {
				ACAssets.viewAssets(assetName = "${username}");
			}

			AssertElementNotPresent(
				key_assetName = "ac7 ac7",
				locator1 = "ACAssets#ASSETS_TABLE");
		}

		task ("Navigate to the page 2") {
			ACUtils.checkAnyPage(pageNumber = "2");
		}

		task ("View the ac7 ac7 is shown in page 2") {
			ACAssets.viewAssets(assetName = "ac7 ac7");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8598 | Test Summary: Segment List kebab menu contains Edit and Delete buttons"
	@priority = "3"
	test SegmentListKebabMenuContainsEditAndDeleteButtons {
		task ("Create user and sincronize it") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Login new user and view page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close session, go to AC and segments") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSegments();
		}

		task ("Create segment test and save") {
			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "Static Segment Test");

			ACSegments.addStaticMember(tableMember = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Go to segments, click on kebab and assert Delete and Edit buttons") {
			ACNavigation.goToSegments();

			ACUtils.clickKebab();

			var itensList = "Edit,Delete";

			for (var menuItem : list "${itensList}") {
				ACUtils.assertDropdownItem(menuItem = "${menuItem}");
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8586 | Test Summary: Sort the Segment 'Add Members' Modal"
	@priority = "3"
	test SortSegmentAddMembersModal {
		task ("Go to AC and segments") {
			ACUtils.launchAC();

			ACNavigation.goToSegments();
		}

		task ("Create a new static segment and click to add members") {
			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "New Segment Test");

			Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");
		}

		task ("Assert the first user in the list, click the sort button and assert that the user has changed") {
			AssertElementPresent(
				index = "1",
				key_userName = "Abram Bauch",
				locator1 = "ACSegments#ADD_MEMBERS_INDEX_TABLE");

			Click(locator1 = "ACSegments#ADD_MEMBERS_SORT_BUTTON");

			AssertElementPresent(
				index = "1",
				key_userName = "Winston Olson",
				locator1 = "ACSegments#ADD_MEMBERS_INDEX_TABLE");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8590 | Test Summary: Undo Adding a Segment Member in the Edit Modal"
	@priority = "4"
	test UndoAddingSegmentMemberInTheEditModal {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			for (var name : list "ac,liferay") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user to visit the site pages") {
			for (var name : list "ac,liferay") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${name}@liferay.com",
					userLoginFullName = "${name} ${name}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Segments and add a new segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "New Segment Test");

			ACSegments.addStaticMember(tableMember = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Go to Segments and edit") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(searchTerm = "New Segment Test");

			ACSegments.viewEditorLabel(labelName = "Static Segment");
		}

		task ("Add new Segment member and undo adding") {
			ACSegments.addStaticMember(tableMember = "liferay liferay");

			ACUtils.clickAnyButton(button = "View Added Members");

			ACUtils.clickAnyButton(button = "Undo");

			ACSegments.saveSegment();
		}

		task ("Assert undo adding Segment member") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(searchTerm = "New Segment Test");

			AssertElementNotPresent(
				categoryName = "liferay liferay",
				locator1 = "ContentDashboard#CATEGORY_NAME_ELEMENT");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8591 | Test Summary: Undo all members from being added"
	@priority = "3"
	test UndoAllMembersFromBeingAdded {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Create Blog and Add to Page") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Login new user and view page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("Navigate To Page And Blog") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		task ("Close all sessions, launch AC, change the property and go to segments") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSegments();
		}

		task ("Create a static segment add set name") {
			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add All Members and View Added Members") {
			ACSegments.addAllMembers();

			ACUtils.clickAnyButton(button = "View Added Members");
		}

		task ("Select All Checkboxes, Undo Changes and Verify There Are No Results") {
			KeyPress(
				locator1 = "ACSettings#SELECT_ALL_CHECKBOX",
				value1 = "\SPACE");

			ACUtils.clickAnyButton(button = "Undo Changes");

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no Individuals found.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8593 | Test Summary: Undo Deleting a Segment Member in the Edit Modal"
	@priority = "4"
	test UndoDeletingASegmentMemberInTheEditModal {
		var users = "ac,liferay";

		task ("Create two new users") {
			for (var name : list "${users}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}
		}

		task ("Connect AC to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Login with the users and see page") {
			for (var name : list "${users}") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${name}@liferay.com",
					userLoginFullName = "${name} ${name}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Close all sessions, launch AC, change the property and go to segments") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSegments();
		}

		task ("Create a static segment, add two static members and save segment") {
			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "Static Segment Test");

			for (var name : list "${users}") {
				ACSegments.addStaticMember(tableMember = "${name} ${name}");
			}

			ACSegments.saveSegment();
		}

		task ("Go to segments and assert the static members") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(searchTerm = "Static Segment Test");

			for (var name : list "${users}") {
				AssertElementPresent(
					key_TableMember = "${name} ${name}",
					locator1 = "ACSegments#TABLE_CHECKBOX");
			}
		}

		task ("Search the member, remove, undo and save") {
			ACSegments.searchMember(findMember = "ac ac");

			ACSegments.clickMemberButton(
				buttonName = "Remove",
				memberName = "ac ac");

			ACSegments.clickMemberButton(
				buttonName = "Undo",
				memberName = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Go to segments and assert if the member is still there") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(searchTerm = "Static Segment Test");

			ACSegments.searchMember(findMember = "ac ac");

			AssertElementPresent(
				key_TableMember = "ac ac",
				locator1 = "ACSegments#TABLE_CHECKBOX");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8596 | Test Summary: Undo one static member from being added"
	@priority = "3"
	test UndoOneStaticMemberFromBeingAdded {
		task ("Create user and sincronize it") {
			var users = "ac,ac2,ac3";

			for (var user : list "${users}") {
				JSONUser.addUser(
					userEmailAddress = "${user}@liferay.com",
					userFirstName = "${user}",
					userLastName = "${user}",
					userScreenName = "${user}");
			}

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Login new user and view page") {
			for (var user : list "${users}") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${user}@liferay.com",
					userLoginFullName = "${user} ${user}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Close session, go to AC and segments") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSegments();
		}

		task ("Create segment test and save") {
			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "Static Segment Test");

			for (var user : list "${users}") {
				ACSegments.addStaticMember(tableMember = "${user} ${user}");
			}
		}

		task ("Click view added members") {
			ACUtils.clickAnyButton(button = "View Added Members");
		}

		task ("Assert three members") {
			for (var user : list "${users}") {
				ACSegments.assertMember(memberName = "${user} ${user}");
			}
		}

		task ("Click check and select ac ac") {
			ACSegments.clickCheckboxMember(tableMember = "ac ac");
		}

		task ("Click undo changes") {
			ACUtils.clickAnyButton(button = "Undo Changes");
		}

		task ("Assert elemennt not present in ac ac") {
			ACSegments.assertMemberNotPresent(memberName = "ac ac");
		}

		task ("Click undo") {
			ACSegments.clickMemberButton(
				buttonName = "Undo",
				memberName = "ac2 ac2");
		}

		task ("Assert elemennt not present in ac2 ac2") {
			ACSegments.assertMemberNotPresent(memberName = "ac2 ac2");
		}

		task ("Save segment and open it") {
			ACSegments.saveSegment();

			ACNavigation.goToSegments();

			ACSegments.editSegment(searchTerm = "Static Segment Test");
		}

		task ("Assert element present in ac ac") {
			ACSegments.assertMember(memberName = "ac3 ac3");
		}

		task ("Assert elemennt not present in ac ac") {
			ACSegments.assertMemberNotPresent(memberName = "ac ac");
		}

		task ("Assert elemennt not present in ac2 ac2") {
			ACSegments.assertMemberNotPresent(memberName = "ac2 ac2");
		}
	}

}