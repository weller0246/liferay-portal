@component-name = "portal-collaboration"
definition {

	property custom.properties = "default.layout.template.id=1_column";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Message Boards";

	var pageName = "Message Boards Page";
	var portletName = "Message Boards";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			MessageboardsCategory.tearDownCP();

			MessageboardsThread.tearDownCP();

			Site.tearDownCP();

			Page.tearDownCP();
		}
	}

	@priority = "4"
	@refactorneeded
	test AddMBThreadWithLinkToDocument {
		property portal.acceptance = "true";
		property testray.component.names = "WYSIWYG";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		LexiconEntry.gotoAdd();

		MenuItem.click(menuItem = "Thread");

		Type(
			locator1 = "TextInput#SUBJECT",
			value1 = "MB Thread Message Subject");

		CKEditor.addTextWithLink(
			displayText = "Link to Document",
			dmDocumentTitle = "Document_1.jpg",
			fieldLabel = "Body");

		PortletEntry.publish();

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntry(rowEntry = "MB Thread Message Subject");

		Click(
			key_text = "Link to Document",
			locator1 = "Link#ANY");

		AssertElementPresent(locator1 = "//img[contains(@src,'Document_1.jpg')]");
	}

	@priority = "4"
	@refactorneeded
	test AddMBThreadWithLinkToPage {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "${pageName}");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		LexiconEntry.gotoAdd();

		MenuItem.click(menuItem = "Thread");

		Type(
			locator1 = "TextInput#SUBJECT",
			value1 = "MB Thread Message Subject");

		CKEditor.addTextWithLink(
			displayText = "Link to Page",
			fieldLabel = "Body",
			pageName = "${pageName}");

		PortletEntry.publish();

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntry(rowEntry = "MB Thread Message Subject");

		Click(
			key_text = "Link to Page",
			locator1 = "Link#ANY");

		AssertVisible(
			key_pageName = "${pageName}",
			locator1 = "Home#PAGE_ACTIVE");
	}

	@priority = "5"
	@refactordone
	test CanMoveMBThreadToTrash {
		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		JSONMBMessage.moveThreadToTrash(
			groupName = "Guest",
			threadSubject = "MB Thread Message Subject");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.deleteCP(
			assetName = "MB Thread Message Subject",
			assetType = "Message Boards Thread");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.viewDefaultCP(assetName = "MB Thread Message Subject");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		MessageboardsThread.viewDefaultCP(threadSubject = "MB Thread Message Subject");
	}

	@priority = "5"
	@refactordone
	test CanRestoreMBThread {
		JSONMBMessage.addCategory(
			categoryDescription = "MB Category Description",
			categoryName = "MB Category Name",
			userEmailAddress = "test@liferay.com");

		JSONMBMessage.addMessage(
			categoryName = "MB Category Name",
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		JSONMBMessage.addMessageReply(
			categoryName = "MB Category Name",
			groupName = "Guest",
			replyBody = "MB Body Reply",
			threadSubject = "MB Thread Message Subject");

		JSONMBMessage.moveCategoryToTrash(
			categoryName = "MB Category Name",
			groupName = "Guest");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.restoreCP(
			assetName = "MB Category Name",
			assetRestoreLocation = "Home",
			assetType = "Message Boards Category");

		RecycleBin.viewDefaultCP(assetName = "MB Category Name");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		MessageboardsCategory.viewCP(
			categoryCount = "0",
			categoryName = "MB Category Name",
			replyCount = "1",
			threadCount = "1");

		MessageboardsThread.viewCP(
			replyCount = "1",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject",
			userName = "Test Test");

		MessageboardsThread.viewReplyCP(
			threadBody = "MB Body Reply",
			threadSubject = "MB Thread Message Subject",
			userName = "Test Test");
	}

	@priority = "3"
	@refactordone
	test CanSearchMBAttachment {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		JSONMBMessage.addAttachmentToMessage(
			fileName = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		Search.searchPG(
			portletName = "Message Boards",
			searchTerm = "This is a *.doc file.");

		MessageboardsPortlet.viewSearchResultPG(
			mbThreadAttachment = "Document_1.doc",
			threadSubject = "MB Thread Message Subject");
	}

	@description = "This ensures that an MB thread can be searched via category."
	@priority = "5"
	@refactordone
	test CanSearchMBThreadCategory {
		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Vocabulary Name");

		var categoryId = JSONCategory.addCategory(
			groupName = "Guest",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONMBMessage.addMessage(
			assetCategoryIds = "${categoryId}",
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Category Name");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "MB Thread Message Body",
			searchAssetTitle = "MB Thread Message Subject",
			searchAssetType = "Message Boards Message");
	}

	@description = "This is a use case for LPS-65368."
	@priority = "5"
	@refactordone
	test CanViewBBCodeNoXSSWithRemoteServices {
		property custom.properties = "message.boards.message.formats.default=bbcode";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "Message Boards Thread Body",
			threadSubject = "MB Thread Message Subject");

		JSONMBMessage.addMessageReply(
			anonymous = "true",
			groupName = "Guest",
			replyBody = '''<script>alert(123);</script>''',
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.openToThread(
			groupName = "Guest",
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.viewBBCodeNoXSS(
			threadBody = '''<script>alert(123);</script>''',
			threadSubject = "RE: MB Thread Message Subject",
			userName = "Anonymous");

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@priority = "4"
	@refactordone
	test CanViewMessageBoardsThreadStatistics {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread1 Message Body",
			threadSubject = "MB Thread1 Message Subject");

		MessageboardsThread.viewStatisticsPostsCountPG(
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			threadPostNumber = "1",
			userName = "Test Test");

		MessageboardsThread.openToThread(
			groupName = "Guest",
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			threadSubject = "MB Thread1 Message Subject");

		MessageboardsThread.editPG(
			saveAsDraft = "true",
			threadBodyEdit = "MB Thread1 Message Body Edit",
			threadSubject = "MB Thread1 Message Subject",
			threadSubjectEdit = "MB Thread1 Message Subject Edit");

		MessageboardsThread.viewStatisticsPostsCountDefaultPG(
			layoutName = "message-boards-page",
			siteURLKey = "guest");

		MessageboardsThread.editViaMyPosts(
			threadSubject = "MB Thread1 Message Subject Edit",
			threadSubjectEdit = "true");

		MessageboardsThread.viewStatisticsPostsCountPG(
			lastPostUserName = "Test Test",
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			startedByUserName = "Test Test",
			threadPostNumber = "1");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread2 Message Body",
			threadSubject = "MB Thread2 Message Subject");

		MessageboardsThread.viewStatisticsPostsCountPG(
			lastPostUserName = "Test Test",
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			startedByUserName = "Test Test",
			threadPostNumber = "2");

		JSONMBMessage.deleteMessage(
			groupName = "Guest",
			threadSubject = "MB Thread2 Message Subject");

		MessageboardsThread.viewStatisticsPostsCountPG(
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			threadPostNumber = "1",
			userName = "Test Test");
	}

	@priority = "3"
	@refactorneeded
	test SplitMBThread {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.addPG(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.replyPG(
			threadBody = "MB Thread Message Body",
			threadReplyBody = "MB Thread Reply Body",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "1",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.splitThreadPG(
			threadBody = "MB Thread Message Body",
			threadReplyBody = "MB Thread Reply Body",
			threadSplitReplyBody = "Split Reply Thread Body",
			threadSplitReplySubject = "Split Reply Thread Subject",
			threadSplitSubject = "MB Thread Split Subject",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.viewSplitThreadPG(
			pageName = "Message Boards Page",
			threadBody = "MB Thread Message Body",
			threadReplyBody = "MB Thread Reply Body",
			threadSplitReplyBody = "Split Reply Thread Body",
			threadSplitReplySubject = "Split Reply Thread Subject",
			threadSplitSubject = "MB Thread Split Subject",
			threadSubject = "MB Thread Message Subject");
	}

	@priority = "3"
	@refactorneeded
	test ViewCorrectViewPermissionsInMessageBoardsQuickReplyInPrivateSite {
		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(
			membershipType = "Private",
			siteName = "Blank Site Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(
			pageName = "Site Page Name",
			sitePageType = "Widget Page");

		Navigator.gotoSitePage(
			pageName = "Site Page Name",
			siteName = "Blank Site Name");

		Portlet.addPG(portletName = "Message Boards");

		Navigator.gotoSitePage(
			pageName = "Site Page Name",
			siteName = "Blank Site Name");

		MessageboardsThread.addPGWithPermissions(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject",
			viewableBySelection = "Owner");

		Navigator.gotoSitePage(
			pageName = "Site Page Name",
			siteName = "Blank Site Name");

		MessageboardsThread.replyPG(
			threadReplyBody = "MB Thread Message Subject Reply",
			threadSubject = "MB Thread Message Subject");

		PermissionsInline.gotoMessageBoardsThreadReplyPG(
			pageName = "Site Page Name",
			siteName = "Blank Site Name",
			siteURL = "true",
			threadReplyBody = "MB Thread Message Subject Reply",
			threadSubject = "MB Thread Message Subject");

		for (var roleTitle : list "Power User,User") {
			PermissionsInline.viewPermissionsRemoved(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "${roleTitle}");
		}

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Owner");
	}

	@ignore = "true"
	@priority = "4"
	@refactorneeded
	test ViewMBThreadAndReplyThreadInGmail {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}message.boards.message.formats.default=html${line.separator}pop.server.notifications.enabled=true${line.separator}pop.server.subdomain=${line.separator}mail.session.mail.smtp.auth=true${line.separator}mail.session.mail.store.protocol=pop3${line.separator}mail.session.mail.transport.protocol=smtp";
		property test.name.skip.portal.instance = "MessageboardsUsecase#ViewMBThreadAndReplyThreadInGmail";

		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.configureMailServerSettings(
			needsReply = "true",
			userName = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"));

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.editCP(
			mailDomain = "gmail.com",
			virtualHost = "localhost");

		JSONUser.addUser(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = PropsUtil.get("email.address.3"));

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		Navigator.openURL();

		Navigator.gotoAccountSettings();

		User.editUserInformation(userEmailAddressEdit = PropsUtil.get("email.address.4"));

		MessageboardsPortlet.configureMessageEmailFromCP(emailFromAddress = PropsUtil.get("email.address.2"));

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(
			pageName = "Message Boards Page",
			sitePageType = "Widget Page");

		Navigator.gotoPage(pageName = "Message Boards Page");

		Portlet.addPG(portletName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsCategory.addPG(categoryName = "MB Category Name");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = PropsUtil.get("email.address.3"));

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsCategory.gotoPG(categoryName = "MB Category Name");

		MessageboardsPortlet.subscribePG();

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = PropsUtil.get("email.address.4"));

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsCategory.gotoPG(categoryName = "MB Category Name");

		MessageboardsThread.addPG(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject GMMB1");

		Pause(locator1 = "15000");

		Gmail.login(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"));

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "GMMB1",
			gmailMessageBody = "MB Thread Message Body",
			gmailMessageTitle = "MB Category Name New Message: MB Thread Message Subject GMMB1");

		Gmail.replyMail(gmailReplyMessage = "MB Thread Message Subject GMMB1 Reply");

		Navigator.openSpecificURL(url = "${portalURL}");

		Pause(locator1 = "30000");

		Refresh();

		AssertVisible(locator1 = "Notifications#PROFILE_BADGE_COUNT");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsCategory.gotoPG(categoryName = "MB Category Name");

		MessageboardsThread.viewReplyPG(
			replyCount = "1",
			threadBody = "MB Thread Message Body",
			threadReplyBody = "MB Thread Message Subject GMMB1 Reply",
			threadSubject = "MB Thread Message Subject GMMB1",
			userName = "userfn userln");

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(gmailMessageTitleList = "MB Category Name New Message: MB Thread Message Subject GMMB1,Your New Account,Your New Password,GMMB1");
	}

	@priority = "3"
	@refactorneeded
	test ViewMessageBoardsBannedUsers {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		JSONUser.addUser(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea1@liferay.com");

		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		PermissionsInline.gotoMessageBoardsPG(pageName = "Message Boards Page");

		for (var permissionDefinitionKey : list "INLINE_PERMISSIONS_REPLY_TO_MESSAGE_CHECKBOX,INLINE_PERMISSIONS_VIEW_CHECKBOX") {
			Role.definePermissionPG(
				permissionDefinitionKey = "${permissionDefinitionKey}",
				roleTitle = "User");
		}

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.addPG(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "userea1@liferay.com");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.replyPG(
			threadReplyBody = "MB Thread1 Reply Body",
			threadSubject = "MB Thread Message Subject");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.replyPG(
			threadReplyBody = "MB Thread2 Reply Body",
			threadSubject = "MB Thread Message Subject");

		User.logoutPG();

		User.loginPG();

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.gotoPG(
			lastPostUserName = "userfn2 userln2",
			replyCount = "2",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.banUser(
			threadReplyBody = "MB Thread1 Reply Body",
			userName = "userfn1 userln1");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.gotoPG(
			lastPostUserName = "userfn2 userln2",
			replyCount = "2",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.banUser(
			threadReplyBody = "MB Thread2 Reply Body",
			userName = "userfn2 userln2");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsPortlet.viewBannedUserCP(
			site = "Guest",
			userScreenName = "userfn1 userln1");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsPortlet.viewBannedUserCP(
			site = "Guest",
			userScreenName = "userfn2 userln2");
	}

	@ignore = "true"
	@priority = "4"
	@refactorneeded
	test ViewMessageBoardsRSS {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body 1",
			threadSubject = "MB Thread Message Subject 1");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body 2",
			threadSubject = "MB Thread Message Subject 2");

		Navigator.gotoPage(pageName = "Message Boards Page");

		RSS.viewFeed(
			entryContent = "MB Thread Message Body 2",
			entryTitle = "MB Thread Message Subject 2",
			feedSubtitle = "MB Thread Message Subject 2",
			feedTitle = "MB Thread Message Subject 2",
			rssURL = "message_boards");

		Click(locator1 = "NavBar#HOME");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			threadSubject = "MB Thread Message Subject 1");

		RSS.viewFeed(
			entryContent = "MB Thread Message Body 1",
			entryTitle = "MB Thread Message Subject 1",
			feedSubtitle = "MB Thread Message Subject 1",
			feedTitle = "MB Thread Message Subject 1",
			rssURL = "message_boards");

		Click(locator1 = "NavBar#HOME");

		RSS.gotoFeed(rssURL = "message_boards");

		RSS.viewFeedEntry(
			entryContent = "MB Thread Message Body 1,MB Thread Message Body 2",
			entryTitle = "MB Thread Message Subject 1,MB Thread Message Subject 2");
	}

	@description = "This is a use case for LPS-65365."
	@priority = "5"
	@refactorneeded
	test ViewNoHTMLXSS {
		property custom.properties = "message.boards.message.formats.default=html";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.addPG(
			threadBody = '''<script>alert(123);</script>''',
			threadSubject = '''<script>alert(123);</script>''');

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			threadBody = '''<script>alert(123);</script>''',
			threadSubject = '''<script>alert(123);</script>''');

		MessageboardsThread.viewNoXSSPG(
			threadBody = '''<script>alert(123);</script>''',
			threadSubject = '''<script>alert(123);</script>''');

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@priority = "4"
	@refactorneeded
	test ViewNoMBThreadXSS {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.addPG(
			source = "true",
			threadBody = "[img]asd[font= onerror=alert(/This is an XSS Message/.source)//]FF[/font][/img]",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			threadBody = "[img]asd[font= onerror=alert(/This is an XSS Message/.source)//]FF[/font][/img]",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.viewNoXSSPG(
			sourceContent = "true",
			threadBody = "[img]asd[font= onerror=alert(/This is an XSS Message/.source)//]FF[/font][/img]",
			threadSubject = "MB Thread Message Subject");
	}

	@priority = "4"
	@refactorneeded
	test ViewNoSubscribeLinksNoWithEmailNotificationsDisabled {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsCategory.addPG(
			categoryName = "MB Category Name",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.addPG(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		var key_categoryName = "MB Category Name";
		var key_threadSubject = "MB Thread Message Subject";

		Click(locator1 = "MessageBoards#CATEGORY_LIST_ACTIONS");

		MenuItem.viewPresent(menuItem = "Subscribe");

		AssertClick(
			locator1 = "MessageBoards#CATEGORY_LIST_CATEGORY",
			value1 = "MB Category Name");

		Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		AssertTextEquals(
			locator1 = "Link#SUBSCRIBE",
			value1 = "Subscribe");

		Navigator.gotoPage(pageName = "Message Boards Page");

		Click(locator1 = "MessageBoards#VERTICAL_ELLIPSIS");

		MenuItem.viewPresent(menuItem = "Unsubscribe");

		Navigator.gotoPage(pageName = "Message Boards Page");

		AssertClick(
			locator1 = "MessageBoards#THREAD_LIST_THREAD",
			value1 = "MB Thread Message Subject");

		Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.viewPresent(menuItem = "Unsubscribe");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsPortlet.configureMessageAddedEmailCP(messageAddedEmailEnabled = "false");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsPortlet.configureMessageUpdatedEmailCP(messageUpdatedEmailEnabled = "false");

		Navigator.gotoPage(pageName = "Message Boards Page");

		Click(locator1 = "MessageBoards#CATEGORY_LIST_ACTIONS");

		MenuItem.viewNotPresent(menuItem = "Subscribe");

		AssertClick(
			locator1 = "MessageBoards#CATEGORY_LIST_CATEGORY",
			value1 = "MB Category Name");

		AssertElementNotPresent(locator1 = "Link#SUBSCRIBE");

		Navigator.gotoPage(pageName = "Message Boards Page");

		Click(locator1 = "MessageBoards#VERTICAL_ELLIPSIS");

		MenuItem.viewNotPresent(menuItem = "Unsubscribe");

		AssertClick(
			locator1 = "MessageBoards#THREAD_LIST_THREAD",
			value1 = "MB Thread Message Subject");

		Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.viewNotPresent(menuItem = "Unsubscribe");
	}

	@description = "This test covers LPS-77252 and LPS-86797. It ensures that Categories group and Threads group are listed independently with their own pager."
	@priority = "4"
	@refactorneeded
	test ViewPagersForCategoriesAndThreads {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		for (var categoryName : list "MB Category1 Name,MB Category2 Name,MB Category3 Name,MB Category4 Name,MB Category5 Name,MB Category6 Name") {
			JSONMBMessage.addCategory(
				categoryDescription = "${categoryName} Description",
				categoryName = "${categoryName}",
				userEmailAddress = "test@liferay.com");
		}

		for (var threadSubjectName : list "MB Thread Message 1,MB Thread Message 2,MB Thread Message 3,MB Thread Message 4,MMB Thread Message 5,MB Thread Message 6") {
			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "${threadSubjectName} Body",
				threadSubject = "${threadSubjectName} Subject");
		}

		Navigator.gotoPage(pageName = "Message Boards Page");

		AssertTextEquals(
			key_titleName = "Categories",
			locator1 = "MessageBoards#PAGER_TITLE",
			value1 = "Categories");

		AssertTextEquals(
			key_titleName = "Threads",
			locator1 = "MessageBoards#PAGER_TITLE",
			value1 = "Threads");

		Pagination.changePagination(itemsPerPage = "4");

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertTextEquals(
			key_categoryName = "MB Category6 Name",
			locator1 = "MessageBoards#CATEGORY_LIST_CATEGORY",
			value1 = "MB Category6 Name");

		Click(locator1 = "Pagination#ITEMS_PER_PAGE_SELECT_2");

		MenuItem.click(menuItem = "4");

		Click(locator1 = "Pagination#NEXT_LINK_2");

		AssertTextEquals(
			key_categoryName = "MB Category6 Name",
			locator1 = "MessageBoards#CATEGORY_LIST_CATEGORY",
			value1 = "MB Category6 Name");

		AssertTextEquals.assertPartialText(
			key_threadSubject = "MB Thread Message 1 Subject",
			locator1 = "MessageBoards#THREAD_LIST_THREAD",
			value1 = "MB Thread Message 1 Subject");

		for (var categoryName : list "MB Sub Category1 Name,MB Sub Category2 Name,MB Sub Category3 Name,MB Sub Category4 Name,MB Sub Category5 Name,MB Sub Category6 Name") {
			var parentCategoryId = JSONMBMessage.getCategoryIdByName(
				categoryName = "MB Category1 Name",
				groupName = "Guest");

			JSONMBMessage.addCategory(
				categoryDescription = "MB Subcategory Description",
				categoryName = "${categoryName}",
				groupName = "Guest",
				parentCategoryId = "${parentCategoryId}",
				userEmailAddress = "test@liferay.com");
		}

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		MessageboardsCategory.gotoCP(categoryName = "MB Category1 Name");

		MessageboardsThread.addCP(
			threadBody = "MB Thread Message Body in Sub Category",
			threadSubject = "MB Thread Message Subject in Sub Category");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsCategory.gotoPG(categoryName = "MB Category1 Name");

		AssertTextEquals(
			key_titleName = "Categories",
			locator1 = "MessageBoards#PAGER_TITLE",
			value1 = "Categories");

		AssertTextEquals(
			key_titleName = "Threads",
			locator1 = "MessageBoards#PAGER_TITLE",
			value1 = "Threads");

		AssertElementNotPresent(
			key_threadSubject = "MB Thread Message",
			locator1 = "MessageBoardsThread#THREAD_SUBJECT",
			value1 = "MB Thread Message");

		Pagination.changePagination(itemsPerPage = "8");

		Pagination.viewResults(results = "Showing 1 to 6 of 6 entries.");
	}

	@priority = "3"
	@refactorneeded
	test ViewQuestionOnSplitThread {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.addPGAsQuestion(
			breadcrumbName = "Home",
			lastPostUserName = "Test Test",
			pageName = "Message Boards Page",
			replyCount = "0",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.viewMarkedAsQuestionPG(threadSubject = "MB Thread Message Subject");

		MessageboardsThread.replyPG(
			threadReplyBody = "MB Thread Split Reply Body",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "1",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.splitThreadPG(
			threadReplyBody = "MB Thread Split Reply Body",
			threadSplitReplyBody = "Split Reply Thread Body",
			threadSplitReplySubject = "Split Reply Thread Subject",
			threadSplitSubject = "MB Thread Split Subject",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.viewSplitThreadPG(
			pageName = "Message Boards Page",
			threadBody = "MB Thread Message Body",
			threadReplyBody = "MB Thread Split Reply Body",
			threadSplitReplyBody = "Split Reply Thread Body",
			threadSplitReplySubject = "Split Reply Thread Subject",
			threadSplitSubject = "MB Thread Split Subject",
			threadSubject = "MB Thread Message Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.viewMarkedAsQuestionPG(threadSubject = "MB Thread Message Subject");
	}

	@priority = "3"
	@refactorneeded
	test ViewThreadDefaultQuestion {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		MessageboardsThread.viewMarkAsQuestionNotCheckedCP(threadSubject = "Thread Subject");

		MessageboardsPortlet.configureGeneralCP(
			siteURLKey = "guest",
			threadAsQuestionByDefaultEnabled = "true");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		MessageboardsThread.viewMarkAsQuestionCheckedCP(threadSubject = "Thread Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.addPG(
			threadBody = "Thread Body",
			threadSubject = "Thread Subject");

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.replyPG(
			markAsAnswer = "true",
			markAsQuestion = "true",
			threadReplyBody = "Thread Reply Body",
			threadSubject = "Thread Subject");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Message Boards Page");

		MessageboardsThread.viewAnswerPG(
			answerCount = "1",
			threadSubject = "Thread Subject");
	}

	@description = "This test ensures that the MB widget can be accessible."
	@priority = "4"
	test WidgetCanBeAccessible {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		Navigator.openSitePage(
			pageName = "Message Boards Page",
			siteName = "Guest");

		AssertAccessible();
	}

}