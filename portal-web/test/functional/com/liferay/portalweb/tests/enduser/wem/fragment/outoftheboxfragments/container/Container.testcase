@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-111657. Can add the Container to a column of Row or another Container."
	@priority = "4"
	test AddContainerToLayoutElements {
		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Assert add a Container to another Container") {
			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Container",
				navTab = "Fragments");
		}

		task ("Assert add a Container to module of Grid") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				targetFragmentName = "Container");

			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "1",
				fragmentName = "Container",
				navTab = "Fragments");
		}
	}

	@description = "This is a test for LPS-107285. Can not duplicate Layout Elements with a widget that only allowed appear once in the page, there should be an error message shown."
	@priority = "4"
	test CannotDuplicateContainerWithOnlyAllowedAppearOnceWidget {
		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add the Language Selector into Container") {
			PageEditor.addElementToContainer(
				navTab = "Widgets",
				portletName = "Language Selector");
		}

		task ("Assert alert message when duplicate Container") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "The layout could not be duplicated because it contains a widget (Language Selector) that can only appear once in the page.");

			Pause(locator1 = "3000");
		}
	}

	@description = "This is a test for LPS-91000, LPS-95002, LPS-115224 and LPS-120693. Configure the Flex Column and Fixed Width Container styles."
	@priority = "5"
	test ConfigureFlexColumnAndFixedWidthContainerStyles {
		property portal.acceptance = "true";

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Paragraph fragment to Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				navTab = "Fragments");
		}

		task ("Add a Tabs below the Container") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs",
				targetFragmentName = "Container");
		}

		task ("Move the Tabs to the top of Paragraph inside the Container via Browser Panel") {
			PageEditor.gotoTab(tabName = "Browser");

			Pause(locator1 = "3000");

			Click(
				key_nodeName = "Container",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_COLLAPSED");

			DragAndDrop.javaScriptDragAndDropToUp(
				locator1 = "//div[contains(@class,'list-item__node')][contains(.,'Tabs')]//div[@role='button'][@draggable='true']",
				locator2 = "//div[contains(@class,'list-item__node')][contains(.,'Paragraph')]//div[@role='button'][@draggable='true']");

			Pause(locator1 = "3000");

			AssertElementPresent(
				key_elementHeader = "//li[contains(@class,'topper__title') and contains(.,'Tabs')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("Assert the Container styles") {
			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				paddingLeft = "0",
				paddingRight = "0",
				position = "1");
		}

		task ("Configure the Container styles") {
			PageEditor.editLayoutContainer(
				alignItems = "Baseline",
				backgroundColor = "Success",
				containerWidth = "Fixed Width",
				contentDisplay = "Flex Column",
				height = "600px",
				justifyContent = "Around",
				paddingBottom = "4",
				paddingTop = "2",
				panel = "Styles");
		}

		task ("Assert the Margin Left and Margin Right fields are disabled") {
			AssertNotEditable(
				key_borderBottom = "Margin",
				key_fieldLabel = "Left",
				locator1 = "Select#BORDER_BOTTOM_SELECT_FIELD");

			AssertNotEditable(
				key_borderBottom = "Margin",
				key_fieldLabel = "Right",
				locator1 = "Select#BORDER_BOTTOM_SELECT_FIELD");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "baseline",
				backgroundColor = "success",
				containerWidth = "Fixed Width",
				contentDisplay = "column",
				height = "600px",
				justifyContent = "around",
				paddingBottom = "4",
				paddingTop = "2",
				position = "1");
		}

		task ("Assert Fixed Width of Container works in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var screenWidth	= selenium.getElementWidth("//body");

			var containerWidth	= selenium.getElementWidth("//div[contains(@class,'container')][contains(@class,'pb-4')][contains(@class,'pt-2')]");

			TestUtils.assertNotEquals(
				actual = "${containerWidth}",
				expected = "${screenWidth}");

			AssertVisible(locator1 = "//div[contains(@class,'container')][contains(@class,'pb-4')][contains(@class,'pt-2')]");

			AssertCssValue(
				locator1 = "//div[contains(@class,'container')][contains(@class,'pb-4')][contains(@class,'pt-2')]",
				locator2 = "background-color",
				value1 = "rgba(40, 125, 60, 1)");

			AssertCssValue(
				locator1 = "//div[contains(@class,'container')][contains(@class,'pb-4')][contains(@class,'pt-2')]",
				locator2 = "max-width",
				value1 = "${containerWidth}px");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'container')][contains(@class,'ml-0')]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'container')][contains(@class,'mr-0')]");
		}
	}

	@description = "This is a test for LPS-120693. Configure the Flex Column and Fluid Container styles."
	@priority = "5"
	test ConfigureFlexColumnAndFluidContainerStyles {
		property portal.acceptance = "true";

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Button fragment to Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Button",
				navTab = "Fragments");
		}

		task ("Add a Image below the Container") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Container");
		}

		task ("Move the Image to the top of Button inside the Container via Browser Panel") {
			PageEditor.gotoTab(tabName = "Browser");

			Pause(locator1 = "3000");

			Click(
				key_nodeName = "Container",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_COLLAPSED");

			DragAndDrop.javaScriptDragAndDropToUp(
				locator1 = "//div[contains(@class,'list-item__node')][contains(.,'Image')]//div[@role='button'][@draggable='true']",
				locator2 = "//div[contains(@class,'list-item__node')][contains(.,'Button')]//div[@role='button'][@draggable='true']");

			Pause(locator1 = "3000");

			AssertElementPresent(
				key_elementHeader = "//li[contains(@class,'topper__title') and contains(.,'Image')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("View the Container styles") {
			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				position = "1");
		}

		task ("Configure the Container styles") {
			PageEditor.editLayoutContainer(
				alignItems = "End",
				contentDisplay = "Flex Column",
				height = "1000px",
				justifyContent = "Between",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "end",
				contentDisplay = "column",
				height = "1000px",
				justifyContent = "between",
				position = "1");
		}
	}

	@description = "This is a test for LPS-120693. Configure the Flex Row and Fixed Width Container styles."
	@priority = "5"
	test ConfigureFlexRowAndFixedWidthContainerStyles {
		property portal.acceptance = "true";

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment to Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Add a Banner Center below the Container") {
			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center",
				targetFragmentName = "Container");
		}

		task ("Move the Banner Center to the top of Heading inside the Container via Browser Panel") {
			PageEditor.gotoTab(tabName = "Browser");

			Pause(locator1 = "3000");

			Click(
				key_nodeName = "Container",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_COLLAPSED");

			DragAndDrop.javaScriptDragAndDropToUp(
				locator1 = "xpath=(//div[contains(@class,'list-item__node')][contains(.,'Container')]//div[@role='button'][@draggable='true'])[2]",
				locator2 = "//div[contains(@class,'list-item__node')][contains(.,'Heading')]//div[@role='button'][@draggable='true']");

			Pause(locator1 = "3000");

			AssertElementPresent(
				key_elementHeader = "//*[contains(@data-lfr-editable-id,'element-text')][normalize-space()='Banner Title Example']",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("View the Container styles") {
			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				position = "1");
		}

		task ("Configure the Container styles") {
			PageEditor.editLayoutContainer(
				alignItems = "Start",
				containerWidth = "Fixed Width",
				contentDisplay = "Flex Row",
				justifyContent = "End",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "start",
				containerWidth = "Fixed Width",
				contentDisplay = "row",
				justifyContent = "end",
				position = "1");
		}
	}

	@description = "This is a test for LPS-106776, LPS-111657 and LPS-120693. Configure the Flex Row and Fluid Container styles."
	@priority = "5"
	test ConfigureFlexRowAndFluidContainerStyles {
		property portal.acceptance = "true";

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment to Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Add a Card below the Container") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "Container");
		}

		task ("Move the Card to the top of Heading inside the Container via Browser Panel") {
			PageEditor.gotoTab(tabName = "Browser");

			Pause(locator1 = "3000");

			Click(
				key_nodeName = "Container",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_COLLAPSED");

			DragAndDrop.javaScriptDragAndDropToUp(
				locator1 = "//div[contains(@class,'list-item__node')][contains(.,'Card')]//div[@role='button'][@draggable='true']",
				locator2 = "//div[contains(@class,'list-item__node')][contains(.,'Heading')]//div[@role='button'][@draggable='true']");

			Pause(locator1 = "3000");

			AssertElementPresent(
				key_elementHeader = "//li[contains(@class,'topper__title') and contains(.,'Card')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("View the Container styles") {
			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				position = "1");
		}

		task ("Configure the Container styles") {
			PageEditor.editLayoutContainer(
				alignItems = "Center",
				backgroundColor = "Warning",
				borderColor = "Danger",
				borderRadius = "Border Radius Large",
				borderWidth = "5",
				boxShadow = "Box Shadow Large",
				contentDisplay = "Flex Row",
				justifyContent = "Center",
				marginBottom = "2",
				marginLeft = "2",
				marginRight = "2",
				marginTop = "2",
				opacity = "50",
				paddingBottom = "2",
				paddingLeft = "2",
				paddingRight = "2",
				paddingTop = "2",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "center",
				backgroundColor = "warning",
				borderColor = "danger",
				borderRadius = "border-radius-lg",
				borderWidth = "5",
				boxShadow = "box-shadow-lg",
				contentDisplay = "row",
				dropShadow = "lg",
				justifyContent = "center",
				marginBottom = "2",
				marginLeft = "2",
				marginRight = "2",
				marginTop = "2",
				opacity = "0.5",
				paddingBottom = "2",
				paddingLeft = "2",
				paddingRight = "2",
				paddingTop = "2",
				position = "1");
		}

		task ("Duplicate the Container") {
			PageEditor.gotoDuplicate(fragmentName = "Container");
		}

		task ("View the duplicate Container fragment") {
			PageEditor.viewDuplicateFragment(fragmentName = "Container");
		}
	}

	@description = "This is a test for LPS-107285. When duplicate the Container with the Grid, the Grid should also be duplicated."
	@priority = "5"
	test DuplicateContainerWithGrid {
		property portal.acceptance = "true";

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Grid into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Assert the nested Grid is also duplicated with Container") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewDuplicateFragment(fragmentName = "Container");

			AssertElementPresent(
				key_elementHeader = "/div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Grid')]//li[contains(@class,'title')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-121330. Can add an internal link to the Container element."
	@priority = "5"
	test MapDisplayPageURLToContainer {
		property portal.acceptance = "true";

		task ("Add a display page template with Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Add a web content article and select the display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add a Container element to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Card fragment into the Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Card",
				navTab = "Fragments");
		}

		task ("Add From Content Field link to Container") {
			PageEditor.editLayoutContainer(
				entryTitle = "Web Content Title",
				field = "Display Page URL",
				link = "Mapped URL",
				navItem = "Web Content",
				panel = "General");

			var baseURL = PropsUtil.get("portal.url");

			AssertVisible(
				key_append = "//img",
				key_URL = "${baseURL}/web/test-site-name/w/web-content-title",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Assert mapped link work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_append = "/img",
				key_URL = "${baseURL}/web/test-site-name/w/web-content-title",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "/img",
				key_URL = "${baseURL}/web/test-site-name/w/web-content-title",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");

			AssertVisible(
				key_assetContent = "Web Content Content",
				key_assetTitle = "Web Content Title",
				locator1 = "PageEditor#ASSET_CONTENT");
		}
	}

	@description = "This ensures that images can be added to the fragment background via the file URL when mapping a document."
	@priority = "5"
	test MapDMImageToBackgroundImageOfContainer {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Mapping",
			entryTitle = "Document_1.jpg",
			fieldName = "File URL",
			navItem = "Documents and Media",
			paddingTop = "2",
			panel = "Styles");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-name");

		AssertElementPresent(
			key_imageName = "Document_1.jpg",
			locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
	}

	@description = "This is a test for LPS-119817. Map manual URL to Container element."
	@priority = "5"
	test MapManualURLToContainerElement {
		property portal.acceptance = "true";

		task ("Add a Container element to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Card fragment into the Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Card",
				navTab = "Fragments");
		}

		task ("Map Manual URL to Container") {
			PageEditor.editLayoutContainer(
				panel = "General",
				url = "https://liferay.com");

			AssertVisible(
				key_append = "//img",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_append = "/img",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "/img",
				key_URL = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This case ensures a user can map the layout of a fragment to an existing image content."
	@priority = "5"
	test MapWebContentImageToBackgroundImageOfContainerInContentPage {
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Image",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			navTab = "Web Content Images",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentImage = "Document_2.jpeg",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Mapping",
			entryTitle = "WC WebContent Title",
			navItem = "Web Content",
			panel = "Styles");

		task ("Assert the layout background field contains the mapped image.") {
			PageEditor.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-name");

			AssertElementPresent(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a test for LPS-98030. Can map the layout of a fragment to an existing image content in a content page template."
	@priority = "3"
	test MapWebContentImageToBackgroundImageOfContainerInContentPageTemplate {
		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");
		}

		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Upload an image from Image field") {
			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				structureName = "WC Structure Name",
				webContentImage = "Document_2.jpeg",
				webContentTitle = "WC WebContent Title");

			PortletEntry.publish();
		}

		task ("Add a Container to content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Map web content image to background image field of Container") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				entryTitle = "WC WebContent Title",
				navItem = "Web Content",
				panel = "Styles");
		}

		task ("Assert the mapped image is shown in background image field") {
			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");

			PageEditor.clickPublish();
		}

		task ("Add a content page based on content page template") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Assert the mapped image is shown in background image field in edit mode") {
			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");

			PageEditor.clickPublish();
		}

		task ("Assert the mapped image is shown in background image in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a test for LPS-98030. Can map the layout of a fragment to an existing image content in a display page template."
	@priority = "2"
	test MapWebContentImageToBackgroundImageOfContainerInDisplayPageTemplate {
		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a display page template with Web Content Article and WC Structure Name") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Test Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Container fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Map web content image to background image field of Container") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				fieldName = "Image",
				panel = "Styles");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				structureName = "WC Structure Name",
				webContentImage = "Document_2.jpeg",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Test Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Display Page Name");
		}

		task ("Assert mapped image is shown in display page template") {
			AssertVisible(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a test for LPS-107285. When the Container fragment is duplicated, the configuration of it and its components should also be duplicated."
	@priority = "4"
	test ViewConfigurationDuplicatedInDuplicatedContainerWithHeading {
		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Configure the Container") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Success",
				panel = "Styles");

			PageEditor.viewContainerStyle(
				backgroundColor = "success",
				position = "1");
		}

		task ("Configure the Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(textColor = "White");

			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				textColor = "white");
		}

		task ("Assert configuration duplicated with Container and Heading") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewContainerStyle(
				backgroundColor = "success",
				position = "2");

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Heading')]/following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@style,'color: var(--white)')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-107285. When the Container fragment with Heading fragment is duplicated, the edited inline content should also be duplicated."
	@priority = "4"
	test ViewEditedInlineContentDuplicatedInDuplicatedContainerWithHeading {
		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Edit inline content of Heading") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Assert edited inline content duplicated with nested Heading") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewDuplicateFragment(fragmentName = "Container");

			AssertVisible(
				key_elementHeader = "//div[contains(.,'New editable fragment text') and contains(@id,'fragment-')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-107285. When the Container with Heading fragment is duplicated, the mapped content should also be duplicated."
	@priority = "4"
	test ViewMappedContentDuplicatedInDuplicatedContainerWithHeading {
		task ("Add a Web Content Article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Map content of Web Content to Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Basic Web Content");

			SelectFrame(value1 = "relative=top");

			PageEditor.waitForAutoSave();

			AssertVisible(
				key_text = "WC WebContent Content",
				locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
		}

		task ("Assert mapped content duplicated with nested Heading") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewDuplicateFragment(fragmentName = "Container");

			AssertVisible(
				key_elementHeader = "//div[contains(.,'WC WebContent Content') and contains(@id,'fragment-')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

}