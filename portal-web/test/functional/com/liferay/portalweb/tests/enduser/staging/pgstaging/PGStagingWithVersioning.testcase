@component-name = "portal-staging"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Staging";

	setUp {
		task ("Setup: Setup portal instance and login to portal") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Setup: Add a group with the name Site Name") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Setup: Add a public layout to the group") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page");
		}

		task ("Setup: Activate local live staging and open staging Site") {
			JSONStaging.enableLocalStaging(
				branchingPrivate = "true",
				branchingPublic = "true",
				groupName = "Site Name");

			Navigator.openStagingSiteURL(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Verify if is possible add an event that repeats daily."
	@priority = "4"
	test AddEventRepeatDaily {
		task ("When: I add a daily repeating event") {
			Staging.addRepeatEvent(
				frequency = "Daily",
				scheduleTitleName = "Event Daily Name",
				siteName = "Site Name",
				startOnTomorrow = "true");
		}

		task ("Then: It is possible to see that this event will be repeated every day") {
			Staging.viewRepeatingEventDetails(
				endDate = "No End Date",
				scheduleTitleName = "Event Daily Name",
				siteName = "site-name-staging");
		}
	}

	@description = "Verify is possible add a page variation."
	@priority = "5"
	test AddPageVariation {
		property portal.acceptance = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "PGStagingWithVersioning#AddPageVariation";
		property testray.component.names = "Training";

		task ("Given: I add the page variation") {
			Staging.addPageVariationPG(pageVariationName = "Page Variation Name");

			Navigator.openStagingSiteURL(siteName = "Site Name");

			Staging.viewPageVariationPG(pageVariationName = "Page Variation Name");
		}

		task ("When: I go to pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name-staging");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Staging Test Page");
		}

		task ("And when: I add a friendly localized and URL") {
			PagesAdmin.addLocalizedFriendlyURL(
				friendlyURLLocalizedList = "de-DE",
				localizedFriendlyURLList = "/german",
				localizedNameList = "German Staging Test Page");

			PagesAdmin.openPagesAdmin(siteURLKey = "site-name-staging");
		}

		task ("Then: Is possible see that configuration on created page") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Staging Test Page");

			PagesAdmin.viewFriendlyURL(
				localizedFriendlyURL = "de-DE",
				pageName = "german");
		}
	}

	@description = "Verify is possible add page with versioning enabled."
	@priority = "5"
	test AddPageWithPageVersioningEnabled {
		property portal.acceptance = "true";

		task ("Given: I have a page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name-staging");

			PagesAdmin.addPage(pageName = "Staging Page Versioning");

			Navigator.gotoStagedSitePage(
				pageName = "Staging Page Versioning",
				siteName = "Site Name");

			Portlet.addPG(portletName = "IFrame");
		}

		task ("when: publish it for live") {
			Staging.markAsReadyForPublication();

			Navigator.openStagingSiteURL(siteName = "Site Name");

			Staging.gotoPublishToLive();

			Staging.publishToLive();

			Navigator.gotoStagedSitePage(
				pageName = "Staging Page Versioning",
				siteName = "Site Name");
		}

		task ("Then: Its possible to see that page with versioning enabled") {
			Portlet.viewSpecificPG(portletName = "IFrame");
		}
	}

	@description = "This is a test for LPS-36620. Verified that navigation is visible when clicking the site page variation."
	@priority = "5"
	test AddSitePagesVariation {
		property portal.acceptance = "true";

		task ("Give: Add a new site page") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name (Staging)",
				layoutName = "Test Page",
				site = "false");
		}

		task ("And: Add a site page variation") {
			Navigator.openStagingSiteURL(siteName = "Site Name");

			Staging.addSitePagesVariationPG(sitePagesVariationName = "Site Pages Variation Name");
		}

		task ("When: Go to Publish To Live screen") {
			Navigator.openStagingSiteURL(siteName = "Site Name");
		}

		task ("Then: I can see the site page variation there") {
			Staging.viewSitePagesVariationPG(sitePagesVariationName = "Site Pages Variation Name");
		}

		task ("When: Click the newly added site page variation") {
			Click(locator1 = "Staging#SITE_PAGES_VARIATION");
		}

		task ("Then: Assert the freshly added site page is visible") {
			AssertVisible(
				key_pageName = "Test Page",
				locator1 = "Home#PAGE");
		}
	}

	@description = "This is a use case for LPS-123156. Verify is possible see the variation info on Staging."
	@priority = "4"
	test AssertStagingVariationInfo {
		property portal.upstream = "marcell";
		task ("Given: I have Site Page Variation") {
			Page.viewWithWorkflowPG(workflowStatus = "Ready for Publication");

			MouseOver(
				key_tooltipInfo = "Page variations allow you to work in parallel in different versions of the same page inside this pages variation. When publishing to live, the version marked as ready to publish is the one that is processed.",
				locator1 = "Staging#STAGING_TOOLTIP");

			AssertTextPresent(
				locator1 = "Staging#FLOATING_TOOLTIP_CONTENT",
				value1 = "Page variations allow you to work in parallel in different versions of the same page inside this pages variation. When publishing to live, the version marked as ready to publish is the one that is processed.");

			Staging.addSitePagesVariationPG(
				copySitePagesVariationName = "All Site Pages Variations",
				sitePagesVariationName = "Site Pages Variation Name");
		}

		task ("And given: I have a child page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name-staging");

			PagesAdmin.addChildPage(
				childPageName = "Child Page",
				parentPageName = "Staging Test Page");

			Navigator.openStagingSiteURL(siteName = "Site Name");

			Staging.addPageVariationPG(pageVariationName = "Page Variation Name");

			Staging.markAsReadyForPublication();

			Navigator.gotoStagedSitePage(
				pageName = "Child Page",
				siteName = "Site Name");

			Staging.addPageVariationPG(pageVariationName = "Child Page Variation Name");
		}

		task ("When: I go to Publish To Live screen") {
			Staging.gotoPublishToLive();
		}

		task ("Then: I can assert that the information appears there") {
			AssertClick.assertPartialTextClickAt(
				locator1 = "StagingPublishToLive#SWITCH_TO_ADVANCED_PUBLICATION",
				value1 = "Switch to Advanced Publish Process");

			MouseOver(
				key_tooltipInfo = "Child pages cannot be published independently of their parent pages by default. You are able to configure this in System Settings. This process will automatically publish the parent pages even if they are not selected.",
				locator1 = "Staging#STAGING_TOOLTIP");

			AssertTextPresent(
				locator1 = "Staging#FLOATING_TOOLTIP_CONTENT",
				value1 = "Child pages cannot be published independently of their parent pages by default. You are able to configure this in System Settings. This process will automatically publish the parent pages even if they are not selected.");

			Staging.viewVariationTooltipMessage(
				pageName = "Staging Test Page",
				title = "This is the page variation that is marked as ready for the publish process.");

			Staging.viewVariationTooltipMessage(
				pageName = "Child Page",
				title = "There is not a version of this page marked as ready for the publish process.");
		}
	}

	@description = "This is a use case for LPS-123156. Verify is possible see the variation info on publish screen."
	@priority = "4"
	test AssertVariationInfoInPublishScreen {
		task ("Given: I add a Site Page Variation") {
			Staging.addSitePagesVariationPG(
				copySitePagesVariationName = "All Site Pages Variations",
				sitePagesVariationName = "Site Pages Variation Name");

			Staging.markAsReadyForPublication();
		}

		task ("When: I go to Publish To Live screen") {
			Staging.gotoPublishToLive();
		}

		task ("Then: I can assert that the information appears there") {
			SelectFrame(
				key_title = "Publish Site Pages Variation Name to Live.",
				locator1 = "StagingPublishToLive#MODAL_TITLE");

			AssertTextEquals(
				locator1 = "StagingPublishToLive#MODAL_TITLE",
				value1 = "Publish Site Pages Variation Name to Live.");
		}
	}

}