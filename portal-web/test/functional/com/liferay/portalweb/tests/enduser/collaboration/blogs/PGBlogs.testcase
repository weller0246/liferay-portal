@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	var pageName = "Blogs Page";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();

			Blogs.tearDownConfigurationDisplaySettingsPG(
				pageName = "Blogs Page",
				portletName = "Blogs");

			Blogs.tearDownConfigurationScopePG(
				pageName = "Blogs Page",
				portletName = "Blogs");

			Page.tearDownCP();

			Site.tearDownCP();

			Organization.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			ServerAdministration.tearDownMailServerSettings();
		}
	}

	@description = "This test covers LPS-106613. It ensures that the custom abstract field cannot be reset to empty after typing in the content field."
	@priority = "3"
	@refactordone
	test AbstractDescriptionCanPersistAfterTypingInContentField {
		property test.name.skip.portal.instance = "PGBlogs#AbstractDescriptionCanPersistAfterTypingInContentField";

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(entryAbstractDescription = "Blogs Entry Abstract Description");

		Click.pauseClickAt(
			key_editor = "content",
			locator1 = "AlloyEditor#EDITOR");

		BlogsEntry.addContent(entryContent = "Blogs Entry Content");

		AssertTextEquals(
			locator1 = "TextInput#DESCRIPTION",
			value1 = "Blogs Entry Abstract Description");
	}

	@description = "This is a use case for LPS-69240. It checks that a blog entry with custom URL can be added and also that the automatic URL is generated properly in the UI."
	@priority = "4"
	@refactordone
	test CanAddEntryWithCustomURL {
		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		AssertChecked(locator1 = "Radio#AUTOMATIC_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url-here");

		PortletEntry.publish();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/custom-url-here");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a usecase for LPS-75241. It checks that an embedded video can be added to a blog."
	@priority = "5"
	@refactordone
	test CanAddEntryWithEmbeddedVideo {
		property portal.acceptance = "true";
		property testray.component.names = "WYSIWYG";

		Blogs.addEntry(
			embedVideo = "https://www.youtube.com/watch?v=2EPZxIC5ogU",
			entryContent = "video",
			entryTitle = "Blogs Entry Title",
			navTab = "URL",
			videoService = "youtube");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that basic text can be inputted and displayed in the most common fields in a blog entry."
	@priority = "5"
	@refactordone
	@uitest
	test CanAddEntryWithSubtitle {
		property testray.component.names = "WYSIWYG";

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry with a trackback URL can be added."
	@priority = "4"
	@refactorneeded
	test CanAddEntryWithTrackbackURL {
		property custom.properties = "blogs.trackback.enabled=true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Refresh();

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title",
			pageName = "Blogs Page");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title");
	}

	@description = "This checks that characters will not be escaped in the blog entry title."
	@priority = "4"
	@refactordone
	test CanAddTitleWithoutEscapingCharacters {
		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');
	}

	@description = "This checks that a comment can be deleted from a blog entry."
	@priority = "4"
	@refactordone
	test CanDeleteComment {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "Blogs Entry Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.delete(entryComment = "Blogs Entry Comment");
	}

	@description = "This checks that the view count for a blog can be displayed once enabled."
	@priority = "3"
	@refactordone
	test CanDisplayViewCountForEntry {
		property test.name.skip.portal.instance = "PGBlogs#CanDisplayViewCountForEntry";

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		Check(locator1 = "Checkbox#SHOW_VIEW_COUNT");

		IFrame.saveConfiguration();

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewViewCountPG(
			entryTitle = "Blogs Entry Title",
			pageName = "Blogs Page");
	}

	@description = "This checks that a comment can be edited in a blog entry."
	@priority = "5"
	@@refactorneeded
	test CanEditComment {
		property portal.acceptance = "true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "Blogs Entry Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.edit(
			entryComment = "Blogs Entry Comment",
			entryCommentEdit = "Blogs Entry Comment Edit");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Blogs Entry Comment Edit",
			userFullName = "Test Test (You)");
	}

	@description = "This checks that the title and content fields of a blog entry can be edited."
	@priority = "5"
	@refactordone
	@uitest
	test CanEditEntry {
		property portal.acceptance = "true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.editEntryPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	@description = "This checks that an entry can be edited in card view"
	@priority = "4"
	@refactordone
	test CanEditEntryInCardView {
		ApplicationDisplayTemplates.selectPortletADT(
			portletName = "Blogs",
			templateName = "Card");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.editContentViaCardViewPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edited",
			entryTitle = "Blogs Entry Title");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewPG(
			entryCardTitle = "Blogs Entry Title",
			entryContent = "Blogs Entry Content Edited");
	}

	@description = "This checks that multiple comments can be edited in a blog entry."
	@priority = "4"
	@refactordone
	test CanEditMultipleComments {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "1st Blog Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "2nd Blog Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.edit(
			entryComment = "1st Blog Comment",
			entryCommentEdit = "1st Blog Comment Edit");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.edit(
			entryComment = "2nd Blog Comment",
			entryCommentEdit = "2nd Blog Comment Edit");
	}

	@description = "This checks that a blog entry can be manually saved as a draft."
	@priority = "5"
	@refactordone
	test CanManuallySaveEntryAsDraft {
		property portal.acceptance = "true";

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This this a use case for LPS-69240. It checks that a blog entry with a URL that duplicates an existing one cannot be published."
	@priority = "4"
	@refactordone
	test CannotAddDuplicateCustomURL {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#ERROR");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_ENTER_A_UNIQUE_TITLE",
			value1 = "The URL title is already in use. Please enter a unique URL title.");
	}

	@description = "This checks that a guest cannot comment on an entry when permissions are removed."
	@priority = "4"
	@refactorneeded
	test CannotCommentAsGuestAfterRemovingPermissions {
		property osgi.module.configuration.file.names = "com.liferay.portal.bundle.blacklist.internal.configuration.BundleBlacklistConfiguration.config";
		property osgi.module.configurations = "blacklistBundleSymbolicNames=&quot;com.liferay.saml.addon.keep.alive.web,com.liferay.saml.api,com.liferay.saml.impl,com.liferay.saml.opensaml.integration,com.liferay.saml.persistence.api,com.liferay.saml.persistence.service,com.liferay.saml.web,saml-hook&quot;";

		task ("Add a comment to a blog as a guest and ensure comments can still be added.") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			User.logoutPG();

			Navigator.gotoPage(pageName = "Blogs Page");

			Comments.addPGAsGuest(
				entryComment = "Guest Blogs Entry Comment",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userEmailAddress = "guest@liferay.com",
				userFirstName = "Guestfn",
				userLastName = "Guestln");

			BlogsNavigator.openToBlogEntry(
				entryTitle = "Blogs Entry Title",
				layoutName = "Blogs Page",
				siteURLKey = "guest");

			Comments.viewPG(
				commentCount = "1",
				entryComment = "Guest Blogs Entry Comment",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userFullName = "Guestfn Guestln");

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			AssertElementPresent(locator1 = "CKEditor#BODY");

			SelectFrame(value1 = "relative=top");
		}

		task ("Remove permissions for guest and ensure comments cannot be added anymore.") {
			User.loginUserPG(
				password = "test",
				userEmailAddress = "test@liferay.com");

			Navigator.gotoPage(pageName = "Blogs Page");

			BlogsNavigator.gotoBlogsEntryPermissionsPG(entryTitle = "Blogs Entry Title");

			Role.removePermissionPG(
				entryTitle = "Blogs Entry Title",
				pageName = "Blogs Page",
				permissionDefinitionKey = "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX",
				roleTitle = "Guest");

			User.logoutPG();

			BlogsNavigator.openToBlogEntry(
				entryTitle = "Blogs Entry Title",
				layoutName = "Blogs Page",
				siteURLKey = "guest");

			Comments.viewPG(
				commentCount = "1",
				entryComment = "Guest Blogs Entry Comment",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				noAddPermissions = "true",
				userFullName = "Guestfn Guestln");

			AssertElementNotPresent(locator1 = "CKEditor#BODY");
		}
	}

	@description = "This checks that a Blog cannot be published if the content field is null."
	@priority = "4"
	@refactordone
	test CannotPublishWithoutContent {
		Blogs.addWithInvalidContent(
			entryInvalidContent = "",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a Blog cannot be published if the title field is null."
	@priority = "4"
	@refactordone
	test CannotPublishWithoutTitle {
		Blogs.addWithInvalidTitle(
			entryContent = "Blogs Entry Content",
			entryInvalidTitle = "");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "");
	}

	@description = "This checks that Blogs added and scoped to a page will not be seen in other pages."
	@priority = "4"
	@refactordone
	test CannotViewBlogEntryScopedToAnotherPage {
		task ("Set up a blog widget on another page scoped to that page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Blogs Page2");

			JSONLayout.addWidgetToPublicLayout(
				column = "1",
				groupName = "Guest",
				layoutName = "Blogs Page2",
				widgetName = "Blogs");

			Navigator.gotoPage(pageName = "Blogs Page2");

			Portlet.selectScopePG(
				portletName = "Blogs",
				scope = "Blogs Page2");

			Navigator.gotoPage(pageName = "Blogs Page2");

			Blogs.addEntry(
				entryContent = "Blogs Entry2 Content",
				entryTitle = "Blogs Entry2 Title");
		}

		task ("Check that the blog entry added in the second page does not appear in the first page and vice-versa") {
			Navigator.gotoPage(pageName = "Blogs Page");

			BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Title");

			Blogs.addEntry(
				entryContent = "Blogs Entry1 Content",
				entryTitle = "Blogs Entry1 Title");

			Portlet.viewTitle(portletName = "Blogs");

			Navigator.gotoPage(pageName = "Blogs Page2");

			BlogsEntry.viewNoPG(entryTitle = "Blogs Entry1 Title");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry2 Content",
				entryTitle = "Blogs Entry2 Title");

			Portlet.viewTitle(portletName = "Blogs (Blogs Page2)");
		}

		task ("Check that the entry scoped to the second blog page disappears if the scope is changed to the site") {
			Navigator.gotoPage(pageName = "Blogs Page2");

			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			Portlet.selectScopePG(
				portletName = "Blogs",
				scope = "${siteName}");

			Navigator.gotoPage(pageName = "Blogs Page2");

			BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Title");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry1 Content",
				entryTitle = "Blogs Entry1 Title");

			Portlet.viewTitle(portletName = "Blogs");
		}
	}

	@description = "This checks that a user without permissions cannot view a draft entry from an admin."
	@priority = "3"
	@refactordone
	test CannotViewDraftWithoutPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that an entry cannot be viewed by a guest once permissions are removed."
	@priority = "4"
	@refactordone
	test CannotViewEntryAsGuestWhenPermissionsAreRemoved {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.removeViewPermissionsPG(
			entryTitle = "Blogs Entry2 Title",
			roleTitle = "Guest");

		User.logoutPG();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Content");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");
	}

	@description = "This is a use case for LPS-69240. It checks that the custom URL can be remembered after changing to auto."
	@priority = "4"
	@refactordone
	test CanRememberCustomURLAfterSwitchingBackFromAuto {
		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		AssertChecked(locator1 = "Radio#AUTOMATIC_URL");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url");

		Check(locator1 = "Radio#AUTOMATIC_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url");
	}

	@description = "This ensures that the cover image can be removed from the blog entry."
	@priority = "4"
	@refactordone
	test CanRemoveCoverImageFromEntry {
		var imageId	= JSONBlog.uploadBlogImage(
			groupName = "Guest",
			sourceFileName = "Document_1.jpg");

		JSONBlog.addEntryWithImage(
			coverImageId = "${imageId}",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			groupName = "Guest");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Guest",
			siteURLKey = "guest");

		BlogsEntry.removeCoverImage(coverImageName = "Document_1.jpg");

		PortletEntry.publish();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertElementNotPresent(
			key_coverImageName = "Document_1.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE_UNPUBLISHED");

		Navigator.gotoPage(pageName = "Blogs Page");

		AssertElementNotPresent(
			key_uploadFileName = "Document_1.jpg",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");
	}

	@description = "This is a usecase for LPS-83229. This is the only small image test for blogs."
	@priority = "5"
	@refactordone
	test CanRemoveSmallImageFromEntry {
		property portal.acceptance = "true";
		property testray.component.names = "WYSIWYG";

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry with Small Image");

		BlogsEntry.addSmallImage(
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry with Small Image",
			groupName = "Guest",
			siteURLKey = "guest");

		BlogsEntry.removeSmallImage(uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry with Small Image",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertElementNotPresent(
			key_smallImage = "Document_1.jpg",
			locator1 = "BlogsEntry#SMALL_IMAGE");

		AssertTextEquals(
			locator1 = "Button#SELECT_FILE_SMALL_IMAGE",
			value1 = "Select File");
	}

	@description = "This ensures that the small image can be replaced."
	@priority = "4"
	@refactorneeded
	test CanReplaceSmallImage {
		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addSmallImage(
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Guest",
			siteURLKey = "guest");

		BlogsEntry.addSmallImage(
			browseImage = "true",
			navTab = "Documents and Media",
			uploadFileName = "Document_2.jpg");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		AssertVisible(
			key_imageFileName = "Document_2.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE",
			value1 = "Document_2.jpg");
	}

	@description = "This checks that a blog entry that is scheduled is in a pre-publish status in the UI."
	@priority = "4"
	@refactordone
	test CanScheduleEntry {
		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.scheduleBlogEntry();

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry can be searched for by its content."
	@priority = "4"
	@refactordone
	test CanSearchForEntryByContent {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Unique Content",
			entryTitle = "Blogs Entry Title");

		for (var searchTerm : list "Unique,Unique Content") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}
	}

	@description = "This checks that a blog entry can be searched for by its title."
	@priority = "4"
	@refactordone
	test CanSearchForEntryByTitle {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Unique Content",
			entryTitle = "Blogs Entry Title");

		for (var searchTerm : list "Blogs,Blogs Entry Title") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}
	}

	@description = "This checks that exact content search returns an entry when it includes the entire phrase being queried."
	@priority = "4"
	@refactordone
	test CanSearchForExactStringInContent {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		for (var searchTerm : list ""Blogs","Blogs Entry Content"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}

		for (var searchTerm : list ""Blogs1","Blogs1 Entry1 Content1"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewNoSearchResults(searchTerm = "${searchTerm}");
		}
	}

	@description = "This checks that exact title search returns an entry when it includes the entire phrase being queried."
	@priority = "4"
	@refactordone
	test CanSearchForExactStringInTitle {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		for (var searchTerm : list ""Blogs","Blogs Entry Title"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}

		for (var searchTerm : list ""Blogs1","Blogs Entry Title1"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewNoSearchResults(searchTerm = "${searchTerm}");
		}
	}

	@description = "This checks that a blog comment can be subscribed to."
	@priority = "3"
	@refactordone
	test CanSubscribeToComment {
		property test.name.skip.portal.instance = "PGBlogs#CanSubscribeToComment";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.subscribePG();

		Comments.viewSubscribedPG();
	}

	@description = "This is a usecase for LPS-82025"
	@priority = "5"
	@refactorneeded
	test CanUpdateFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url-1");

		PortletEntry.publish();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			friendlyURL = "custom url 1",
			groupName = "Guest",
			siteURLKey = "guest");

		Panel.expandPanel(panel = "Configuration");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url-2");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/custom-url-1");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/custom-url-2");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a cover image can be uploaded and published in a blog"
	@priority = "3"
	@refactordone
	@uitest
	test CanUploadAndPublishCoverImage {
		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		Button.clickPublish();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			uploadFileName = "Document_1.jpg");
	}

	@description = "This test covers LPS-130735. It ensures that the caption of cover image can be viewed in blogs when the small image is removed."
	@priority = "3"
	@refactorneeded
	test CanViewCaptionFieldAfterRemovingSmallImage {
		Blogs.addEntryWithUploadedCoverImage(
			captionField = "true",
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		BlogsEntry.addSmallImage(
			navTab = "Documents and Media",
			uploadFileName = "Document_2.jpg");

		PortletEntry.publish();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Guest",
			siteURLKey = "guest");

		BlogsEntry.removeSmallImage(
			images = "true",
			uploadFileName = "Document_2.jpg");

		AssertElementPresent(locator1 = "BlogsEntry#ENTRY_COVER_IMAGE_CAPTION");

		PortletEntry.publish();
	}

	@description = "This checks that an administrator will receive a notification when a blog entry is flagged."
	@priority = "4"
	@refactordone
	test CanViewEmailNotificationForFlaggedEntry {
		property test.smtp.server.enabled = "true";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.flagPG(
			flagReason = "Spam",
			siteName = "${siteName}",
			userEmailAddress = "userea@liferay.com");

		MockMock.viewMail(
			asset = "Inappropriate Content Flagged in ${siteName}",
			content = "flagged as inappropriate by Test Test",
			recipient = "Test Test",
			sender = "Joe Bloggs",
			subject = "Inappropriate Content Flagged in ${siteName}");
	}

	@priority = "5"
	@refactordone
	test CanViewEmailNotificationsAfterAddingAndUpdatingEntry {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.smtp.server.enabled = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.subscribePG();

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		MockMock.viewMail(
			asset = "Blogs Entry",
			content = "Blogs Entry Content",
			recipient = "userfn userln",
			sender = "Joe Bloggs",
			subject = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.editEntryPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit",
			sendEmailEntryUpdated = "true");

		MockMock.viewMail(
			asset = "Blogs Entry",
			content = "Blogs Entry Title Edit",
			recipient = "userfn userln",
			sender = "Joe Bloggs",
			subject = "Blogs Entry Title Edit");
	}

	@description = "Basic test that ensures reading time displays when enabled."
	@priority = "5"
	@refactordone
	test CanViewReadingTime {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PGBlogs#CanViewReadingTime";

		BlogsConfiguration.enableReadingTime();

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			readingTime = "Less Than a Minute Read");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			readingTime = "Less Than a Minute Read");
	}

	@description = "This is a use case for LPS-69240. It checks that when blog entries are duplicated their custom URL's are unique."
	@priority = "4"
	@refactordone
	test ShouldHaveUniqueURLForDuplicateEntry {
		var portalURL = PropsUtil.get("portal.url");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/blogs-entry-title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/blogs-entry-title-1");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a string that is over 255 characters in the title will be trimmed to 255."
	@priority = "4"
	@refactordone
	test ShouldTrimTitleTo255CharactersWhenOver {
		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "|||||||||1|||||||||2|||||||||3|||||||||4|||||||||5|||||||||6|||||||||7|||||||||8|||||||||9||||||||10||||||||11||||||||12||||||||13||||||||14||||||||15||||||||16||||||||17||||||||18||||||||19||||||||20||||||||21||||||||22||||||||23||||||||24||||||||25||||XX");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-x",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "|||||||||1|||||||||2|||||||||3|||||||||4|||||||||5|||||||||6|||||||||7|||||||||8|||||||||9||||||||10||||||||11||||||||12||||||||13||||||||14||||||||15||||||||16||||||||17||||||||18||||||||19||||||||20||||||||21||||||||22||||||||23||||||||24||||||||25||||X");
	}

	@description = "This is a usecase for LPS-66970. It checks that both the old and new blog URLs lead to the current entry."
	@priority = "5"
	@refactordone
	test ViewBlogEntryViaEditedCustomURL {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "/web/guest/blogs-page/-/blogs/blogs-entry-title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Guest",
			siteURLKey = "guest");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomURL(customURL = "this-should-redirect-to-the-previous-entry");

		SelectFrameTop();

		PortletEntry.publish();

		User.logoutPG();

		Navigator.openSpecificURL(url = "/web/guest/blogs-page/-/blogs/this-should-redirect-to-the-previous-entry");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "/web/guest/blogs-page/-/blogs/blogs-entry-title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "View the related assets in Blogs."
	@priority = "4"
	@uitest
	test ViewRelatedAssetsInBlogs {
		task ("Add the first blogs entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry1 Content",
				entryTitle = "Blogs Entry1 Title");
		}

		task ("Add the second blogs entry and select the first one as related assets") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			BlogsNavigator.gotoAddEntry();

			BlogsEntry.addEntryContent(
				entryContent = "Blogs Entry2 Content",
				entryTitle = "Blogs Entry2 Title");

			RelatedAssets.selectAsset(
				assetTitle = "Blogs Entry1 Title",
				assetType = "Blogs Entry");

			PortletEntry.publish();
		}

		task ("View the related assets in Blogs") {
			Navigator.gotoPage(pageName = "Blogs Page");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry1 Content",
				entryTitle = "Blogs Entry1 Title");

			BlogsEntry.viewPG(
				entryContent = "Blogs Entry1 Content",
				entryTitle = "Blogs Entry1 Title");

			AssertElementPresent(
				locator1 = "Relatedassets#ASSET_ENTRY_STICKER",
				rowNumber = "1");

			AssertElementNotPresent(
				locator1 = "Relatedassets#ASSET_ENTRY_STICKER",
				rowNumber = "2");

			AssertElementNotPresent(
				locator1 = "Relatedassets#ASSET_TITLE",
				rowNumber = "2");

			AssertElementNotPresent(
				locator1 = "Relatedassets#ASSET_EDIT",
				rowNumber = "2");

			Navigator.gotoPage(pageName = "Blogs Page");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry2 Content",
				entryTitle = "Blogs Entry2 Title");

			BlogsEntry.viewPG(
				entryContent = "Blogs Entry2 Content",
				entryTitle = "Blogs Entry2 Title");

			BlogsEntry.viewRelatedAssetPG(
				assetTitle = "Blogs Entry1 Title",
				assetType = "Blogs Entry",
				entryTitle = "Blogs Entry2 Title");

			AssertElementPresent(
				locator1 = "Relatedassets#ASSET_ENTRY_STICKER",
				rowNumber = "1");

			AssertElementNotPresent(
				locator1 = "Relatedassets#ASSET_ENTRY_STICKER",
				rowNumber = "2");

			AssertElementNotPresent(
				locator1 = "Relatedassets#ASSET_TITLE",
				rowNumber = "2");

			AssertElementNotPresent(
				locator1 = "Relatedassets#ASSET_EDIT",
				rowNumber = "2");
		}
	}

}