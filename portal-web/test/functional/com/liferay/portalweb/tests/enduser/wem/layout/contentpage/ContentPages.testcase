@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-134599. The fragmentElementId variable will have the same value with the id of wrapping div in a fragment on page."
	@priority = "4"
	test AddFragmentWithFreemarkerVariableToContentPage {
		task ("Add a fragment collection") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a fragment with fragmentElementId and fragmentEntryLinkNamespace freemarker variables") {
			var newLine = '''
''';

			var htmlSnippet = '''
<div class="gf-1">
	<h1>${fragmentElementId}</h1>
	<h1>${fragmentEntryLinkNamespace}</h1>
</div>
			''';
			var htmlSnippet = StringUtil.regexReplaceAll("${htmlSnippet}", "${newLine}", "");

			var fragmentEntryId = JSONFragment.addSection(
				collectionName = "Collection Name",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Fragment Name");
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");
		}

		task ("Get the fragmentEntryLinkNamespace") {
			var fragmentEntryLinkNamespace = selenium.getText("xpath=(//div[@class='gf-1']/h1)[2]");

			TestUtils.assertNotEquals(
				actual = "${fragmentEntryLinkNamespace}",
				expected = "");
		}

		task ("View the id of wrapping div equals fragment-fragmentEntryId-fragmentEntryLinkNamespace equals the fragmentElementId") {
			AssertAttributeValue(
				attribute1 = "id",
				locator1 = "//div[@class='gf-1']/parent::div",
				value1 = "fragment-${fragmentEntryId}-${fragmentEntryLinkNamespace}");

			var fragmentElementId = selenium.getText("xpath=(//div[@class='gf-1']/h1)[1]");

			TestUtils.assertEquals(
				actual = "${fragmentElementId}",
				expected = "fragment-${fragmentEntryId}-${fragmentEntryLinkNamespace}");
		}
	}

	@description = "Users can only edit content pages in edit mode."
	@priority = "5"
	test CannotEditInViewMode {
		property portal.acceptance = "true";

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the page cannot be edited in 'View Mode' by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Assert the content page can be edited in 'Edit Mode' by asserting the fragments side bar is present") {
			AssertVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}

		task ("Navigate back to the content page") {
			PageEditor.clickBack();
		}

		task ("Assert the page cannot be edited by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}
	}

	@description = "This is a test for LPS-125985. The Page Creater can configure configuration template of widget in page editor."
	@priority = "5"
	test ConfigureConfigurationTemplateOfAssetPublisherInPageEditor {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add an Asset Publisher widget to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("View the web content shown in Asset Publisher") {
			AssertVisible(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			AssertTextEquals(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Web Content Content");
		}

		task ("View the rating star not shown in Asset Publisher") {
			AssertElementNotPresent(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertElementNotPresent(locator1 = "Ratings#AVERAGE_STAR");
		}

		task ("Enable the Ratings in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Ratings");

			IFrame.closeFrame();
		}

		task ("View the rating star shown in Asset Publisher") {
			AssertVisible(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertVisible(locator1 = "Ratings#AVERAGE_STAR");
		}

		task ("Save the current configuration as template") {
			AssetPublisherPortlet.saveConfigurationTemplatePG(configurationName = "Asset Publisher Configuration Template");

			IFrame.closeFrame();
		}

		task ("Remove the Asset Publisher") {
			PageEditor.removeFragment(fragmentName = "Asset Publisher");
		}

		task ("Add an Asset Publisher widget to page") {
			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("View the web content shown in Asset Publisher") {
			AssertVisible(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			AssertTextEquals(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Web Content Content");
		}

		task ("View the rating star not shown in Asset Publisher") {
			AssertElementNotPresent(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertElementNotPresent(locator1 = "Ratings#AVERAGE_STAR");
		}

		task ("Apply the new configure template") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.restoreConfigurationTemplatePG(configurationName = "Asset Publisher Configuration Template");

			IFrame.closeFrame();
		}

		task ("View the rating star shown in Asset Publisher") {
			AssertVisible(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertVisible(locator1 = "Ratings#AVERAGE_STAR");
		}
	}

	@description = "This is a test for LPS-106813. Can set permissions for widgets in content page."
	@priority = "5"
	test ConfigurePermissionsOfAssetPublisher {
		property portal.acceptance = "true";

		task ("Add an Asset Publisher widget to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Configure permissions of Asset Publisher") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			AssertVisible(
				key_menuItem = "Permissions",
				locator1 = "MenuItem#ANY_MENU_ITEM");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Uncheck(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			IFrame.closeFrame();
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the ellipsis button of Asset Publisher is unavailable in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
		}
	}

	@description = "This is a test for LPS-78726. Discarding a draft will revert a content page back to its most recent published version."
	@priority = "5"
	test DiscardContentPageDraft {
		property portal.acceptance = "true";

		task ("Assert the Discard Draft button starts off not shown but Publish button starts off enabled") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Discard the draft") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			PageEditor.clickDiscardDraft(pageName = "Test Content Page Name");
		}

		task ("Assert the Title fragment is no longer present") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Publish the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Discard Draft button is not shown but Publish button is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Edit inline content of Heading") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Discard the draft") {
			MenuItem.clickNoError(menuItem = "Discard Draft");

			AssertConfirm(value1 = "Are you sure you want to discard current draft and apply latest published changes?");

			Alert.viewSuccessMessage();
		}

		task ("Assert the inline content is back to default") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Paragraph fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Discard the draft") {
			MenuItem.clickNoError(menuItem = "Discard Draft");

			AssertConfirm(value1 = "Are you sure you want to discard current draft and apply latest published changes?");

			Alert.viewSuccessMessage();
		}

		task ("Assert the Paragraph fragment has been removed") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_fragmentName = "Paragraph",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			SitePages.clickPageMenu(pageName = "Test Content Page Name");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}
	}

	@description = "This is a test for LPS-134844. Fragments can be hidden and shown."
	@priority = "5"
	@uitest
	test FragmentsCanBeHiddenAndShown {
		property portal.acceptance = "true";

		task ("Add a widgets to the page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Blogs");
		}
		task ("Add fragments to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Blogs");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML",
				targetFragmentName = "Heading");
		}

		task ("Hide Blogs from topper options") {
			PageEditor.clickHideFragment(fragmentName = "Blogs");
		}
		task ("Hide Button fragment from fragment options") {
			PageEditor.clickHideFragmentViaPageStyles(fragmentName = "Button");
		}
		task ("Hide Heading fragment from the sidebar fragment tree") {
			PageEditor.clickHideFragmentViaPageStructure(fragmentName = "Heading");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();

			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Assert only html fragment is shown") {
			AssertTextNotPresent(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No entries were found.");

			AssertTextNotPresent(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextNotPresent(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Go Somewhere");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "html",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "HTML Example");
		}

		task ("Publish and enter view mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert only html fragment is shown") {
			AssertTextNotPresent(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No entries were found.");

			AssertTextNotPresent(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextNotPresent(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Go Somewhere");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "html",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "HTML Example");
		}

		task ("Edit the page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}
		task ("Unhide Blogs from the sidebar fragment tree") {
			PageEditor.clickUnhideFragmentViaPageStructure(fragmentName = "Blogs");
		}
		task ("Unhide Heading from fragment options") {
			PageEditor.clickUnhideFragmentViaPageStyles(fragmentName = "Heading");
		}
		task ("Unhide Button from sidebar fragment tree") {
			PageEditor.clickUnhideFragmentViaPageStructure(fragmentName = "Button");
		}

		task ("Publish and enter view mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the four fragments are shown") {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No entries were found.");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Go Somewhere");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "html",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "HTML Example");
		}
	}

	@description = "This is a test for LPS-134844. Groups of fragments can be hidden and shown and Fragments added to a fragment with nested hidden fragment should be shown."
	@priority = "4"
	@uitest
	test GroupsOfFragmentsCanBeHiddenAndShown {
		task ("Add a container and 4 headings inside") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.addElementToContainer(
				navTab = "Widgets",
				portletName = "Blogs");

			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "HTML",
				navTab = "Fragments",
				targetElementName = "Blogs");

			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Button",
				navTab = "Fragments",
				targetElementName = "HTML");

			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments",
				targetElementName = "Button");
		}

		task ("Hide Blogs and HTML") {
			PageEditor.clickHideFragmentViaPageStructure(fragmentName = "Blogs");
			PageEditor.clickHideFragmentViaPageStructure(fragmentName = "HTML");
		}

		task ("Hide the container") {
			PageEditor.clickHideFragment(fragmentName = "Container");
		}

		task ("Assert no fragment or widget is shown") {
			PageEditor.viewNoFragment(fragmentName = "Container");
			PageEditor.viewNoFragment(fragmentName = "Blogs");
			PageEditor.viewNoFragment(fragmentName = "HTML");
			PageEditor.viewNoFragment(fragmentName = "Button");
			PageEditor.viewNoFragment(fragmentName = "Heading");
		}

		task ("From the sidebar fragment tree, show HTML and Button") {
			PageEditor.clickUnhideFragmentViaPageStructure(fragmentName = "HTML");

			PageEditor.clickHideFragmentViaPageStructure(fragmentName = "Button");
		}

		task ("Assert no fragment or widget is shown") {
			PageEditor.viewNoFragment(fragmentName = "Container");
			PageEditor.viewNoFragment(fragmentName = "Blogs");
			PageEditor.viewNoFragment(fragmentName = "HTML");
			PageEditor.viewNoFragment(fragmentName = "Button");
			PageEditor.viewNoFragment(fragmentName = "Heading");
		}

		task ("Unhide the container") {
			PageEditor.clickUnhideFragmentViaPageStructure(fragmentName = "Container");
		}

		task ("Assert only Heading and HTML fragments are shown") {
			AssertTextNotPresent(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No entries were found.");

			AssertTextNotPresent(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Go Somewhere");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "html",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "HTML Example");
		}

		task ("Add fragment and check it's shown") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				dragAndDropToUp = "true",
				fragmentName = "Paragraph",
				navTab = "Fragments",
				targetElementName = "Blogs");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "A paragraph is a self-contained unit of a discourse");
		}
	}

	@description = "This is a test for LPS-109169. Topper only visible when the element is selected but not hover."
	@priority = "5"
	@uitest
	test HeaderOnlyShownWhenElementSelected {
		property portal.acceptance = "true";

		task ("Add a Heading fragment and an Asset Publisher portlet to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Heading");
		}

		task ("Assert only header of Heading shown when Heading selected") {
			if (IsNotVisible(key_fragmentName = "Heading", locator1 = "Fragment#FRAGMENT_HEADER")) {
				Click.clickNoWaitForVisible(
					key_fragmentName = "Heading",
					locator1 = "Fragment#FRAGMENT_HEADER");
			}

			AssertVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			MouseOver.mouseOverInvisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}

		task ("Assert only header of Asset Publisher shown when Asset Publisher selected") {
			Click.clickNoWaitForVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			MouseOver.mouseOverInvisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}
	}

	@description = "This is a test for LPS-134844. Fragments hidden in pages templates appear as hidden in pages that use it and visibility can be changed."
	@priority = "4"
	test HiddenFragmentsInPagesTemplatesAppearHiddenInPages {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add two heading fragemtns") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Heading Example 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				index = "2",
				text = "Heading Example 2");
		}

		task ("Hide Heading Example 1") {
			PageEditor.clickHideFragmentViaPageStructure(
				fragmentName = "Heading",
				index = "1");
		}
		task ("Publish page template") {
			PageEditor.clickPublish();
		}

		task ("Add a page based on content page template") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Assert Heading Example 1 is not shown") {
			AssertTextNotPresent(
				key_fragmentName = "heading",
				key_index = "1",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT_INDEX",
				value1 = "Heading Example 1");

			AssertTextEquals(
				key_fragmentName = "heading",
				key_index = "2",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT_INDEX",
				value1 = "Heading Example 2");
		}

		task ("Show Heading Example 1") {
			PageEditor.clickUnhideFragmentViaPageStructure(
				fragmentName = "Heading",
				index = "1");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();

			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Assert both Heading Example 1 and Heading Example 2 are shown") {
			for (var n : list "1,2") {
				AssertTextEquals(
					key_fragmentName = "heading",
					key_index = "${n}",
					locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT_INDEX",
					value1 = "Heading Example ${n}");
			}
		}
	}

	@description = "This is a test for LPS-106778. Reorganize fragments in page editor."
	@priority = "5"
	@uitest
	test ReorganizeFragmentsInPageEditor {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View Heading frgament is on top of Button fragment") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = "1");

			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = "2");
		}

		task ("Move the fragment") {
			PageEditor.clickConfigurableField(fragmentName = "Button");

			DragAndDrop.javaScriptDragAndDropToUp(
				id = "element-text",
				key_dragFragmentName = "Button",
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER_DRAG_HANDLER",
				locator2 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				value1 = "");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the Button fragment is on top of Heading frgament") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = "1");

			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = "2");
		}
	}

	@description = "This is a test for LPS-129536. View the configuration settings of widget after execute Clean Up Orphaned Theme Portlet Preferences."
	@priority = "4"
	test ViewConfigurationSettingsOfWidgetAfterCleanUpOrphanedThemePortletPreferences {
		property test.name.skip.portal.instance = "ContentPages#ViewConfigurationSettingsOfWidgetAfterCleanUpOrphanedThemePortletPreferences";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add an Asset Publisher widget to the page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Change the display template to Title List") {
			Portlet.gotoPortletOptions(
				portletName = "Asset Publisher",
				portletOption = "Configuration");

			AssetPublisherPortlet.configureDisplayTemplatePG(displayTemplate = "Title List");

			IFrame.closeFrame();
		}

		task ("View web content displayed at Title List in Asset Publisher at edit mode") {
			AssertTextEquals.assertText(
				locator1 = "Relatedassets#ASSET_ROW_ENTRY_TITLE",
				rowNumber = "1",
				value1 = "Web Content Title");

			PageEditor.clickPublish();
		}

		task ("View web content displayed at Title List in Asset Publisher at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertTextEquals.assertText(
				locator1 = "Relatedassets#ASSET_ROW_ENTRY_TITLE",
				rowNumber = "1",
				value1 = "Web Content Title");
		}

		task ("Execute Clean Up Orphaned Theme Portlet Preferences in Server Administration") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Server Administration");

			ServerAdministration.executeServerResourcesActions(actionsDescription = "Clean Up Orphaned Theme Portlet Preferences");
		}

		task ("View web content displayed at Title List in Asset Publisher at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertTextEquals.assertText(
				locator1 = "Relatedassets#ASSET_ROW_ENTRY_TITLE",
				rowNumber = "1",
				value1 = "Web Content Title");
		}

		task ("View web content displayed at Title List in Asset Publisher at edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertTextEquals.assertText(
				locator1 = "Relatedassets#ASSET_ROW_ENTRY_TITLE",
				rowNumber = "1",
				value1 = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-81870. In edit mode the page should still show the elements of the page that are not from the page itself, like the header, footer, or elements defined by the theme."
	@priority = "5"
	@uitest
	test ViewEditModeHeaderFooterTheme {
		property portal.acceptance = "true";

		task ("Add a widget page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Assert the header and footer are disabled") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");
		}

		task ("Assert the header and footer contain the elements that are part of the header and footer") {
			AssertVisible(locator1 = "Home#DEFAULT_LOGO");

			AssertTextEquals(
				locator1 = "Home#SITE_NAME",
				value1 = "Test Site Name");

			AssertVisible(
				key_infoMessage = "This search bar is not visible to users yet.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertVisible(locator1 = "UserBar#USER_AVATAR_IMAGE");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER",
				value1 = "Powered By Liferay");
		}

		task ("Assert the navigation menu widget with the previously created widget page also displays in the disabled part of the header") {
			AssertVisible(
				key_pageName = "Test Widget Page Name",
				locator1 = "Home#PAGE");
		}

		task ("Assert clicking on the disabled header will cause a popover message explaining that the header is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the header") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}

		task ("Assert clicking on the disabled footer will cause a popover message explaining that the footer is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the footer") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}
	}

	@description = "This is a test for LPS-130083. View the ellipsis button on the topper of fragment when the fragment is inside a nested Grid."
	@priority = "4"
	@uitest
	test ViewEllipsisButtonOnTheTopperOfFragmentInsideNestedGrid {
		task ("Add a Grid element to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a second Grid to the second module of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "2",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Add a Heading fragment to the first module of inner Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = "1",
				fragmentName = "Heading",
				navTab = "Fragments",
				position = "2");
		}

		task ("Add a Button fragment to the second module of inner Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = "2",
				fragmentName = "Button",
				navTab = "Fragments",
				position = "2");
		}

		task ("Add a Paragraph fragment to the third module of inner Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = "3",
				fragmentName = "Paragraph",
				navTab = "Fragments",
				position = "2");
		}

		task ("View the ellipsis button is visible on topper of fragments inside inner Grid") {
			for (var fragmentName : list "Heading,Button,Paragraph") {
				PageEditor.clickConfigurableField(fragmentName = "${fragmentName}");

				AssertVisible(
					key_fragmentName = "${fragmentName}",
					locator1 = "Fragment#FRAGMENT_HEADER_ELLIPSIS");
			}
		}
	}

	@description = "This is a test for LPS-104629. The header of fragment selected can reach the border of the management toolbar."
	@priority = "5"
	@uitest
	test ViewHeaderOfFragmentMoveInsideBodyWhenReachTheManagementToolbar {
		property portal.acceptance = "true";

		task ("Add Image, Slider, Card and HTML fragments to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Slider",
				targetFragmentName = "Card");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Slider");
		}

		task ("Assert Header of Card is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click.clickNoWaitForVisible(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementNotPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Card moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Image",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

	@description = "This is a test for LPS-104629. The header of widget selected can reach the border of the management toolbar."
	@priority = "4"
	@uitest
	test ViewHeaderOfWidgetMoveInsideBodyWhenReachTheManagementToolbar {
		task ("Add My Sites, Documents and Media, Blogs and Asset Publisher widgets to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");

			PageEditor.addWidget(
				portletName = "Blogs",
				targetFragmentName = "Asset Publisher");

			PageEditor.addWidget(
				portletName = "Documents and Media",
				targetFragmentName = "Blogs");

			PageEditor.addWidget(
				portletName = "My Sites",
				targetFragmentName = "Documents and Media");
		}

		task ("Assert Header of Blogs is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click.clickNoWaitForVisible(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementNotPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Blogs moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "My Sites",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

	@description = "This is for LPS-106813. Widgets inherited from content page template will inherit permissions set in content page template."
	@priority = "4"
	test ViewPermissionsOfAssetPublisherInheritedFromContentPageTemplate {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add an Asset Publisher widget to the content page template") {
			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Configure permissions of Asset Publisher") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Uncheck(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			PageEditor.clickPublish();
		}

		task ("Add a page based on content page template") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("View inherited permissions of Asset Publisher") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertNotChecked(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");
		}
	}

	@description = "This is for LPS-106813. Widgets inherited from custom master will inherit permissions set in custom master."
	@priority = "4"
	test ViewPermissionsOfAssetPublisherInheritedFromMasterPageTemplate {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");
		}

		task ("Add an Asset Publisher widget to the master page template") {
			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addWidget(
				dropTarget = "Header",
				portletName = "Asset Publisher",
				scope = "Master");
		}

		task ("Configure the permissions of Asset Publisher") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			AssertVisible(
				key_menuItem = "Permissions",
				locator1 = "MenuItem#ANY_MENU_ITEM");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Uncheck(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			AssertNotChecked(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Apply the master page template to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Navigator.gotoNavTab(navTab = "Master");

			MastersPageTemplates.selectMasterViaPageDesignOptions(masterLayoutName = "Custom Masters Page Template");

			AssertVisible(
				key_assetTitle = "WC WebContent Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			PageEditor.clickPublish();
		}

		task ("Assert the Asset Publisher is invisible to Guest") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			User.logoutPG();

			Navigator.openSiteURL(siteName = "Test Site Name");

			AssertElementNotPresent(
				key_assetTitle = "WC WebContent Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			Alert.viewErrorMessage(errorMessage = "You do not have the roles required to access this portlet.");
		}
	}

}