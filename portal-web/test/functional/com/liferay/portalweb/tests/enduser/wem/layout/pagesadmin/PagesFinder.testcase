@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Default setup") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create new Sites") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is the test for LPS-103104. Can add a child page via page tree panel."
	@priority = "5"
	test AddChildPageViaPageFinder {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		Navigator.openSiteURL(siteName = "Test Site Name");

		PagesFinder.goToFindAPage();

		PagesFinder.addPublicChildPage(
			childPageName = "Test Child Page",
			parentPageName = "Test Page Name");

		PagesFinder.navigateToChildPage(
			childPageName = "Test Child Page",
			parentPageName = "Test Page Name");
	}

	@description = "This is the test for LPS-107774. Can create a Collection Page based on Collections or Collection Providers in Pages Tree panel."
	@priority = "5"
	test AddCollectionPageViaPageFinder {
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Page based on Dynamic Collection via Pages Tree Panel") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			PagesFinder.goToFindAPage();

			PagesFinder.addPublicCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Test Collection Page Name 1",
				tabName = "Collections");

			AssertTextEquals.assertPartialText(
				locator1 = "ControlMenu#PAGE_TYPE",
				value1 = "Collection Page");

			AssertVisible(
				key_elementHeader = "//div[contains(.,'Dynamic Collection') and contains(@id,'fragment-')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Collection Page Name 1");
		}

		task ("Add a Collection Page based on Highest Rated Assets via Pages Tree Panel") {
			PagesFinder.goToFindAPage();

			PagesFinder.addPublicCollectionPage(
				collectionName = "Highest Rated Assets",
				pageName = "Test Collection Page Name 2",
				tabName = "Collection Providers");

			AssertTextEquals.assertPartialText(
				locator1 = "ControlMenu#PAGE_TYPE",
				value1 = "Collection Page");

			AssertVisible(
				key_elementHeader = "//div[contains(.,'Highest Rated Assets') and contains(@id,'fragment-')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Collection Page Name 2");
		}
	}

	@description = "This is a test for LPS-107775. Can add new collections when add a collection page from page tree panel."
	@priority = "5"
	test AddCollectionViaAddingCollectionPage {
		property portal.acceptance = "true";

		ProductMenu.gotoSite(site = "Test Site Name");

		PagesFinder.goToFindAPage();

		PagesFinder.addPublicCollectionPage(
			collectionName = "Manual Collection Name",
			menuItem = "Manual Collection",
			pageName = "Manual Collection Page Name",
			selectedAsset = "All Types",
			tabName = "Collections");

		PageEditor.clickPublish();

		PagesFinder.addPublicCollectionPage(
			collectionName = "Dynamic Collection Name",
			menuItem = "Dynamic Collection",
			pageName = "Dynamic Collection Page Name",
			selectedAsset = "All Types",
			tabName = "Collections");

		PageEditor.clickPublish();

		PagesFinder.viewPageNameInPagesFinder(pageName = "Manual Collection Page Name");

		PagesFinder.viewPageNameInPagesFinder(pageName = "Dynamic Collection Page Name");
	}

	@description = "This is the test for LPS-103104. Can add pages of different types via page tree panel."
	@priority = "3"
	test AddPagesOfDifferentTypesViaPageFinder {
		ProductMenu.gotoSite(site = "Test Site Name");

		PagesFinder.goToFindAPage();

		PagesFinder.addPublicPage(
			pageName = "Widget Page",
			sitePageType = "Widget Page");

		PagesFinder.addPublicPage(
			pageName = "Panel",
			sitePageType = "Panel");

		PagesFinder.addPublicPage(
			pageName = "Embedded",
			pageTypeURL = "https://www.google.com",
			sitePageType = "Embedded");

		PagesFinder.addPublicPage(
			pageName = "Link to URL",
			pageTypeURL = "https://www.google.com",
			sitePageType = "Link to URL");

		PagesFinder.addPublicPage(
			pageName = "Page Set",
			sitePageType = "Page Set");

		PagesFinder.addPublicPage(
			pageName = "Link to a Page of This Site",
			sitePageType = "Link to a Page of This Site");

		PagesFinder.addPublicContentPage(pageName = "Content Page");

		PageEditor.clickPublish();

		PagesFinder.addPrivatePage(
			pageName = "Private Widget Page",
			sitePageType = "Widget Page");

		PagesFinder.selectPageType(optionValue = "Public Pages");

		for (var pageName : list "Content Page,Embedded,Link to a Page of This Site,Link to URL,Page Set,Panel") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "${pageName}");
		}

		PagesFinder.selectPageType(optionValue = "Private Pages");

		PagesFinder.viewPageNameInPagesFinder(pageName = "Private Widget Page");
	}

	@description = "This is the test for LPS-103104. Can add a widget page via page tree panel."
	@priority = "5"
	test AddPageViaPageFinder {
		property portal.acceptance = "true";

		Navigator.openSiteURL(siteName = "Test Site Name");

		PagesFinder.goToFindAPage();

		PagesFinder.addPublicPage(pageName = "Test Public Page");

		PagesFinder.navigateToPage(pageName = "Test Public Page");
	}

	@description = "This is the test for LPS-116618. Configure page via Page Tree panel."
	@priority = "4"
	test ConfigurePageViaPageFinder {
		task ("Assert Test Page Name is shown in Pages admin") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			AssertVisible(
				key_itemName = "Test Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM");
		}

		task ("Configure page via Page Tree panel") {
			PagesFinder.goToFindAPage();

			PagesFinder.gotoPageEllipsisItem(
				item = "Configure",
				pageName = "Test Page Name");

			Page.editName(pageNameEdit = "New Test Page Name");

			Alert.viewSuccessMessage();
		}

		task ("View the renamed page is shown in Pages admin") {
			Click(locator1 = "Icon#ANGLE_LEFT_BACK");

			AssertVisible(
				key_itemName = "New Test Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM");
		}

		task ("View the renamed page is shown in Page Tree panel") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "New Test Page Name");
		}
	}

	@description = "This is a test for LPS-102544. Can navigate to both public and private pages from pages finder."
	@priority = "5"
	test NavigateToBothPageTypesViaPageFinder {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Portlet Page",
			type = "portlet");

		JSONLayout.addPrivateLayout(
			groupName = "Test Site Name",
			layoutName = "Test Private Page",
			type = "portlet");

		task ("Navigate to Test site Name") {
			Navigator.openSiteURL(siteName = "Test Site Name");
		}

		PagesFinder.goToFindAPage();

		PagesFinder.selectPageType(optionValue = "Private Pages");

		PagesFinder.navigateToPage(pageName = "Test Private Page");

		PagesFinder.selectPageType(optionValue = "Public Pages");

		PagesFinder.navigateToPage(pageName = "Test Portlet Page");
	}

	@description = "This is a test for LPS-102544. Can quickly browse and go to different pages with sidebar tree."
	@priority = "4"
	test NavigateToDifferentPageViaPageFinder {
		task ("Add layouts of various types for the pages finder") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Portlet Page",
				type = "portlet");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Embedded Page",
				type = "embedded");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Full Page Application",
				type = "full_page_application");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Panel Page",
				type = "panel");

			for (var i : list "1,2,3,4") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Default Page ${i}");
			}
		}

		task ("Navigate to Test site Name") {
			Navigator.openSiteURL(siteName = "Test Site Name");
		}

		PagesFinder.goToFindAPage();

		for (var pageName : list "Test Portlet Page,Test Content Page,Test Embedded Page,Test Full Page Application,Test Panel Page,Test Default Page 1,Test Default Page 2,Test Default Page 3,Test Default Page 4") {
			PagesFinder.navigateToPage(pageName = "${pageName}");
		}
	}

	@description = "This is a test for LPS-116428. Can reorganize the pages via Page Tree panel."
	@priority = "4"
	test ReorganizePagesViaPageFinder {
		task ("Access to Page Tree panel in Test Site Name") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Portlet Page",
				type = "portlet");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Embedded Page",
				type = "embedded");

			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToFindAPage();
		}

		task ("Assert the order of Pages in Page Tree panel") {
			var n = "1";

			for (var pageName : list "Test Portlet Page,Test Content Page,Test Embedded Page") {
				AssertVisible(
					key_index = "${n}",
					key_pageName = "${pageName}",
					locator1 = "PagesFinder#TREE_NODE_ITEM");

				var n = ${n} + 1;
			}
		}

		task ("Reorganize the order of Pages in Page Tree panel") {
			DragAndDrop.dragAndDropReorganizeObjects(
				locator1 = "//ul[contains(@class,'tree-container')]/li[contains(@class,'tree-node')][2][contains(.,'Test Content Page')]",
				locator2 = "//ul[contains(@class,'tree-container')]/li[contains(@class,'tree-node')][1][contains(.,'Test Portlet Page')]",
				position = "0,-3");
		}

		task ("Assert the order of Pages in Page Tree panel") {
			var n = "1";

			for (var pageName : list "Test Content Page,Test Portlet Page,Test Embedded Page") {
				AssertVisible(
					key_index = "${n}",
					key_pageName = "${pageName}",
					locator1 = "PagesFinder#TREE_NODE_ITEM");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-90363. Assert that all page types can be found and counted in the pages finder."
	@priority = "5"
	test SearchAllPageTypes {
		property portal.acceptance = "true";

		task ("Add layouts of various types for the pages finder") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Portlet Page",
				type = "portlet");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Embedded Page",
				type = "embedded");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Full Page Application",
				type = "full_page_application");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Panel Page",
				type = "panel");

			for (var i : list "1,2,3,4,5,6") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Default Page ${i}");
			}
		}

		task ("Navigate to Test site Name") {
			Navigator.openSiteURL(siteName = "Test Site Name");
		}

		task ("Type search term in pages finder") {
			PagesFinder.goToFindAPage();

			PagesFinder.inputPageSearch(keyword = "Test");
		}

		task ("Assert that we find all 11 pages within Pages Administration") {
			PagesFinder.viewInPagesAdministration();

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "11 Results for Test");
		}
	}

	@description = "This is a test for LPS-102544. Can search for a page in sidebar."
	@priority = "4"
	test SearchPageAndViewViaSidebar {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Portlet Page",
			type = "portlet");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page",
			type = "content");

		task ("Navigate to Test site Name") {
			Navigator.openSiteURL(siteName = "Test Site Name");
		}

		task ("Type search term in pages finder") {
			PagesFinder.goToFindAPage();

			PagesFinder.inputPageSearch(keyword = '''"Test Portlet Page"''');
		}

		task ("View 1 result via sidebar") {
			AssertVisible(
				key_pageName = "Test Portlet Page",
				locator1 = "PagesFinder#PAGE_SEARCH_RESULT");

			AssertElementNotPresent(
				key_pageName = "Test Content Page",
				locator1 = "PagesFinder#PAGE_SEARCH_RESULT");
		}
	}

}