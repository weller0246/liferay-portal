@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Wiki";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Wiki Test Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Wiki Test Page",
			widgetName = "Wiki");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			WikiPage.tearDownCP();

			WikiNode.tearDownCP();

			Page.tearDownCP();
		}
	}

	@description = "This ensures that the portlet display setting can be configured."
	@priority = "4"
	@refactordone
	test CanConfigurePortletDisplaySettings {
		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		WikiPortlet.viewConfigurationTabs(
			isNotPresent = "NAVIGATION_EMAIL_FROM,NAVIGATION_PAGE_ADDED_EMAIL,NAVIGATION_PAGE_UPDATED_EMAIL,NAVIGATION_RSS",
			isPresent = "SETUP_DISPLAY_SETTINGS_PANEL");

		WikiPortlet.configureDisplaySettings(uncheckSetting = "ENABLE_COMMENTS,ENABLE_COMMENT_RATINGS,ENABLE_PAGE_RATINGS,SHOW_RELATED_ASSETS");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		WikiPortlet.viewDisplaySettings(uncheckedSetting = "ENABLE_COMMENTS,ENABLE_COMMENT_RATINGS,ENABLE_PAGE_RATINGS,SHOW_RELATED_ASSETS");
	}

	@description = "This ensures that a link added with another page URL can navigate to the page after clicking the link."
	@priority = "5"
	@refactordone
	test CanNavigateToOtherPageByEditorLink {
		JSONLayout.addPrivateLayout(
			groupName = "Guest",
			layoutName = "Research Projects");

		JSONLayout.addWidgetToPrivateLayout(
			groupName = "Guest",
			layoutName = "Research Projects",
			widgetName = "Wiki");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		LAR.importPortlet(
			larFileName = "research-projects-update-node.lar",
			mirrorWithOverwriting = "true",
			uploadFrom = "dependencies");

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Organic Research Projects",
			wikiPageTitle = "FrontPage");

		AssertClick(
			locator1 = "WikiEntry#BODY_LINK",
			value1 = "Sweet Potatoes");

		AssertTextEquals(
			locator1 = "Portlet#H3_HEADER",
			value1 = "Sweet Potatoes");
	}

	@description = "This ensures that the front page can be searched out by attachment name."
	@priority = "4"
	@refactordone
	test CanSearchOutPageByAttachmentName {
		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		JSONWiki.updateWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki FrontPage Content",
			wikiPageName = "FrontPage");

		JSONWiki.addAttachmentToWikiPage(
			fileName = "Document_1.txt",
			groupName = "Guest",
			mimeType = "image/jpeg",
			wikiNodeName = "Main",
			wikiPageName = "FrontPage");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiPage.searchPG(searchTerm = "document");

		WikiPage.viewSearchResultsPG(
			wikiAttachment = "true",
			wikiAttachmentBody = "Document_1.txt",
			wikiPageTitle = "FrontPage");
	}

	@description = "This ensures that a wiki page can be searched out by comment."
	@priority = "4"
	@refactordone
	test CanSearchOutPageByComment {
		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		JSONWiki.updateWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki FrontPage Content",
			wikiPageName = "FrontPage");

		JSONWiki.addWikiChildPage(
			groupName = "Guest",
			wikiChildPageContent = "Wiki FrontPage Child Page Content",
			wikiChildPageName = "Wiki FrontPage Child Page Title",
			wikiNodeName = "Main",
			wikiParentPageName = "FrontPage");

		WikiNavigator.openToWikiPage(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki FrontPage Child Page Title");

		WikiPage.addComment(entryComment = "Wiki FrontPage Child Page Comment Body document");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiPage.searchPG(searchTerm = "document");

		WikiPage.viewSearchResultsPG(
			commentBody = "Wiki FrontPage Child Page Comment Body document",
			wikiComment = "true",
			wikiPageTitle = "Wiki FrontPage Child Page Title");
	}

	@description = "This ensures that the Wiki tabs can be viewed in the Breadcrumb widget."
	@priority = "4"
	@refactordone
	test CanViewBreadcrumbViaBreadcrumbWidgetAfterChangingWikiTab {
		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Wiki Test Page",
			widgetName = "Breadcrumb");

		WikiNavigator.gotoWidgetSpecificTabByURL(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			tabURLKey = "recent_changes",
			wikiNodeName = "Main");

		Breadcrumb.viewPG(breadcrumbListVisible = "Wiki Test Page,Recent Changes");

		WikiNavigator.gotoWidgetSpecificTabByURL(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			tabURLKey = "all_pages",
			wikiNodeName = "Main");

		Breadcrumb.viewPG(breadcrumbListVisible = "Wiki Test Page,All Pages");

		WikiNavigator.gotoWidgetSpecificTabByURL(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			tabURLKey = "draft_pages",
			wikiNodeName = "Main");

		Breadcrumb.viewPG(breadcrumbListVisible = "Wiki Test Page,Draft Pages");
	}

	@description = "This test covers LPS-106280. It ensures that the wiki Email content can be edited."
	@priority = "3"
	@refactordone
	test CanViewConfiguredEmailContent {
		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiPortlet.configureEmailCP(
			bodyContent = "[$TO_NAME$], [$PAGE_CONTENT$] This is an edited wiki email. [$FROM_NAME$]",
			pageAddedEmail = "true");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiPortlet.viewEmailCP(
			bodyContent = "[$TO_NAME$], [$PAGE_CONTENT$] This is an edited wiki email. [$FROM_NAME$]",
			pageAddedEmail = "true");
	}

	@description = "This ensures that the script can be escaped."
	@priority = "3"
	@refactordone
	test CanViewEscapedScriptFromHTML {
		WikiNavigator.openToWikiPage(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		WikiPage.editFrontPagePG(wikiPageContentEdit = '''<script>alert(123);</script>''');

		AssertAlertNotPresent();

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@description = "This test ensures that the wiki widget follows W3C accessibility standards."
	@ignore = "true"
	@priority = "4"
	test WidgetFollowsAccessibilityStandards {
		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Wiki Test Page",
			widgetName = "Wiki Display");

		Navigator.openSitePage(
			pageName = "Wiki Test Page",
			siteName = "Guest");

		AssertAccessible();
	}

}