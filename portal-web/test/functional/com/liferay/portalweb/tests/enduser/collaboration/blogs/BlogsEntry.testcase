@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();
		}
	}

	@description = "This test covers LPS-106613. It ensures that the custom abstract field cannot be reset to empty after typing in the content field."
	@priority = "3"
	@refactordone
	test AbstractDescriptionPersistsWhenTypingInContentField {
		property test.name.skip.portal.instance = "BlogsEntry#AbstractDescriptionPersistsWhenTypingInContentField";

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(entryAbstractDescription = "Blogs Entry Abstract Description");

		Click.pauseClickAt(
			key_editor = "content",
			locator1 = "AlloyEditor#EDITOR");

		BlogsEntry.addContent(entryContent = "Blogs Entry Content");

		AssertTextEquals(
			locator1 = "TextInput#DESCRIPTION",
			value1 = "Blogs Entry Abstract Description");
	}

	@description = "This is a use case for LPS-70143."
	@priority = "4"
	@refactorneeded
	test AddBlogsEntryWithDMLink {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		var dmDocument1URL = DMDocument.getDMLatestVersionURL(
			dmDocumentTitle = "Document_1.jpg",
			site = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		var dmDocument2URL = DMDocument.getDMLatestVersionURL(
			dmDocumentTitle = "Document_2.jpg",
			site = "Guest");

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addEntryExternalLinkViaBrowseButton(
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media");

		BlogsEntry.viewEntryExternalURL(
			entryContent = "Blogs Entry Content",
			entryExternalURL = "${dmDocument1URL}",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addEntryExternalLinkViaBrowseButton(
			entryContent = "Blogs Entry Content",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		BlogsEntry.viewEntryExternalURL(
			entryContent = "Blogs Entry Content",
			entryExternalURL = "${dmDocument2URL}",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "5"
	@refactorneeded
	test AddBlogWithFormatting {
		property testray.component.names = "Training,WYSIWYG";

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.uploadFile(
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		BlogsEntry.addEntryContent(
			entryContent = '''A World-Renowned Professor<br />It's no secret that Agricultural Science Department professor Dr. Wolfgang von Richter has built his entire career on solving the problem of sustainable living on other planets. For Dr. von Richter, the humble lima bean, which comes from the aptly-named phaseolus lunatus plant of the legume family, is the solution. For years, Dr. von Richter has cultivated variety after variety of lima bean. He's turned lima beans cobalt blue by adding the hardiness of a violet gene; he's grown lima beans the size of fists with his nutrient-rich, hyper-growth soil. But how realistic is his dream of getting lima beans to grow in the harsh, unpredictable, and, frankly, otherworldly conditions of different planets?''',
			entrySubtitle = "A conversation with Dr. Von Richter",
			entryTitle = "Is the Lima Bean Really the Answer to Our Life on Other Planets?");

		BlogsEntry.selectFormattingStyle(styleFormat = "Heading 2");

		Button.clickPublish();
	}

	@description = "This is a test for LPS-136760. It checks that content can be added in code view."
	@ignore = "true"
	@priority = "2"
	test CanAddContentInCodeView {
		property portal.acceptance = "false";

		// TODO LPS-136760 CanAddContentInCodeView pending implementation

	}

	@description = "This is a test for LPS-136762. It checks that content can be added in full screen mode."
	@ignore = "true"
	@priority = "2"
	test CanAddContentInFullScreenMode {
		property portal.acceptance = "false";

		// TODO LPS-136762 CanAddContentInFullScreenMode pending implementation

	}

	@description = "This is a test for LPS-136763. It checks that 400 characters can be added to the description."
	@ignore = "true"
	@priority = "3"
	test CanAddDescriptionWith400Characters {
		property portal.acceptance = "false";

		// TODO LPS-136763 CanAddDescriptionWith400Characters pending implementation

	}

	@description = "This test checks that HTML is rendered in the blog content field."
	@priority = "4"
	@refactordone
	test CanAddHTMLToContentField {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "<b>Bold Type</b> <i>Italics</i>",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContentBold = "Bold Type",
			entryContentItalics = "Italics",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a test for LPS-136761. It checks that special characters can be added to a custom abstract"
	@ignore = "true"
	@priority = "3"
	test CanAddSpecialCharactersToCustomAbstract {
		property portal.acceptance = "false";

		// TODO LPS-136761 CanAddSpecialCharactersToCustomAbstract pending implementation

	}

	@description = "This is the same case as BlogsPage#CanAddTitleWithoutEscapingCharacters, but due to LPS-130537 we should ensure both contexts are covered."
	@priority = "4"
	@refactordone
	test CanAddTitleWithoutEscapingCharacters {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');
	}

	@description = "This is a use case for LPS-69240. It checks that a blog entry with custom URL can be added and also that the automatic URL is generated properly in the UI."
	@priority = "4"
	@refactordone
	test CanAddWithCustomURL {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		AssertChecked(locator1 = "Radio#AUTOMATIC_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url-here");

		PortletEntry.publish();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/custom-url-here");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a usecase for LPS-75241. It checks that an embedded video can be added to a blog."
	@priority = "5"
	@refactordone
	test CanAddWithEmbeddedVideo {
		property portal.acceptance = "true";
		property testray.component.names = "WYSIWYG";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			embedVideo = "https://www.youtube.com/watch?v=2EPZxIC5ogU",
			entryContent = "video",
			entryTitle = "Blogs Entry Title",
			navTab = "URL",
			videoService = "youtube");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-126756. It ensures that a blog entry can be added with a static gif."
	@priority = "5"
	@refactorneeded
	test CanAddWithStaticGif {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "static",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "static.gif");

		Button.clickPublish();

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			uploadFileName = "static");
	}

	@description = "This checks that basic text can be inputted and displayed in the most common fields in a blog entry."
	@priority = "5"
	@refactordone
	@uitest
	test CanAddWithSubtitle {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry with a trackback URL can be added."
	@priority = "4"
	@refactorneeded
	test CanAddWithTrackbackURL {
		property custom.properties = "blogs.trackback.enabled=true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Refresh();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title",
			pageName = "Blogs Page");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title");
	}

	@description = "This checks that a blog entry can be automatically saved as a draft."
	@priority = "5"
	@refactordone
	test CanAutomaticallySaveEntryAsDraft {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addDraftViaAutoSave(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a user can change the publish date for a scheduled entry to the present and publish it."
	@priority = "4"
	@refactordone
	@uitest
	test CanChangeAScheduledEntryToThePresentAndPublish {
		property test.name.skip.portal.instance = "BlogsEntry#CanChangeAScheduledEntryToThePresentAndPublish";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.editDisplayDateYear();

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.editDisplayDate(displayTimeMinute = "00");

		PortletEntry.publish();

		PortletEntry.viewNoNavItemLink();

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a test for LPS-136772. It checks that the cover image caption can be deleted."
	@ignore = "true"
	@priority = "3"
	test CanDeleteCoverImageCaption {
		property portal.acceptance = "false";

		// TODO LPS-136772 CanDeleteCoverImageCaption pending implementation

	}

	@description = "This checks that a blog entry can saved as a draft and then deleted."
	@priority = "4"
	@refactorneeded
	test CanDeleteDraft {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		BlogsEntry.moveToRecycleBinDraftCP(
			assetType = "Blogs Entry",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.viewDefaultCP(entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that blog entries can be deleted through the UI."
	@priority = "5"
	@refactordone
	test CanDeleteMultipleEntriesSequentially {
		property portal.acceptance = "true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		for (var entryCount : list "1,2") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			BlogsNavigator.moveToRecycleBinCP(
				assetType = "Blogs Entry",
				entryTitle = "Blogs Entry${entryCount} Title");
		}

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		for (var entryCount : list "1,2") {
			BlogsEntry.viewNoCP(entryTitle = "Blogs Entry${entryCount} Title");
		}
	}

	@description = "This is a test for LPS-136771. It checks that the cover image caption can be edited with special characters."
	@ignore = "true"
	@priority = "3"
	test CanEditCoverImageCaptionWithSpecialCharacters {
		property portal.acceptance = "false";

		// TODO LPS-136771 CanEditCoverImageCaptionWithSpecialCharacters pending implementation

	}

	@description = "This test covers LPS-106613. It ensures that the custom abstract can be added and edited."
	@priority = "4"
	@refactorneeded
	test CanEditCustomAbstract {
		property test.name.skip.portal.instance = "BlogsEntry#CanEditCustomAbstract";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithCustomAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(entryAbstractDescription = "Blogs Entry Custom AbstractEdit");

		Type(
			key_editor = "content",
			locator1 = "AlloyEditor#EDITOR",
			value1 = "Blogs Entry Content Edit");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Blogs Entry Custom AbstractEdit",
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-108029. It ensures that a blog entry can be edited from the search result."
	@priority = "4"
	@refactorneeded
	test CanEditViaSearchResults {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Blogs Entry Title");

		SearchPortlets.gotoResultDetails(searchAssetTitle = "Blogs Entry Title");

		Blogs.editEntryViaSearchResultDetails(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit",
			searchAssetTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title Edit");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	@description = "This checks that a blog entry can be manually saved as a draft."
	@priority = "5"
	@refactordone
	test CanManuallySaveAsDraft {
		property portal.acceptance = "true";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This this a use case for LPS-69240. It checks that a blog entry with a URL that duplicates an existing one cannot be published."
	@priority = "4"
	@refactordone
	test CannotAddDuplicateCustomURLThroughUI {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#ERROR");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_ENTER_A_UNIQUE_TITLE",
			value1 = "The URL title is already in use. Please enter a unique URL title.");
	}

	@description = "This checks that a blog entry cannot be published if the custom abstracted is selected but empty."
	@priority = "4"
	@refactorneeded
	test CannotAddWhenCustomAbstractIsSelectedButEmpty {
		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsEntry.addTitle(entryTitle = "Blogs Title");

		Panel.expandPanel(panel = "Configuration");

		Click(locator1 = "Radio#CUSTOM_ABSTRACT");

		Button.clickPublish();

		Alert.viewRequiredField();
	}

	@description = "This checks that a blog entry without content cannot be added."
	@priority = "4"
	@refactordone
	test CannotAddWithEmptyContent {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithInvalidContent(
			entryInvalidContent = "",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.viewDefaultCP(entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry without a title cannot be added."
	@priority = "4"
	@refactordone
	test CannotAddWithEmptyTitle {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithInvalidTitle(
			entryContent = "Blogs Entry Content",
			entryInvalidTitle = "");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.viewDefaultCP(entryTitle = "");
	}

	@description = "This is a test for LPS-136764. It checks that Javascript cannot be executed in the content field."
	@ignore = "true"
	@priority = "3"
	test CannotExecuteXSSInContent {
		property portal.acceptance = "false";

		// TODO LPS-136764 CannotExecuteXSSInContent pending implementation

	}

	@description = "This is a test for LPS-136773. It checks that XSS cannot be executed in the cover image caption."
	@ignore = "true"
	@priority = "3"
	test CannotExecuteXSSInCoverImageCaption {
		property portal.acceptance = "false";

		// TODO LPS-136773 CannotExecuteXSSInCoverImageCaption pending implementation

	}

	@description = "This is a test for LPS-136765. It checks that Javascript cannot be executed in the custom abstract."
	@ignore = "true"
	@priority = "3"
	test CannotExecuteXSSInCustomAbstract {
		property portal.acceptance = "false";

		// TODO LPS-136765 CannotExecuteXSSInCustomAbstract pending implementation

	}

	@description = "This is a test for LPS-136788. It checks that a user cannot rate a post when it is disabled in the configuration."
	@ignore = "true"
	@priority = "3"
	test CannotRatePost {
		property portal.acceptance = "false";

		// TODO LPS-136788 CannotRatePost pending implementation

	}

	@description = "This checks that a blog draft can be published."
	@priority = "4"
	@refactordone
	test CanPublishDraft {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.publishDraftCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry that is scheduled is in a pre-publish status in the UI."
	@priority = "4"
	@refactordone
	test CanSchedulePost {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.scheduleBlogEntry();

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry can be searched for by its content."
	@priority = "4"
	@refactordone
	test CanSearchByContent {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Unique Content",
			entryTitle = "Blogs Entry Title");

		for (var searchTerm : list "Unique,Unique Content") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}
	}

	@description = "This checks that a blog entry can be searched for by its title."
	@priority = "4"
	@refactordone
	test CanSearchByTitle {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Unique Content",
			entryTitle = "Blogs Entry Title");

		for (var searchTerm : list "Blogs,Blogs Entry Title") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}
	}

	@priority = "4"
	@refactorneeded
	test CanViewDefaultAbstract {
		property test.name.skip.portal.instance = "BlogsEntry#CanViewDefaultAbstract";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithDefaultAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a use case for LPS-69240. It checks that when blog entries are duplicated their custom URL's are unique."
	@priority = "4"
	@refactordone
	test ShouldHaveUniqueURLForDuplicate {
		var portalURL = PropsUtil.get("portal.url");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/blogs-entry-title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/blogs-entry-title-1");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a string that is over 255 characters in the title will be trimmed to 255."
	@priority = "4"
	@refactordone
	test ShouldTrimTitleTo255CharactersWhenOver {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "|||||||||1|||||||||2|||||||||3|||||||||4|||||||||5|||||||||6|||||||||7|||||||||8|||||||||9||||||||10||||||||11||||||||12||||||||13||||||||14||||||||15||||||||16||||||||17||||||||18||||||||19||||||||20||||||||21||||||||22||||||||23||||||||24||||||||25||||XX");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-x",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "|||||||||1|||||||||2|||||||||3|||||||||4|||||||||5|||||||||6|||||||||7|||||||||8|||||||||9||||||||10||||||||11||||||||12||||||||13||||||||14||||||||15||||||||16||||||||17||||||||18||||||||19||||||||20||||||||21||||||||22||||||||23||||||||24||||||||25||||X");
	}

	@description = "This test covers LPS-128451. It ensures that a blog entry can be published normally with xss code injected title."
	@priority = "4"
	@refactordone
	test TitleWillNotExecuteXSS {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = '''"><img src=xss onerror=alert(1)>''',
			entryTitle = '''"><img src=xss onerror=alert(1)>''',
			injectCode = "true");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = '''"><img src=xss onerror=alert(1)>''');

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entrySubtitle = '''"><img src=xss onerror=alert(1)>''',
			entryTitle = '''"><img src=xss onerror=alert(1)>''');
	}

	@description = "This is a test for LPS-136769. It checks that a friendly URL can be added with escape characters."
	@ignore = "true"
	@priority = "3"
	test URLWithEscapeCharactersWillBeNormalized {
		property portal.acceptance = "false";

		// TODO LPS-136769 CanAddFriendlyURLWithEscapeCharacters pending implementation

	}

}