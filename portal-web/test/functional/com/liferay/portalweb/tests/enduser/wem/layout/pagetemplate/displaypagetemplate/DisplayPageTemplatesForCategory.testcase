@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-110247 and LPS-112578. The user can create a display page template for Category and mark it as default. The new non-subcategory will be associated to the Default."
	@priority = "5"
	test AddDisplayPageTemplateAndMarkItAsDefault {
		property portal.acceptance = "true";

		task ("Navigate to Display Page Template admin") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a display page template for Category") {
			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Category",
				displayPageName = "Display Page Name");
		}

		task ("Assert the display page template name is shown in control menu") {
			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");
		}

		task ("Add a Heading fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Mapping Name field to Heading") {
			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Mark the display page template as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category in vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name",
				displayPageTemplateType = "Default",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the mapped content in display page template") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View Display Page",
				rowEntry = "Category Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Category Name");
		}
	}

	@description = "This is a test for LPS-110247. The user can select the specific display page template in category editor."
	@priority = "5"
	test SelectSpecificDisplayPageTemplateInCategoryEditor {
		property portal.acceptance = "true";

		task ("Add the first display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name 1",
				groupName = "Test Site Name");
		}

		task ("Add a Button fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Mapping the Vocabulary field to Button fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Vocabulary",
				fragmentName = "Button",
				id = "link");

			PageEditor.clickPublish();
		}

		task ("Add the second display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name 2",
				groupName = "Test Site Name");
		}

		task ("Add a Heading fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 2");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Mapping the Description field to Heading fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Description",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category and select the first display page template as specific display page template") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryDescription = "This is a description",
				categoryName = "Category Name",
				displayPageName = "Display Page Name 1",
				displayPageTemplateType = "Specific",
				vocabularyName = "Vocabulary Name");
		}

		task ("Edit the category and select the second display page template as specific display page template") {
			Category.editCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name 2",
				displayPageTemplateType = "Specific",
				selectedDisplayPageName = "Display Page Name 1",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "This is a test for LPS-112578. The user can define associated display page template in subcategory and it will be inherited by its subcategory."
	@priority = "5"
	test SelectSpecificDisplayPageTemplateInSubcategoryEditor {
		property portal.acceptance = "true";

		task ("Add the first display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name 1",
				groupName = "Test Site Name");
		}

		task ("Add a Button fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Mapping the Name field to Button fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Button",
				id = "link");

			PageEditor.clickPublish();
		}

		task ("Add the second display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name 2",
				groupName = "Test Site Name");
		}

		task ("Add a Heading fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name 2");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Mapping the Name field to Heading fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category in vocabulary and select the display page template as Specific") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name 1",
				displayPageTemplateType = "Specific",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subcategory in category") {
			Subcategory.addCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name 2",
				displayPageTemplateType = "Specific",
				subcategoryName = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a grand subcategory in subcategory") {
			Subcategory.addCP(
				categoryName = "Category Name",
				displayPageTemplateType = "Inherited",
				grandSubcategoryName = "Grand Subcategory Name",
				subcategoryName = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the mapped content in display page template") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View Display Page",
				rowEntry = "Grand Subcategory Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name 2");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Grand Subcategory Name");
		}
	}

	@description = "This is a test for LPS-110247. View available mapping fields in different type editable fields of fragment."
	@priority = "4"
	test ViewAvailableMappingFields {
		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Heading fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("View available mapping fields in Heading fragment") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			AssertSelectedLabel(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Category (Default)");

			for (var field : list "Name,Description,Vocabulary") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Fields",
				key_value = "Friendly URL",
				locator1 = "Select#GROUPED_SELECT_VALUE");
		}

		task ("Add a Banner Center fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center",
				targetFragmentName = "Heading");
		}

		task ("View available mapping fields in Banner Center fragment") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			AssertSelectedLabel(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Category (Default)");

			for (var field : list "Name,Description,Vocabulary") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Fields",
				key_value = "Friendly URL",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			AssertSelectedLabel(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Category (Default)");

			for (var field : list "Name,Description,Vocabulary") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Fields",
				key_value = "Friendly URL",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			Click.clickNoWaitForVisible(
				key_elementType = "Container",
				key_position = "1",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");

			Click(
				key_navItem = "Styles",
				locator1 = "PageEditor#NAV_ITEM_BUTTON");

			Select(
				key_fieldLabel = "Image Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Mapping");

			AssertSelectedLabel(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Category (Default)");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Fields",
				key_value = "Main Image",
				locator1 = "Select#GROUPED_SELECT_VALUE");
		}

		task ("Add an Image fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Container");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			AssertSelectedLabel(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Category (Default)");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Fields",
				key_value = "Main Image",
				locator1 = "Select#GROUPED_SELECT_VALUE");
		}

		task ("Add a Container element to display page template") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container",
				targetFragmentName = "Image");

			Click.clickNoWaitForVisible(
				key_elementType = "Container",
				key_position = "3",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");

			Click(
				key_navItem = "Styles",
				locator1 = "PageEditor#NAV_ITEM_BUTTON",
				value1 = "Styles");

			Select(
				key_fieldLabel = "Image Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Mapping");

			AssertSelectedLabel(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Category (Default)");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Fields",
				key_value = "Main Image",
				locator1 = "Select#GROUPED_SELECT_VALUE");
		}
	}

	@description = "This is a test for LPS-112578. The new subcategory will inherit associated display page template from parent category."
	@priority = "5"
	test ViewInheritedAssociatedDisplayPageTemplateFromParentCategory {
		property portal.acceptance = "true";

		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Button fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Mapping the Name field to Button fragment") {
			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Button",
				id = "link");

			PageEditor.clickPublish();
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category in vocabulary and select the display page template as Specific") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name",
				displayPageTemplateType = "Specific",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subcategory in category") {
			Subcategory.addCP(
				categoryName = "Category Name",
				displayPageTemplateType = "Inherited",
				subcategoryName = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the mapped content in display page template") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View Display Page",
				rowEntry = "Subcategory Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

			AssertTextEquals(
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Subcategory Name");
		}
	}

	@description = "This is a test for LPS-132081. View mapped content of assets in display page template for Category when apply the Items with This Category to Collection Display."
	@priority = "5"
	test ViewMappedContentInCollectionDisplayWithItemsWithThisCategory {
		property portal.acceptance = "true";

		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Collection Display to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Items with This Category collection provider in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Items with This Category");
		}

		task ("Add a Heading to Collection Display and Map the Title field to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category and select the display page template as specific display page template") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name",
				displayPageTemplateType = "Specific",
				vocabularyName = "Vocabulary Name");
		}

		task ("Get the categoryId") {
			var categoryId = JSONCategory.getCategoryId(
				categoryName = "Category Name",
				groupName = "Test Site Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with the category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry with the category") {
			JSONBlog.addEntry(
				assetCategoryIds = "${categoryId}",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document entry with the category") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryId}",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("View the mapped content in display page template") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Vocabulary Name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View Display Page",
				rowEntry = "Category Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-110247 and LPS-132081. The user can navigate to associated display page template via View Display Page of category."
	@priority = "5"
	test ViewMappedContentInDisplayPageTemplate {
		property portal.acceptance = "true";

		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Banner Center fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Mapping the Name field to title editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Mapping the Display Page URL field to link editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Display Page URL",
				fragmentName = "Button",
				id = "link");
		}

		task ("Mapping the Main Image field to background image editable field") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				fieldName = "Main Image",
				panel = "Styles");

			PageEditor.clickPublish();
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category and select the display page template as specific display page template") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name",
				displayPageTemplateType = "Specific",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add an image to category") {
			Category.addImageToCategory(
				categoryName = "Category Name",
				imageName = "Document_1.jpg");
		}

		task ("Get the categoryId") {
			var categoryId = JSONCategory.getCategoryId(
				categoryName = "Category Name",
				groupName = "Test Site Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the mapped content in display page template") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Vocabulary Name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View Display Page",
				rowEntry = "Category Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

			AssertVisible(
				id = "element-text",
				key_position = "1",
				key_text = "Category Name",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

			AssertVisible(
				id = "link",
				key_position = "1",
				key_text = "/web/test-site-name/g/${categoryId}",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

			AssertVisible(
				key_imageName = "/images/",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

}