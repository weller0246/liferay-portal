@component-name = "portal-page-audit"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Audit";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		PageAudit.setAPIViaSystemSettings(apiKey = " ");

		JSONUser.tearDownNonAdminUsers();

		Role.tearDownCP();

		JSONGroup.deleteGroupByName(groupName = "Test Site Name");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-119066: Given the Page Audit Panel
	When the audit is launched (the API is called)
	Then a progress bar shows and moves forward while retrieving the data until they can be shown"

	@priority = "3"
	@uitest
	test AssertProgressBar {
		property test.name.skip.portal.instance = "PageAudit#AssertProgressBar";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

		task ("Open Page Audit panel and assert the progress bar") {
			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			AssertElementPresent(locator1 = "PageAudit#PROGRESS_BAR");
		}
	}

	@description = "LPS-134760: Given the Page Audit panel
	When the API key is set but it is not valid
	Then the Page Speed API will show a "Show details" link, that will display the info details of the error, provided by the API."
	@priority = "3"
	test CheckErrorDetailsDisplayedInvalidApiKey {
		property test.name.skip.portal.instance = "PageAudit#CheckErrorDetailsDisplayedInvalidApiKey";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();

			Refresh();
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(apiKey = "invalidAPI");

			Alert.viewSuccessMessage();
		}

		task ("Open Page Audit panel and assert 'Show details' link") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			WaitForElementPresent(
				errorTitle = "The API key is invalid.",
				locator1 = "PageAudit#ERROR_WARNING_TITLE");

			Button.click(button = "Show Details");

			AssertElementPresent(
				errorMessage = "API key not valid. Please pass a valid API key.",
				locator1 = "PageAudit#ERROR_WARNING_MESSAGE");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there is more than the 60% of the texts on the page with insufficient font sizes
	Then the users will see the matching failing elements, with the size of the illegible font and the percentage of text it covers"
	@priority = "4"
	@uitest
	test CheckIllegibleFontSizes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Illegible Font Sizes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Illegible Font Sizes");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are images on the page with a displayed ratio different from the actual one
	Then the users will see the matching failing elements, with its source link and the occurrences separately, and the Displayed Aspect Ratio and the Actual Aspect Ratio for each one of them"
	@priority = "4"
	@uitest
	test CheckIncorrectImageAspectRatio {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIncorrectImageAspectRatio";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Incorrect Image Aspect Ratios");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Incorrect Image Aspect Ratios");

			AssertElementPresent(
				failingText = "Source File",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Displayed Aspect Ratio",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Actual Aspect Ratio",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions to edit Instance Settings
	When there is no canonical URL, or it doesn't coincide with the page's URL
	Then the users will see the invalid canonical URL, and a text with a link to the instance settings: If the problem is that the canonical URL doesn't match the URL of the page, try changing the configuration for using localized canonical URLs from Instance settings > Pages > SEO. "
	@priority = "4"
	@uitest
	test CheckInvalidCanonicalURL {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckInvalidCanonicalURL";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Invalid Canonical URL");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Invalid Canonical URL");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When the page has any invalid hreflang link
	Then the users will see the matching failing elements, with the incorrect hreflang links"
	@priority = "4"
	@uitest
	test CheckInvalidHreflang {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckInvalidHreflang";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Invalid Hreflang");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Invalid Hreflang");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "link");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there links on the page that are not formatted with the a href attributes or have invalid target URLs
	Then the users will see the matching failing elements, with current link snippet"
	@priority = "4"
	@uitest
	test CheckLinksCrawlable {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLinksCrawlable";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Not All Links Are Crawlable");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Not All Links Are Crawlable");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "crawlable-anchors");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When the link texts are not title as the link text
	Then the users will see the link text and the link destination URL"
	@priority = "4"
	@uitest
	test CheckLinksTexts {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLinksTexts";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Link Texts");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Link Texts");

			AssertElementPresent(
				failingText = "Link Text",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Link Destination URL",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are texts on the page with insufficient contrast ratio
	Then the users will see the matching failing elements, with its current ratio, foreground color code, background color code, font size, font weight and expected ratio"
	@priority = "4"
	@uitest
	test CheckLowContrastRatio {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLowContrastRatio";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "color-contrast");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are images on the page with no alt text
	Then the users will see the matching failing elements, and the current code snippet "
	@priority = "4"
	@uitest
	test CheckMissingImgALTAttributes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingImgALTAttributes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing Img ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Img ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "img");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are input-type images on the page with no alt text
	Then the users will see the matching failing elements, and the current code snippet"
	@priority = "4"
	@uitest
	test CheckMissingInputALTAttributes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingInputALTAttributes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing Input ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Input ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "input");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When there is no meta description for the page
	Then the users will see a text with a link to the configuration section: Add a meta-description from the Configuration section of this page."
	@priority = "4"
	@uitest
	test CheckMissingMetaDescription {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingMetaDescription";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing Meta Description");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Meta Description");

			AssertElementPresent(
				failingText = "Add a description",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When there is no title for the page
	Then the users will see a text with a link to the configuration section: Add a title from the Configuration section of this page."
	@priority = "4"
	@uitest
	test CheckMissingTitleElement {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingTitleElement";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing <title> Element");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing <title> Element");

			AssertElementPresent(
				failingText = "Add a title",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-134760: Given the Page Audit panel in a private page
	Then the reload button won't be visible."
	@priority = "3"
	test CheckNotVisibleReloadbButtonInPrivatePage {
		task ("Create a Private Page") {
			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Private Page Name");
		}

		task ("Go to Private Page") {
			Navigator.gotoPrivateSitePage(
				pageName = "Private Page Name",
				siteName = "Test Site Name");
		}

		task ("Open Page Audit tab and Assert reload button id not present") {
			PageAudit.openPanelBeforeConfiguration();

			IsElementPresent(locator1 = "PageAudit#ERROR_WARNING_BOX");

			IsElementNotPresent(locator1 = "PageAudit#RELAUNCH_PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsEditorRole Name",
				roleTitle = "BlogsEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.blogs.model.BlogsEntry",
				roleTitle = "BlogsEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a content page When a user with permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentEditorRole Name",
				roleTitle = "DocumentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "DocumentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a content page When the user with permissions to edit pages visits the view mode	Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesEditorRole Name",
				roleTitle = "PagesEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "PagesEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with permissions to edit web content visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with NO permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsRole Name",
				roleTitle = "BlogsRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with NO permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentRole Name",
				roleTitle = "DocumentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a content page	When the user with NO permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesRole Name",
				roleTitle = "PagesRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with NO permissions to edit web content visits the page	Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentRole Name",
				roleTitle = "WebContentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsEditorRole Name",
				roleTitle = "BlogsEditorRole Name");

			for (var resourceActionIndex : list "UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.blogs.model.BlogsEntry",
					roleTitle = "BlogsEditorRole Name");
			}

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentEditorRole Name",
				roleTitle = "DocumentEditorRole Name");

			for (var resourceActionIndex : list "UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
					roleTitle = "DocumentEditorRole Name");
			}

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "DM Document Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page	When the user with permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesEditorRole Name",
				roleTitle = "PagesEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "PagesEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with permissions to edit web content visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content Title",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with NO permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsRole Name",
				roleTitle = "BlogsRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with NO permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentRole Name",
				roleTitle = "DocumentRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "DocumentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "DM Document Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page When the user with NO permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel is not shown"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesRole Name",
				roleTitle = "PagesRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with NO permissions to edit web content visits the page	Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentRole Name",
				roleTitle = "WebContentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content Title",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "Given a widget page When a user with permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsEditorRole Name",
				roleTitle = "BlogsEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.blogs.model.BlogsEntry",
				roleTitle = "BlogsEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentEditorRole Name",
				roleTitle = "DocumentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "DocumentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a widget page When the user with permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesEditorRole Name",
				roleTitle = "PagesEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "PagesEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with permissions to edit web content visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with NO permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsRole Name",
				roleTitle = "BlogsRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with NO permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentRole Name",
				roleTitle = "DocumentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a widget page When the user with NO permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel is not shown"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesRole Name",
				roleTitle = "PagesRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-137227 Given a widget page	When a user with NO permissions to edit web content visits the page	Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentRole Name",
				roleTitle = "WebContentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When the page is blocked from indexing
	Then the users will see a text with a link to the configuration section: Change the robots.txt setting from the Configuration section of this page"
	@priority = "4"
	@uitest
	test CheckPageBlockedFromIndexing {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckPageBlockedFromIndexing";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Page Blocked from Indexing");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Page Blocked from Indexing");

			AssertElementPresent(
				failingText = "Change the robots.txt setting",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there tap targets on the page that are too small or are overlapping with others
	Then the users will see the matching failing elements, with the tap target snippet, size and Overlapping Target if there is one"
	@priority = "4"
	@uitest
	test CheckSmallTapTargets {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckSmallTapTargets";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Small Tap Targets");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Small Tap Targets");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "a");
		}
	}

	@description = "LPS-127668: Given the page audit panel
	When the users access the second level
	Then they can see the title of the issue, the description and tips sections"
	@priority = "4"
	@uitest
	test NavigateToSecondLevel {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#NavigateToSecondLevel";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_TITLE",
				value1 = "DESCRIPTION");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_TITLE",
				value1 = "TIPS");

			AssertElementPresent(
				badgeValue = "1",
				locator1 = "PageAudit#BADGE_NUMBER");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "color-contrast");
		}
	}

	@description = "LPS-135681: Given the Page Audit panel in its initial state (no API Key configured)
	When the user clicks on the Configure button
	Then the user navigates to Site settings > Pages > Google PageSpeed Insights tab"
	@priority = "4"
	test NavigateToSiteSettingsWhenApiKeyNotConfigured {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#NavigateToSiteSettingsWhenApiKeyNotConfigured";

		task ("Open Page Audit panel") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Site settings > Pages throught the 'Configure' button in panel and Assert page") {
			PageAudit.connectToGooglePageAudit();

			AssertElementPresent(
				key_breadcrumbName = "Site Settings",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_LINK");

			AssertTextPresent(
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_ACTIVE_ENTRY",
				value1 = "Pages");

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-119068: When the user, after s/he has clicked on the Connect with Page Speed (button) and being led to Site Settings > Pages > Google PageSpeed, clicks on Back button, s/he is led to the page view again"
	@priority = "3"
	test PageAuditBackButton {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditBackButton";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}

		task ("Go back to the panel throught the back button") {
			PageAudit.backToPageBackButton();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}
	}

	@description = "LPS-119068: When the user, after s/he has clicked on the Connect with Page Speed (button) and being led to Site Settings > Pages > Google PageSpeed, clicks on Cancel button, s/he is led to the page view again"
	@priority = "3"
	test PageAuditCancelButton {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditCancelButton";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}

		task ("Go back to the panel throught the cancel button") {
			PageAudit.backToPageCancelButton();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is on and a user with permissions to view page visits the view mode of a content page, the issue icon for displaying the page audit panel shows"
	@priority = "5"
	test PageAuditContentPage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditContentPage";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is off, the issue icon to display the page audit panel in the content pages doesn't show"
	@priority = "3"
	test PageAuditContentPageDisabled {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditContentPageDisabled";

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");
		}

		task ("Go to the Content Page and assert the Page Audit panel is not shown") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is on and a user with permissions to view page visits the view mode of a display page, the issue icon for displaying the page audit panel shows"
	@priority = "5"
	test PageAuditDisplayPage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditDisplayPage";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is off, the issue icon to display the page audit panel in the display pages doesn't show"
	@priority = "3"
	test PageAuditDisplayPageDisabled {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditDisplayPageDisabled";

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeed();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the Page Audit panel is not shown") {
			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is on and a user with permissions to view page visits the view mode of a widget page, the issue icon for displaying the page audit panel shows"
	@priority = "5"
	test PageAuditWidgetPage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditWidgetPage";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/widget-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is off, the issue icon to display the page audit panel in the widget pages doesn't show"
	@priority = "3"
	test PageAuditWidgetPageDisabled {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditWidgetPageDisabled";

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeed();
		}

		task ("Add Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/widget-page");
		}

		task ("Assert the Page Audit panel is not shown") {
			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-132232: Given the Page Audit Panel
	When the user opens it and there are no failing elements retrieved for any of the checks
	Then a message "Your page has no issues" and the matching image show, the two sections SEO and Accessibility show and they are collapsed by default"
	@priority = "3"
	@uitest
	test PageWithNoIssues {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageWithNoIssues";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(URL = "https://liferay-tango.github.io/liferay-portal/page-audit-test-no-issues");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

		task ("Open Page Audit panel and assert there are no issues") {
			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			AssertElementPresent(locator1 = "PageAudit#SUCCESS_IMAGE");

			AssertTextPresent(
				locator1 = "PageAudit#NO_ISSUES_MESSAGE",
				value1 = "Your page has no issues.");
		}
	}

}