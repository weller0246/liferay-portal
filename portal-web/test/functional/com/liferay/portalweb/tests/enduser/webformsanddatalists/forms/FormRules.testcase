@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			Navigator.gotoNavItem(navItem = "Data Providers");

			FormsAdmin.teardownDataProviders();

			Page.tearDownCP();
		}
	}

	@description = "Verify that the Action label of a Rule changes when the corresponding Field's Label is edited"
	@priority = "5"
	test ActionIsUpdatedWhenFieldLabelIsEdited {
		property forms.functional = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionOperator = "Is Empty",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		Click(
			key_name = "Text",
			locator1 = "FormFields#FIELD_TARGET_LABEL");

		Form.editFieldLabelMetal(fieldValue = "Text Test");

		Form.save();

		FormsAdminNavigator.gotoRules();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text Test",
			conditionField = "Text Test",
			conditionOperator = "Is Empty",
			ruleNumber = "1");
	}

	@description = "LPS-73332 - Verify that when a Form is duplicated, the Rules in that Form are also duplicated"
	@priority = "2"
	test AreDuplicatedWhenTheFormIsDuplicated {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "FormRules#AreDuplicatedWhenTheFormIsDuplicated";

		FormsAdmin.addForm();

		Form.editName(formName = "Test Form");

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field 1");

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "1");

		Form.editFieldLabelMetal(fieldValue = "Text Field 2");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text Field 1",
			conditionFieldValue = "test",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Text Field 2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		Form.duplicate(formName = "Test Form");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Copy of Test Form");

		FormsAdminNavigator.gotoRules();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Text Field 2",
			conditionField = "Text Field 1",
			conditionFieldConstant = "test",
			conditionOperator = "Is Equal To",
			ruleNumber = "1");
	}

	@description = "LPS-73332 - Verify that when creating a new Form, rules from a pre-existing Form are not copied into the new Form"
	@priority = "2"
	test AreNotCopiedIntoANewForm {
		property portal.acceptance = "true";
		property portal.upstream = "true";

		FormsAdmin.addForm();

		Form.editName();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field 1");

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "1");

		Form.editFieldLabelMetal(fieldValue = "Text Field 2");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text Field 1",
			conditionFieldValue = "test",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Text Field 2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		FormsAdmin.addForm();

		FormsAdminNavigator.gotoRules();

		FormRules.viewNoRules();
	}

	@description = "Verify that a Rule is autosaved when exiting the Form without saving the Rule"
	@priority = "5"
	test AreSavedWhenExitingTheForm {
		property forms.functional = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Form.save();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormsAdminNavigator.gotoRules();

		Click(locator1 = "FormRules#RULE_BUILDER_ADD_RULE_BUTTON");

		FormRules.viewRuleBuilderCondition(
			positionNumber = "1",
			value = "Text");

		FormRules.viewRuleBuilderCondition(
			positionNumber = "2",
			value = "Is Empty");

		FormRules.viewRuleBuilderAction(
			positionNumber = "1",
			value = "Require");

		FormRules.viewRuleBuilderAction(
			positionNumber = "2",
			value = "Text");
	}

	@description = "Verify that a Rule can be created"
	@priority = "5"
	test CanBeCreated {
		property forms.functional = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text",
			formPageNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionOperator = "Is Empty",
			ruleNumber = "1");
	}

	@description = "LPS-71466 - Verify that a Rule can be created using a Field with a Predefined Value"
	@priority = "2"
	test CanBeCreatedUsingAFieldWithAPredefinedValue {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "FormRules#CanBeCreatedUsingAFieldWithAPredefinedValue";

		FormsAdmin.addForm();

		Form.editName(formName = "Test Form");

		Form.addTextField(fieldPositionNumber = "0");

		var fieldNameTextField1 = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field 1");

		Form.gotoAdvancedTab();

		FormFields.editText(
			fieldName = "predefinedValue",
			fieldValue = "test");

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "1");

		var fieldNameTextField2 = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field 2");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text Field 1",
			conditionFieldValue = "test",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text Field 2");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text Field 2",
			conditionField = "Text Field 1",
			conditionFieldConstant = "test",
			conditionOperator = "Is Equal To",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewRequiredAsterisk();

		FormPortlet.submit();

		FormFields.viewFieldValidationErrorMessage(
			fieldName = "${fieldNameTextField2}",
			fieldValidationErrorMessage = "This field is required.");

		Refresh();

		FormFields.editText(
			fieldName = "${fieldNameTextField1}",
			fieldValue = "testing");

		FormFields.viewRequiredAsteriskNotPresent();

		FormPortlet.submitSuccessfully();
	}

	@description = "Verify that a Rule can be deleted"
	@priority = "5"
	test CanBeDeleted {
		property forms.functional = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text",
			formPageNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionOperator = "Is Empty",
			ruleNumber = "1");

		FormRules.gotoDelete(ruleNumber = "1");

		FormRules.viewNoRules();
	}

	@description = "LPS-79095 - Verify that a Rule can be edited"
	@priority = "5"
	test CanBeEdited {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "FormRules#CanBeEdited";

		FormsAdmin.addForm();

		Form.editName();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field 2");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text Field",
			conditionFieldValue = "test",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text Field 2");

		FormsAdminNavigator.gotoFormBuilder();

		AssertVisible(locator1 = "Form#BUILDER_SIDEBAR_PANEL");

		FormsAdminNavigator.gotoRules();

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName();

		FormsAdminNavigator.gotoRules();

		FormRules.gotoEdit(ruleNumber = "1");

		FormRules.configureConditionOptions(
			conditionField = "Text Field",
			conditionFieldValue = "test edit",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Text Field 2");

		FormRules.save();
	}

	@description = "LPS-119818 - Verify that it is not possible to save a Form when a field that was used in a rule is deleted"
	@priority = "5"
	test CannotBeSavedWhenFieldThatBelongsToARuleIsDeleted {
		property portal.acceptance = "true";
		property portal.upstream = "true";

		FormsAdmin.addForm();

		Form.editName();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		var fieldNameTextField = FormFields.getFieldName();

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "1");

		Form.editFieldLabelMetal(fieldValue = "Text Field 2");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text Field",
			conditionFieldValue = "test",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text Field 2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.deleteFieldModalConfirmation(
			fieldLabel = "Text Field",
			fieldName = "${fieldNameTextField}");

		FormsAdminNavigator.gotoRules();

		FormRules.viewBrokenRule(ruleNumber = "1");
	}

	@description = "Verify that the Condition label of a Rule changes when the corresponding Field's Label is edited"
	@priority = "5"
	test ConditionIsUpdatedWhenFieldLabelIsEdited {
		property forms.functional = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text",
			formPageNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionOperator = "Is Empty",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoEditField(fieldName = "Text");

		FormFields.editText(
			fieldName = "label",
			fieldValue = "Text Test");

		Form.save();

		FormsAdminNavigator.gotoRules();

		FormRules.viewConditionFieldSummary(
			conditionField = "Text Test",
			ruleNumber = "1");

		FormRules.viewConditionOperatorSummary(
			conditionOperator = "Is Empty",
			ruleNumber = "1");
	}

	@description = "This is a use case for LPS-71592."
	@priority = "5"
	test ConfigureCalculateRule {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "FormRules#ConfigureCalculateRule";

		FormsAdmin.addForm();

		Form.editName();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		var fieldNameQuantity = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Quantity");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		var fieldNameValue = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Value");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "2",
			fieldType = "Numeric");

		var fieldNameTotal = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Total");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.selectConditionField(
			conditionField = "Quantity",
			conditionRowNumber = "1");

		FormRules.selectConditionOperator(
			conditionOperator = "Is Not Empty",
			conditionRowNumber = "1");

		FormRules.selectAction(
			action = "Calculate",
			actionRowNumber = "1");

		FormRules.selectActionTarget(
			actionRowNumber = "1",
			actionTarget = "Total");

		FormRules.selectCalculateField(calculateFieldOption = "Value");

		FormRules.chooseCalculateOperator(calculateOperator = "*");

		FormRules.selectCalculateField(calculateFieldOption = "Quantity");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Form Page");

		Navigator.gotoPage(pageName = "Form Page");

		Portlet.addPG(
			pageName = "Form Page",
			portletName = "Form");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm();

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.editText(
			fieldName = "${fieldNameValue}",
			fieldValue = "5");

		FormFields.editText(
			fieldName = "${fieldNameQuantity}",
			fieldValue = "10");

		FormFields.viewTextValue(
			fieldName = "${fieldNameTotal}",
			fieldValue = "50");
	}

	// Ignored because of the ticket LRQA-57207

	@description = "Verify that a Rule creation can be canceled"
	@priority = "5"
	test CreationCanBeCanceled {
		property forms.functional = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text",
			formPageNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.cancel();

		AssertElementPresent(locator1 = "FormRules#RULE_BUILDER_ADD_RULE_BUTTON");

		FormRules.viewNoRules();
	}

	@description = "LPS-80771 - Verify if an alert message is shown when the user tries to change the type of field that is being used on a Rule"
	@ignore = "true"
	@priority = "5"
	test DisplaysAWarningWhenChangingAFieldUsedInARule {
		FormsAdmin.addForm();

		Form.editName();

		Form.addTextField(fieldPositionNumber = "0");

		var fieldNameTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "1");

		Form.editFieldLabelMetal(fieldValue = "Text Field 2");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text Field",
			conditionFieldValue = "test",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text Field 2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		FormsAdminNavigator.gotoEditField(fieldName = "${fieldNameTextField}");

		Form.changeFieldTypeModalConfirmation(selectOption = "Select from List");

		FormFields.viewTextLabel(
			fieldLabel = "Text Field",
			fieldName = "${fieldNameTextField}");

		FormsAdminNavigator.gotoRules();

		FormRules.viewBrokenRule(ruleNumber = "1");
	}

	@description = "LPS-122103 - Verify that the calculator displays the Field Reference instead of Field ID"
	@priority = "5"
	test DisplaysFieldReferenceInCalculator {
		property portal.acceptance = "true";
		property portal.upstream = "true";

		FormsAdmin.addForm();

		Form.editName();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		var fieldNameQuantity = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Quantity");

		Form.gotoAdvancedTab();

		Form.editFieldReferenceMetal(fieldValue = "QuantityReference");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		var fieldNameValue = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Value");

		Form.gotoAdvancedTab();

		Form.editFieldReferenceMetal(fieldValue = "ValueReference");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "2",
			fieldType = "Numeric");

		var fieldNameTotal = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Total");

		Form.gotoAdvancedTab();

		Form.editFieldReferenceMetal(fieldValue = "TotalReference");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.selectConditionField(
			conditionField = "Quantity",
			conditionRowNumber = "1");

		FormRules.selectConditionOperator(
			conditionOperator = "Is Not Empty",
			conditionRowNumber = "1");

		FormRules.selectAction(
			action = "Calculate",
			actionRowNumber = "1");

		FormRules.selectActionTarget(
			actionRowNumber = "1",
			actionTarget = "Total");

		FormRules.selectCalculateFieldByFieldReference(calculateFieldOption = "ValueReference");

		FormRules.chooseCalculateOperator(calculateOperator = "*");

		FormRules.selectCalculateFieldByFieldReference(calculateFieldOption = "QuantityReference");

		FormRules.viewCalculatorExpression(calculatorExpression = "Value*Quantity");

		FormRules.save();
	}

	@description = "LPS-80771 - Verify if an alert message is shown when the user tries to change the type of field that is being used in a Calculator Expression"
	@ignore = "true"
	@priority = "5"
	test DisplaysWarningWhenChangingFieldUsedInCalculatorExpression {
		FormsAdmin.addForm();

		Form.editName();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		var fieldNameNumericField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Numeric Field");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Numeric Field 2");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "2",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Total");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.selectConditionField(
			conditionField = "Numeric Field",
			conditionRowNumber = "1");

		FormRules.selectConditionOperator(
			conditionOperator = "Is Not Empty",
			conditionRowNumber = "1");

		FormRules.selectAction(
			action = "Calculate",
			actionRowNumber = "1");

		FormRules.selectActionTarget(
			actionRowNumber = "1",
			actionTarget = "Total");

		FormRules.selectCalculateField(calculateFieldOption = "Numeric Field");

		FormRules.chooseCalculateOperator(calculateOperator = "*");

		FormRules.selectCalculateField(calculateFieldOption = "Numeric Field 2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		FormsAdminNavigator.gotoEditField(fieldName = "${fieldNameNumericField}");

		Form.changeFieldTypeModalConfirmation(selectOption = "Select from List");

		FormsAdminNavigator.gotoRules();

		FormRules.viewBrokenRule(ruleNumber = "1");
	}

}