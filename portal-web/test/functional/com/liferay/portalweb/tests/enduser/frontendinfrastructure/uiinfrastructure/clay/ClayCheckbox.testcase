@component-name = "portal-frontend-infrastructure"
definition {

	property osgi.modules.includes = "frontend-taglib-clay-sample-web";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Clay";
	property testray.main.component.name = "User Interface";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Clay Sample Test Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Clay Sample Test Page",
			layoutTemplate = "1 Column");

		Navigator.gotoPage(pageName = "Clay Sample Test Page");

		Portlet.addPG(portletName = "Clay Sample");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();
		}
	}

	@description = "Verify clay checkbox API options can be configured"
	@priority = "5"
	@refactorneeded
	test CanBeConfigured {
		Navigator.gotoNavTab(navTab = "Form Elements");

		AssertChecked.assertCheckedNotVisible(
			key_definition = "On",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_definition = "Off",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertEditable.assertEditableNotVisible(locator1 = "ClaySamplePortlet#CHECKBOX_WITH_CUSTOM_CLASS_AND_ID");

		Check.checkNotVisible(
			checkboxName = "Checkbox with Label",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertNotEditable.assertNotEditableNotVisible(
			key_definition = "On disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertChecked.assertCheckedNotVisible(
			key_definition = "On disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertNotEditable.assertNotEditableNotVisible(
			key_definition = "Off disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_definition = "Off disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertEditable.assertEditableNotVisible(
			key_definition = "Indeterminate",
			locator1 = "ClaySamplePortlet#CHECKBOX");
	}

	@description = "Verify clay checkbox UI looks ok"
	@priority = "5"
	@refactorneeded
	test VerifyDefaultUI {
		Navigator.gotoNavTab(navTab = "Form Elements");

		Check.checkNotVisible(
			checkboxName = "Checkbox with Label",
			locator1 = "Checkbox#ANY_CHECKBOX");

		takeScreenshot();

		// Temporarily remove sikuli assertion until fix in LRQA-65984

		//SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#CHECKBOX_CHECKED");

		Uncheck.uncheckToggleSwitch(
			checkboxName = "Checkbox with Label",
			locator1 = "Checkbox#ANY_CHECKBOX");

		takeScreenshot();

		// Temporarily remove sikuli assertion until fix in LRQA-65984

		//SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#CHECKBOX_UNCHECKED");

		SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#CHECKBOX_INDETERMINATE_PNG");

		takeScreenshot();
	}

}