@component-name = "portal-wcm"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the user to site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a new site role") {
			JSONRole.addSiteRole(
				roleKey = "Roles Siterole Name",
				roleTitle = "Roles Siterole Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-96795. If not giving the individual content's update permission, content author with Update Page Content permission could only go to the edit mode."
	@priority = "2"
	test CannotEditAssetWithoutAssetUpdatePermission {
		task ("Define the permissions of new role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.journal",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add three web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content",
					groupName = "Test Site Name",
					title = "${webContentTitle}");
			}
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title field of first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display to page") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(
				contentPage = "true",
				webContentTitle = "WC WebContent Title 2");
		}

		task ("Add an Asset Publisher to page") {
			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the third web content in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title 3",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Open the Contents panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			ContentPages.clickPencil();

			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");
		}

		task ("Assert cannot access to web content editor via Contents panel") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				Click.clickAtNotVisible(
					key_rowEntry = "${webContentTitle}",
					locator1 = "Icon#FRAGMENT_PAGE_CONTENT_VERTICAL_ELLIPSIS");

				AssertElementNotPresent(
					key_menuItem = "Edit",
					locator1 = "MenuItem#ANY_MENU_ITEM");
			}
		}

		task ("Assert cannot access to web content editor via Asset Publisher and Web Content Display in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_webContentTitle = "WC WebContent Title 2",
				locator1 = "WCD#ARTICLE_BAREBONE_ELLIPSIS_ICON");

			AssertElementNotPresent(
				key_assetTitle = "WC WebContent Title 3",
				locator1 = "AP#SPECIFIC_ASSET_EDIT");
		}
	}

	@description = "This is a test for LPS-103454. Content author having permission to update blog entry could see edit icon in the content page displaying the blog and could edit blog in editmode. "
	@priority = "4"
	test EditBlogsEntryWithBlogEntryUpdatePermission {
		task ("Define the permissions of new role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.blogs.model.BlogsEntry",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a blogs entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add an Asset Publisher to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Select the blogs entry in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Open the Contents panel") {
			Navigator.gotoSitePage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			ContentPages.clickPencil();

			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");
		}

		task ("View access to blogs entry editor via Contents panel") {
			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Edit",
				rowEntry = "Blogs Entry Title");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Blogs Entry Title");
		}
	}

	@description = "This is a test for LPS-96795. Content author having permissions to create and update web content could see edit icon in the content page displaying the web contents and could edit web content in edit mode."
	@priority = "5"
	test EditContentWithCreateAndUpdateWebContentPermissions {
		property portal.acceptance = "true";

		task ("Define the permissions of site role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			for (var resourceActionIndex : list "VIEW,UPDATE_LAYOUT_CONTENT") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}

			for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			for (var resourceActionIndex : list "ADD_ARTICLE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.journal",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Edit the web contents via Contents panel") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

				LexiconEntry.gotoAdd();

				WebContent.addCP(
					webContentContent = "WC WebContent Content",
					webContentTitle = "${webContentTitle}");

				PortletEntry.publish();
			}
		}

		task ("Sign in as Test Test") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");
		}

		task ("Add an Asset Publisher below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the third web content in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title 3",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Edit the web contents via Contents panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			ContentPages.clickPencil();

			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				PageEditor.gotoTab(tabName = "Browser");

				Navigator.gotoNavTab(navTab = "Page Content");

				LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
					menuItem = "Edit",
					rowEntry = "${webContentTitle}");

				AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

				Navigator.gotoBack();
			}
		}
	}

	@description = "This is a test for LPS-96795. Content author having permissions to update web content and Update Page Content could see edit icon in the content page displaying the web contents and could edit web content in editmode."
	@priority = "5"
	test EditContentWithUpdateWebContentAndUpdatePageContentPermissions {
		property portal.acceptance = "true";

		task ("Define the permissions of new user") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.journal",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add three web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content",
					groupName = "Test Site Name",
					title = "${webContentTitle}");
			}
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of the first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");
		}

		task ("Add an Asset Publisher below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the third web content in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title 3",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert can access to web content editor via Asset Publisher in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			MouseOver(
				key_assetTitle = "WC WebContent Title 3",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			Click.clickNoMouseOver(
				key_assetTitle = "WC WebContent Title 3",
				locator1 = "AP#SPECIFIC_ASSET_EDIT");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Click(locator1 = "Icon#ANGLE_LEFT_BACK");
		}

		task ("Assert can access to web content editor via Contents panel in edit mode") {
			ContentPages.clickPencil();

			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				PageEditor.gotoTab(tabName = "Browser");

				Navigator.gotoNavTab(navTab = "Page Content");

				LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
					menuItem = "Edit",
					rowEntry = "${webContentTitle}");

				AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

				Click(locator1 = "Icon#ANGLE_LEFT_BACK");
			}
		}
	}

	@description = "This is a test for LPS-103454. Content author having permission to update web content could see edit icon in the content page displaying the web contents and could edit web content in editmode, but could not edit editable field "
	@priority = "5"
	test EditContentWithWebContentArticleUpdatePermission {
		property portal.acceptance = "true";

		task ("Define the permissions of new user") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add two web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content",
					groupName = "Test Site Name",
					title = "${webContentTitle}");
			}
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of the first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");
		}

		task ("Add a Paragraph fragment below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Web Content Display");

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Edit the web contents via Contents panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2") {
				PageEditor.gotoTab(tabName = "Browser");

				Navigator.gotoNavTab(navTab = "Page Content");

				LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
					menuItem = "Edit",
					rowEntry = "${webContentTitle}");

				AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

				Click(locator1 = "Icon#ANGLE_LEFT_BACK");
			}
		}

		task ("Assert the Paragraph is invisible to new user") {
			AssertElementNotPresent(
				key_fragmentName = "Paragraph",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}
	}

	@description = "This is a test for LPS-105109. Content author having permissions to update page content can introduce new inline content after clicking edit icon in content page."
	@priority = "5"
	test EditInlineContentWithUpdatePageContentPermission {
		property portal.acceptance = "true";

		task ("Define the permissions of new user") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a Paragraph fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Edit the inline content of Paragraph") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			ContentPages.clickPencil();

			AssertElementNotPresent(
				key_fragmentName = "Paragraph",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click(
				id = "element-text",
				key_fragmentName = "paragraph",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_WITHOUT_TOPPER");

			DoubleClick(
				id = "element-text",
				key_fragmentName = "paragraph",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_WITHOUT_TOPPER");

			Type(
				locator1 = "//*[contains(@class,'component-paragraph') and contains(@data-lfr-editable-id,'element-text')]/div[contains(@class,'cke_editable_inline')]",
				value1 = "New editable fragment text");

			PageEditor.clickManagementBar();

			PageEditor.waitForAutoSave();

			PageEditor.clickPublish();
		}

		task ("View the edited inline content in view mode") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "New editable fragment text");
		}
	}

	@description = "This is a test for LPS-125388. The new user can edit specific content page as site member with update permission."
	@priority = "4"
	test EditSpecificContentPageAsSiteMemberWithUpdatePermission {
		task ("Grant Update permission of specific content page to Site Member") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			SitePages.gotoPageMenuItem(
				menuItem = "Permissions",
				pageName = "Test Content Page Name");

			IFrame.selectPermissionsFrame();

			Check(
				key_actionName = "UPDATE",
				key_roleTitle = "site-member",
				locator1 = "Permissions#PERMISSIONS_MODAL_CHECKBOX");

			PortletEntry.save();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Add a Paragraph fragment to content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			ContentPages.clickPencil();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("View the Paragraph shown on content page at view mode") {
			WaitForVisible(locator1 = "Icon#EDIT_PENCIL");

			AssertVisible(
				id = "element-text",
				key_position = "1",
				key_text = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-105109. Content author having permissions to update page content can introduce new inline content after clicking edit icon in content page."
	@priority = "5"
	test MapContentWithUpdatePageContentPermission {
		property portal.acceptance = "true";

		task ("Define the permissions of new user") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC Webcontent Content",
				groupName = "Test Site Name",
				title = "WC Webcontent Title");
		}

		task ("Add a Paragraph fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Map the Title of web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Webcontent Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Map the Content of web content to editable field") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			ContentPages.clickPencil();

			AssertElementNotPresent(
				key_fragmentName = "Paragraph",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click(
				id = "element-text",
				key_fragmentName = "paragraph",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_WITHOUT_TOPPER");

			Pause(locator1 = "3000");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");

			PageEditor.waitForAutoSave();

			PageEditor.clickPublish();
		}

		task ("View mapped content in view mode") {
			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "WC Webcontent Content");
		}
	}

	@description = "This is a test for LPS-126159. The user can publish a content page without permissions for custom fields."
	@priority = "4"
	test PublishContentPageWithoutCustomFieldsPermission {
		task ("Add a custom field for Page") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Custom Fields");

			CustomFields.addCP(
				customFieldName = "Text Field",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				resourceName = "Page");
		}

		task ("Define the permissions of site role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.layout.seocom.liferay.layout.seo",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_LAYOUT",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Publish the page") {
			PageEditor.clickPublish();
		}
	}

	@description = "This is a test for LPS-103454. When one WC displayed in multiple fields in a content page, there should be one WC entry in Contents Panel list."
	@priority = "4"
	test ViewDisplayedWebContentInContentsPanelWithWebContentArticleUpdatePermission {
		task ("Define the permissions of new user") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of the web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");
		}

		task ("Add an Asset Publisher below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the web content in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the displayed web content in Contents panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			AssertVisible(
				key_itemName = "WC WebContent Title",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertElementNotPresent(
				index = "2",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM_POSITION");
		}
	}

}