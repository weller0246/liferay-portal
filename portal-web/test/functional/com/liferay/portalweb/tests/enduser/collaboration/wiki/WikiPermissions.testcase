@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Roles";
	property testray.main.component.name = "Wiki";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.firstLoginPG();

			PortalSettings.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			Role.tearDownCP();

			Organization.tearDownCP();

			Site.tearDownCP();

			Page.tearDownCP();
		}
	}

	@description = "This is a test for LPS-136986. It checks that page permissions can be configured via More Options."
	@ignore = "true"
	@priority = "3"
	test CanConfigurePermissionsViaMoreOptions {
		property portal.acceptance = "false";

		// TODO LPS-136986 CanConfigurePermissionsViaMoreOptions pending implementation

	}

	@description = "This ensures that a regular role with permissions can delete a wiki node."
	@priority = "4"
	@refactordone
	test CanDeleteWikiNodeWithPermissions {
		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_wiki_web_portlet_WikiAdminPortlet",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_NODE",
			resourceName = "com.liferay.wiki",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.wiki.model.WikiNode",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.addCP(wikiNodeName = "Wiki Node Name");

		WikiNode.deleteCP(wikiNodeName = "Wiki Node Name");

		WikiNode.viewNoCP(wikiNodeName = "Wiki Node Name");
	}

	@description = "This ensures that a regular role with permissions can delete a wiki page."
	@priority = "4"
	@refactordone
	test CanDeleteWikiPageWithPermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.assignUserToGroup(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(roleTitle = "Roles Siterole Name");

		JSONGroup.assignGroupRoleToUser(
			groupName = "Guest",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_wiki_web_portlet_WikiAdminPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_PAGE",
			resourceName = "com.liferay.wiki.model.WikiNode",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.wiki.model.WikiPage",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WikiNavigator.openToWikiNode(
			groupName = "Guest",
			siteURLKey = "guest",
			wikiNodeName = "Main");

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		WikiPage.deleteCP(wikiPageTitle = "Wiki Page Title");

		LexiconEntry.viewNoEntry(rowEntry = "Wiki Page Title");
	}

	@description = "This ensures that a regular role with permissions can edit a wiki node."
	@priority = "4"
	@refactordone
	test CanEditWikiNodeWithPermissions {
		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_wiki_web_portlet_WikiAdminPortlet",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_NODE",
			resourceName = "com.liferay.wiki",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.wiki.model.WikiNode",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.addCP(wikiNodeName = "Wiki Node Name");

		WikiNode.editCP(
			wikiNodeDescriptionEdit = "Wiki Node Description Edit",
			wikiNodeName = "Wiki Node Name",
			wikiNodeNameEdit = "Wiki Node Name Edit");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.viewCP(
			numberOfWikiPages = "0",
			wikiNodeName = "Wiki Node Name Edit");
	}

	@description = "This ensures that a regular role with permissions can edit a wiki page."
	@priority = "4"
	@refactordone
	test CanEditWikiPageWithPermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.assignUserToGroup(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(roleTitle = "Roles Siterole Name");

		JSONGroup.assignGroupRoleToUser(
			groupName = "Guest",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_wiki_web_portlet_WikiAdminPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_PAGE",
			resourceName = "com.liferay.wiki.model.WikiNode",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.wiki.model.WikiPage",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WikiNavigator.openToWikiNode(
			groupName = "Guest",
			siteURLKey = "guest",
			wikiNodeName = "Main");

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		WikiPage.editPageCP(
			wikiPageContentEdit = "Wiki Page Content Edit",
			wikiPageTitle = "Wiki Page Title");

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page Title");

		WikiPage.viewCP(
			wikiPageContent = "Wiki Page Content Edit",
			wikiPageTitle = "Wiki Page Title");
	}

	@description = "This ensures that users can not add wiki assets with a regular role without permissions."
	@priority = "4"
	@refactordone
	test CannotAddWikiAssetsWithRegularRoleWithoutPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_wiki_web_portlet_WikiAdminPortlet",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiPortlet.viewNoPermissionCP();
	}

	@description = "This ensures that users can not add wiki assets with a site role without permissions."
	@priority = "4"
	@refactordone
	test CannotAddWikiAssetsWithSiteRoleWithoutPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.assignUserToGroup(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(roleTitle = "Roles Siterole Name");

		JSONGroup.assignGroupRoleToUser(
			groupName = "Guest",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_wiki_web_portlet_WikiAdminPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiPortlet.viewNoPermissionCP();
	}

}