@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Fragment Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-108376. Can check Cacheable for fragments when create them in portal and they are non-Cachable by default."
	@priority = "5"
	test MarkFragmentCreatedInPortalAsCacheable {
		property portal.acceptance = "true";

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdminNavigator.gotoEntryEllipsisItem(
			entry = "Fragment Name",
			item = "Edit");

		AssertElementPresent(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Check.checkNotVisible(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		PortletEntry.publish();
	}

	@description = "This is a test for LPS-108376. Can check Cacheable for fragments without Read-Only label imported to portal and they are non-Cachable by default."
	@priority = "4"
	test MarkFragmentWithoutReadOnlyImportedToPortalAsCacheable {
		FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdminNavigator.gotoEntryEllipsisItem(
			entry = "Content",
			item = "Edit");

		AssertElementNotPresent(locator1 = "FragmentEditor#READ_ONLY_VIEW");

		AssertElementPresent(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Check.checkNotVisible(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		PortletEntry.publish();
	}

	@description = "This is a test for LPS-111657. Can save Container and nested elements as a new composition when the Container is inside a column of Row."
	@priority = "5"
	test SaveContainerAsCompositionInModuleOfGrid {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Add a Grid to page") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a Container to the first module of grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "1",
				fragmentName = "Container",
				navTab = "Fragments");
		}

		task ("Add an Image to the Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Image",
				navTab = "Fragments");
		}

		task ("Add an Asset Publisher below Image inside the Container") {
			PageEditor.gotoTab(tabName = "Widgets");

			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#WIDGETS_APPLICATION_SEARCH_FIELD",
				value1 = "Asset Publisher");

			DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
				key_portletName = "Asset Publisher",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Image')]//following-sibling::div[contains(@class,'page-editor__topper__content')]",
				value1 = "Asset Publisher");

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			PageEditor.waitForAutoSave();

			PageEditor.gotoTab(tabName = "Browser");

			PageEditor.gotoTab(tabName = "Fragments and Widgets");
		}

		task ("Assert save Container and nested elements as composition") {
			PageEditor.gotoSaveAsFragment(fragmentName = "Container");

			PageEditorComposition.saveAsFragment(fragmentName = "New Fragment Name");
		}

		task ("Add new composition to below Grid to page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				composition = "true",
				fragmentName = "New Fragment Name",
				targetFragmentName = "Grid");

			for (var elementName : list "Image,Asset Publisher") {
				AssertElementPresent(
					key_elementHeader = "//li[contains(@class,'topper__title') and contains(.,'${elementName}')]",
					key_position = "2",
					locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
			}
		}
	}

	@description = "This is a test for LPS-101258. Can save a composition containing a fragment that has a Drop Zone area as fragment."
	@priority = "4"
	test SaveFragmentCompositionWithDropZoneInFragment {
		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdminNavigator.gotoEntry(entry = "Fragment Name");

		FragmentsEditor.typeHtmlEditor(content = '''<lfr-drop-zone id="drop-zone"></lfr-drop-zone>''');

		Button.clickPublish();

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.addElementToContainer(
			collectionName = "Collection Name",
			fragmentName = "Fragment Name",
			navTab = "Fragments");

		PageEditor.gotoSaveAsFragment(fragmentName = "Container");

		PageEditorComposition.saveAsFragment(fragmentName = "New Fragment Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name 2",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name 2",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			composition = "true",
			fragmentName = "New Fragment Name");

		AssertElementPresent(
			key_elementHeader = "//div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Fragment Name')]//li[contains(@class,'title')]",
			key_position = "1",
			locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
	}

	@description = "This is a test for LPS-101230 and LPS-100540. Global fragments are visible in fragment admin and added ones are visible in Test Site Name site. Global fragments "View Site Usages" option is not available if fragment is not used in any page"
	@priority = "5"
	test ViewGlobalFragments {
		property osgi.module.configuration.file.names = "com.liferay.fragment.web.internal.configuration.FragmentGlobalPanelAppConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add a fragment collection in Global site") {
			JSONFragment.addFragmentCollection(
				groupName = "Global",
				name = "Global Collection Name");
		}

		task ("Navigate to the fragment collection") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Global Collection Name");
		}

		task ("Add a section fragment that uses the Button fragment code") {
			FragmentsAdmin.addFragment(fragmentName = "Global Fragment Name 1");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.css");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.js");
		}

		task ("Publish the section fragment") {
			Button.clickPublish();
		}

		task ("Assert the fragment appears in Fragments Admin") {
			FragmentsAdmin.viewEntryPresent(entry = "Global Fragment Name");
		}

		task ("Assert the View Site Usages doesn not display in fragment's kebab menu") {
			LexiconCard.viewMenuItemNotPresent(
				card = "Global Fragment Name 1",
				item = "View Site Usages");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				fragmentStatus = "Approved",
				groupName = "Global",
				name = "Global Fragment Name 2");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Navigate to Global Collection") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Global Collection Name");
		}

		task ("Assert the fragments appear in Fragments Admin") {
			FragmentsAdmin.viewEntryPresent(entry = "Global Fragment Name 1");
			FragmentsAdmin.viewEntryPresent(entry = "Global Fragment Name 2");
		}
	}

	@description = "This is a test for LPS-100540. Global fragments "View Site Usages" option shows all the Sites that use the fragment and how many usages there are per site"
	@priority = "5"
	test ViewGlobalFragmentsSiteUsages {
		property osgi.module.configuration.file.names = "com.liferay.fragment.web.internal.configuration.FragmentGlobalPanelAppConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add a fragment collection in Global site") {
			JSONFragment.addFragmentCollection(
				groupName = "Global",
				name = "Global Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				fragmentStatus = "Approved",
				groupName = "Global",
				name = "Global Fragment Name 1");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				fragmentStatus = "Approved",
				groupName = "Global",
				name = "Global Fragment Name 2");
		}

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Global Collection Name",
			fragmentName = "Global Fragment Name 1");

		PageEditor.addFragment(
			collectionName = "Global Collection Name",
			fragmentName = "Global Fragment Name 2",
			targetFragmentName = "Global Fragment Name 1");

		PageEditor.clickPublish();

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name 2",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name 2",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Global Collection Name",
			fragmentName = "Global Fragment Name 1");

		PageEditor.addFragment(
			collectionName = "Global Collection Name",
			fragmentName = "Global Fragment Name 2",
			targetFragmentName = "Global Fragment Name 1");

		PageEditor.clickPublish();

		JSONGroup.addGroup(groupName = "Test Site Name 2");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name 2",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name 2");

		PageEditor.addFragment(
			collectionName = "Global Collection Name",
			fragmentName = "Global Fragment Name 1");

		PageEditor.clickPublish();

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

		FragmentsAdminNavigator.gotoEntryEllipsisItem(
			entry = "Global Fragment Name 1",
			item = "View Site Usages");

		AssertTextEquals(
			locator1 = "//tr[1]/td[2]",
			value1 = "Test Site Name");

		AssertTextEquals(
			locator1 = "//tr[1]/td[3]",
			value1 = "4");

		AssertTextEquals(
			locator1 = "//tr[2]/td[2]",
			value1 = "Test Site Name 2");

		AssertTextEquals(
			locator1 = "//tr[2]/td[3]",
			value1 = "2");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

		FragmentsAdminNavigator.gotoEntryEllipsisItem(
			entry = "Global Fragment Name 2",
			item = "View Site Usages");

		AssertTextEquals(
			locator1 = "//tr[1]/td[2]",
			value1 = "Test Site Name");

		AssertTextEquals(
			locator1 = "//tr[1]/td[3]",
			value1 = "4");

		AssertElementNotPresent(locator1 = "//*[contains(.,'Test Site Name 2')]");
	}

}