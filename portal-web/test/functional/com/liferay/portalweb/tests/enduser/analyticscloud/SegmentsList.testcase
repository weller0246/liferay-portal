@component-name = "portal-analytics-cloud"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8462 | Test Summary: Inform the User when there are no disabled Segments"
	@priority = "3"
	test AssertUserIsInformedWhenThereAreNoDisabledSegments {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Segments and filter by "Disable Segments"") {
			ACNavigation.goToSegments();

			ACSegments.filterAndOrderForSegLists(filterName = "Disabled Segments");
		}

		task ("Assert there is message There are no Segments found.") {
			ACUtils.viewNoResultsMessage(noResultMessage = "There are no Segments found.");
		}
	}

	@description = "Search for specific segment"
	@priority = "5"
	test CanSearchForSegment {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		for (var name : list "ac,userea") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,userea") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.openURL();

			Pause(locator1 = "5000");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test 2");

		ACSegments.addStaticMember(tableMember = "userea userea");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Static Segment Test");

		ACSegments.viewSegmentName(searchTerm = "Static Segment Test 2");

		ACSegments.deleteSegment(searchTerm = "Static Segment Test");

		ACSegments.deleteSegment(searchTerm = "Static Segment Test 2");
	}

	@description = "Search for specific segment"
	@priority = "5"
	test CanShowSegmentList {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openURL();

		Pause(locator1 = "5000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "userfn userln");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "email");

		ACSegments.editTextCriterion(textInput = "userea@liferay.com");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.assertSegmentPresent(segmentName = "Static Segment Test");

		ACSegments.assertSegmentPresent(segmentName = "Dynamic Segment Test");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8578 | Test Summary: Order the Segment List By Membership"
	@priority = "4"
	test OrderSegmentListByMembership {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Add 5 more new users") {
			for (var n : list "1,2,3") {
				JSONUser.addUser(
					userEmailAddress = "user${n}@liferay.com",
					userFirstName = "user${n}",
					userLastName = "user${n}",
					userScreenName = "user${n}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "user${n}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			for (var username : list "user1,user2,user3") {
				var fullName = "${username} ${username}";

				User.logoutAndLoginPG(
					userLoginEmailAddress = "${username}@liferay.com",
					userLoginFullName = "${fullName}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");
			}

			ACUtils.closeAllSessions();

			Pause(locator1 = "5000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add 3 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACSegments.nameSegment(segmentName = "${segmentName}");

				if ("${segmentName}" == "Static Segment Test1") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1,user2 user2,user3 user3");
				}

				if ("${segmentName}" == "Static Segment Test2") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1,user2 user2");
				}

				if ("${segmentName}" == "Static Segment Test3") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1");
				}

				ACSegments.saveSegment();
			}
		}

		task ("Go to Segments and filter by "Membership"") {
			ACNavigation.goToSegments();

			ACSegments.filterAndOrderForSegLists(filterName = "Membership");
		}

		task ("Assert 3 segments in order filter by membership display") {
			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_1",
				value1 = "Static Segment Test1");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_2",
				value1 = "Static Segment Test2");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_3",
				value1 = "Static Segment Test3");
		}

		task ("Check descending arrow descending of table title of Membership") {
			ACUtils.orderTableTitleArrow(type = "up");
		}

		task ("Assert 3 segments in order filter by membership display") {
			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_1",
				value1 = "Static Segment Test3");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_2",
				value1 = "Static Segment Test2");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_3",
				value1 = "Static Segment Test1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8460 | Test Summary: Order the Segment List By Name"
	@priority = "4"
	test OrderSegmentListByName {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			var fullName = "userfn userln";

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "${fullName}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessions();

			Pause(locator1 = "5000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add 3 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACSegments.nameSegment(segmentName = "${segmentName}");

				ACSegments.addStaticMember(tableMember = "userfn userln");

				ACSegments.saveSegment();
			}
		}

		task ("Go to Segments and filter by "Name"") {
			ACNavigation.goToSegments();

			ACSegments.filterAndOrderForSegLists(filterName = "Name");
		}

		task ("Assert 3 segments filter by name display") {
			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_1",
				value1 = "Static Segment Test1");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_2",
				value1 = "Static Segment Test2");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_3",
				value1 = "Static Segment Test3");
		}

		task ("Go to Segments and filter by descending order of "Name"") {
			ACNavigation.goToSegments();

			ACUtils.orderArrow(type = "descending");
		}

		task ("Assert 3 segments in order filter by membership display") {
			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_1",
				value1 = "Static Segment Test3");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_2",
				value1 = "Static Segment Test2");

			AssertTextEquals(
				locator1 = "ACSegments#SEGMENT_POSITION_3",
				value1 = "Static Segment Test1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8461 | Test Summary: Paginate Segment list"
	@priority = "3"
	test PaginateSegmentList {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			var fullName = "userfn userln";

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "${fullName}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add 6 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5,Static Segment Test6") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACSegments.nameSegment(segmentName = "${segmentName}");

				ACSegments.addStaticMember(tableMember = "userfn userln");

				ACSegments.saveSegment();
			}
		}

		task ("Assert 6 segments display") {
			ACNavigation.goToSegments();

			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5,Static Segment Test6") {
				ACSegments.assertSegmentPresent(segmentName = "${segmentName}");
			}
		}

		task ("Assert default pagination display "20 Items" message and page number") {
			AssertTextEquals.assertText(
				locator1 = "ACUtils#PAGINATION_ITEMS_PER_PAGE_SELECT",
				value1 = "20 Items");

			ACUtils.viewResultsMessage(results = "Showing 1 to 6 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");
		}

		task ("Change the pagination to "5"") {
			ACUtils.changePagination(itemsPerPage = "5");

			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5") {
				ACSegments.assertSegmentPresent(segmentName = "${segmentName}");
			}

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");

			ACUtils.viewResultsPages(pageNumber = "2");
		}

		task ("Page number display 1 2 and check previous next button") {
			ACUtils.checkPreviousNextButton(nextButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 6 to 6 of 6 entries.");

			ACSegments.assertSegmentPresent(segmentName = "Static Segment Test6");

			ACUtils.checkPreviousNextButton(previousButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 6 entries.");
		}
	}

}