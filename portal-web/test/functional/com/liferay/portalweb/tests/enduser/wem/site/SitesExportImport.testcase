@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			Navigator.openURL();

			Site.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-96391."
	@priority = "5"
	test ExportImportSiteWithEmbeddedWCDInFragment {
		property portal.acceptance = "true";
		property testray.component.names = "Content Pages,Site Administration";

		JSONFragment.addFragmentCollection(
			groupName = "Test Site Name",
			name = "Collection Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		var fragmentHTML = '''<lfr-widget-web-content>''';
		var htmlSnippet = '''<lfr-''';

		FragmentsEditor.autocompleteFragmentHTML(
			autocompleteField = "lfr-widget-web-content",
			fragmentHTML = "${fragmentHTML}",
			htmlSnippet = "${htmlSnippet}");

		PortletEntry.publish();

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Fragment Name");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			webContentTitle = "WC WebContent Title");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		LAR.exportSiteCP(siteScopeName = "Test Site Name");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent New Content",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent New Title");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent New Content");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@description = "This is a test for LPS-98501. Export and import the whole site where a content page with a global fragment."
	@priority = "4"
	test ExportImportSiteWithGlobalFragmentInContentPage {
		property testray.main.component.name = "Content Pages";

		task ("Add a fragment collection in Global site") {
			JSONFragment.addFragmentCollection(
				groupName = "Global",
				name = "Global Collection Name");
		}

		task ("Add a fragment in global fragment collection") {
			var newLine = '''
''';

			var htmlSnippet = '''
<${configuration.headingLevel} class="component-heading mb-0 text-break" data-lfr-editable-id="element-text" data-lfr-editable-type="text">
	Heading Example
</${configuration.headingLevel}>
			''';
			var htmlSnippet = StringUtil.regexReplaceAll("${htmlSnippet}", "${newLine}", "");

			var jsonSnippet = '''
{
	"fieldSets": [
		{
			"fields": [
				{
					"dataType": "string",
					"defaultValue": "h1",
					"label": "heading-level",
					"name": "headingLevel",
					"type": "select",
					"typeOptions": {
						"validValues": [
							{
								"value": "h1"
							},
							{
								"value": "h2"
							},
							{
								"value": "h3"
							},
							{
								"value": "h4"
							},
							{
								"value": "h5"
							},
							{
								"value": "h6"
							}
						]
					}
				}
			]
		}
	]
}
			''';
			var jsonSnippet = StringUtil.regexReplaceAll("${jsonSnippet}", "${newLine}", "");

			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Global",
				html = "${htmlSnippet}",
				name = "Global Fragment Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a global fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Global Collection Name",
				fragmentName = "Global Fragment Name");

			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Global Fragment Name",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Export the site") {
			LAR.exportSiteCP(siteScopeName = "Test Site Name");

			var key_larFileName = "${larFileName}";

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("Import the lar file to a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Site Name");
		}

		task ("View the global fragment shown in content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");
		}
	}

	@description = "This is a test for LPS-122296. Can export and import a site containing a content page with a mapped image."
	@priority = "5"
	test ExportImportSiteWithMappedImage {
		property portal.acceptance = "true";

		task ("Add a page based on Blank") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add an Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map the image of Basic Document to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Document_1.jpg",
				navItem = "Documents and Media",
				uploadFileName = "Document_1.jpg");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Preview Image");

			PageEditor.waitForAutoSave();

			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");

			PageEditor.clickPublish();
		}

		task ("Export the site") {
			LAR.openExportAdmin(siteScopeName = "test-site-name");

			LexiconEntry.gotoAdd();

			LAR.exportWithAssertionOnSuccess();

			LAR.downloadLar();
		}

		task ("Add a new site based on Blank Site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Import the lar into the new site") {
			var larFileName = LAR.getLarFileName();

			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Site Name");
		}

		task ("Assert the mapped image is shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}
	}

	@description = "This is a use case for LPS-120198. Export and import the whole site where a content page with fragment linked to page."
	@priority = "4"
	test ExportImportSiteWithMappedPage {
		task ("Add the first content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.clickPublish();
		}

		task ("Add the second content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map the content page to editable field of Button") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Button",
				id = "link",
				pageName = "Test Content Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertVisible(
				key_contentName = "Test Content Page Name",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT");
		}

		task ("View selected page is linked to Button fragment") {
			var baseURL = PropsUtil.get("portal.url");

			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "${baseURL}/web/test-site-name/test-content-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Publish the content page") {
			PortletEntry.publish();
		}

		task ("Export the site") {
			LAR.exportSiteCP(siteScopeName = "Test Site Name");

			var key_larFileName = "${larFileName}";

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("Import the lar file to a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Site Name");
		}

		task ("Navigate to content page in new site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "${baseURL}/web/site-name/test-content-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Assert redirect to content page in the new site") {
			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Content Page Name");

			AssertLocation.assertPartialLocation(value1 = "web/site-name/test-content-page-name");
		}
	}

	@description = "This is a test for LPS-133032. Can export and import a site containing a style book."
	@priority = "4"
	test ExportImportSiteWithStyleBook {
		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Export the site") {
			LAR.openExportAdmin(siteScopeName = "test-site-name");

			LexiconEntry.gotoAdd();

			LAR.exportWithAssertionOnSuccess();

			LAR.downloadLar();
		}

		task ("Add a new site based on Blank Site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Import the lar into the new site") {
			var larFileName = LAR.getLarFileName();

			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Site Name");
		}

		task ("Assert no error and the style book persists") {
			AssertConsoleTextNotPresent(value1 = "com.liferay.style.book.exception.DuplicateStyleBookEntryKeyException");

			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "site-name");

			StyleBooksAdmin.viewStyleBooksPresent(styleBookName = "Test Style Book Name");
		}
	}

	@description = "This is a test for LPS-128151. The user can import a site with Home page into the default site."
	@priority = "4"
	test ImportSiteWithHomePageToDefaultSite {
		task ("Add a content page named Home") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Home",
				type = "content");
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PortletEntry.publish();
		}

		task ("View the friendly URL of content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Home",
				siteName = "Test Site Name");

			AssertLocation.assertPartialLocation(value1 = "/home");
		}

		task ("View the Button fragment shown on content page at view mode") {
			AssertVisible(
				id = "link",
				key_position = "1",
				key_text = "Go Somewhere",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");
		}

		task ("Export the new site") {
			LAR.exportSiteCP(siteScopeName = "Test Site Name");

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("Import the new site into the default site") {
			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Guest");
		}

		task ("View the friendly URL of content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Home",
				siteName = "Guest");

			AssertLocation.assertPartialLocation(value1 = "/home");
		}

		task ("View the Button fragment shown on content page at view mode") {
			AssertVisible(
				id = "link",
				key_position = "1",
				key_text = "Go Somewhere",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");
		}
	}

}