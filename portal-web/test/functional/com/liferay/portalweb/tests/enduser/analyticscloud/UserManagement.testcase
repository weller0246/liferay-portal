@component-name = "portal-analytics-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Launch AC") {
			ACUtils.launchAC();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Automation ID: LRAC-9093 | Test Summary: Admin can add data sources"
	@priority = "4"
	test AdminCanAddDataSources {
		task ("Logout AC and login as an admin user") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "michelle.hoshi@faro.io",
				password = "test");
		}

		task ("Go to settings, data source, take token and launch dxp") {
			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();

			ACSettings.takeTokenFromAnalyticsCloud();

			ACUtils.launchDXP();
		}

		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

			var dataSource = StringUtil.replace("${propertyName}", " Combined Property", "");

			ACUtils.launchAC();
		}

		task ("Login in AC, go to settings then go to data sources") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "michelle.hoshi@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();
		}

		task ("Assert that a data source is searchable and found") {
			ACUtils.searchBar(searchItem = "${dataSource}");

			ACNavigation.openItem(itemName = "${dataSource}");

			ACSettings.assertDataSourceStatus(status = "Active");
		}
	}

	@description = "Automation ID: LRAC-9095 | Test Summary: Admin can change user permissions"
	@priority = "3"
	test AdminCanChangeUserPermissions {
		task ("SingOut and Login as administrator") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "michelle.hoshi@faro.io",
				password = "test");
		}

		task ("Go to Data Sources") {
			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			ACSettings.addUser(userInvite = "ac@liferay.com");
		}

		task ("Assert user permission") {
			ACSettings.assertUserPermission(
				permissionType = "Member",
				userEmail = "ac@liferay.com");
		}

		task ("Change user permission") {
			ACSettings.changeMultipleUsersPermissions(
				permissionType = "Administrator",
				userEmail = "ac@liferay.com");
		}

		task ("Assert user permission") {
			ACSettings.assertUserPermission(
				permissionType = "Administrator",
				userEmail = "ac@liferay.com");
		}
	}

	@description = "Automation ID: LRAC-9094 | Test Summary: Admin can remove data sources"
	@priority = "3"
	test AdminCanRemoveDataSources {
		task ("Logout AC and login as an admin user") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "michelle.hoshi@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();
		}

		task ("Go to settings, data source, take token and launch dxp") {
			ACNavigation.goToSettings();

			ACSettings.goToDataSources();

			ACSettings.takeTokenFromAnalyticsCloud();

			ACUtils.launchDXP();
		}

		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

			var dataSource = StringUtil.replace("${propertyName}", " Combined Property", "");

			ACUtils.launchAC();
		}

		task ("Login in AC, go to settings then go to data sources") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "michelle.hoshi@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();
		}

		task ("Assert that a data source is searchable and found") {
			ACUtils.searchBar(searchItem = "${dataSource}");

			ACNavigation.openItem(itemName = "${dataSource}");

			ACSettings.assertDataSourceStatus(status = "Active");
		}

		task ("Assert that a data source is searchable and found") {
			ACSettings.goToDataSources();

			ACSettings.deleteDataSource(dataSourceName = "${dataSource}");

			AssertTextEquals(
				key_listStatus = "Deletion in progress",
				locator1 = "ACSettings#DATA_SOURCE_LIST_STATUS",
				value1 = "Deletion in progress");
		}
	}

	@description = "Automation ID: LRAC-9085 | Test Summary: Change a member to an admin and assert new permissions"
	@priority = "3"
	test AssertNewAdminPermissions {
		var userEmail = "user@liferay.com";

		task ("Go to settings and go to user management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			ACSettings.addUser(userInvite = "${userEmail}");
		}

		task ("Change user permission") {
			ACSettings.changeUserRole(
				newRole = "Administrator",
				permissionType = "Member",
				userEmail = "${userEmail}");
		}

		task ("Assert user permission") {
			ACSettings.assertUserPermission(
				permissionType = "Administrator",
				userEmail = "${userEmail}");
		}

		task ("Delete Pending All Users") {
			ACSettings.deleteAllPendingUsers();
		}
	}

	@description = "Automation ID: LRAC-9086 | Test Summary: Change an admin to a member and assert new permissions"
	@priority = "3"
	test AssertNewMemberPermissions {
		var userEmail = "user@liferay.com";

		task ("Go to settings and go to user management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			ACSettings.addUser(userInvite = "${userEmail}");
		}

		task ("Change and assert the permission") {
			ACSettings.changeUserRole(
				newRole = "Administrator",
				permissionType = "Member",
				userEmail = "${userEmail}");

			ACSettings.assertUserPermission(
				permissionType = "Administrator",
				userEmail = "${userEmail}");

			ACSettings.changeUserRole(
				newRole = "Member",
				permissionType = "Administrator",
				userEmail = "${userEmail}");

			ACSettings.assertUserPermission(
				permissionType = "Member",
				userEmail = "${userEmail}");
		}

		task ("Delete Pending All Users") {
			ACSettings.deleteAllPendingUsers();
		}
	}

	@description = "Automation ID: LRAC-9089 | Test Summary: Select multiple users to change permissions at once."
	@priority = "3"
	test ChangeMultipleUserPermissions {
		var firstUser = "ac@liferay.com";
		var secondUser = "ac2@liferay.com";

		task ("Go to User Management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			for (var users : list "${firstUser},${secondUser}") {
				ACSettings.addUser(userInvite = "${users}");
			}
		}

		task ("Assert user permission") {
			for (var users : list "${firstUser},${secondUser}") {
				ACSettings.assertUserPermission(
					permissionType = "Member",
					userEmail = "${users}");
			}
		}

		task ("Change user permission") {
			ACSettings.changeMultipleUsersPermissions(
				permissionType = "Administrator",
				userEmail = "${firstUser},${secondUser}");
		}

		task ("Assert user permission") {
			for (var users : list "${firstUser},${secondUser}") {
				ACSettings.assertUserPermission(
					permissionType = "Administrator",
					userEmail = "${users}");
			}
		}

		task ("Delete Pending All Users") {
			ACSettings.deleteAllPendingUsers();
		}
	}

	@description = "Automation ID: LRAC-9084 | Test Summary: [AC] Change the user role and check if the Properties creation handles the mofification successfully"
	@priority = "3"
	test ChangeUserRoleAndAssertSuccessNotification {
		var userEmail = "user@liferay.com";

		task ("Go to User Management and invite a user") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();

			ACSettings.addUser(userInvite = "${userEmail}");
		}

		task ("Change user permission") {
			ACSettings.changeUserRole(
				newRole = "Administrator",
				permissionType = "Member",
				userEmail = "${userEmail}");
		}

		task ("Assert that the role was changed") {
			Alert.viewSuccessMessageText(successMessage = "Success:Permissions have been changed for 1 users.");

			ACSettings.assertUserPermission(
				permissionType = "Administrator",
				userEmail = "${userEmail}");
		}
	}

	@description = "Automation ID: LRAC-9080 | Test Summary: 1st user access and no property was selected yet"
	@ignore = "true"
	@priority = "3"
	test FirstUserAccessNopropertySelected {

		// TODO LRAC-9080 FirstUserAccessNopropertySelected

	}

	@description = "Automation ID: LRAC-9078 | Test Summary: The logged in user accesses directly an authorized workspace but a data source which the user does not have access "
	@ignore = "true"
	@priority = "3"
	test LoggedUserAccessesDirectlyAuthorizedWorkspaceWithoutAccess {

		// TODO LRAC-9078 LoggedUserAccessesDirectlyAuthorizedWorkspaceWithoutAccess

	}

	@description = "Automation ID: LRAC-9076 | Test Summary: The logged in user accesses directly an inexistent workspace"
	@priority = "3"
	test LoggedUserAcessesDirectlyInexistentWorkspace {
		task ("Open an inexistent workspace in a new tab") {
			Open.openInTheNewTab(locator1 = "http://localhost:8080/workspace/sites");
		}

		task ("Switch to the new tab") {
			SelectWindow(locator1 = "title=Analytics Cloud");
		}

		task ("Assert the error message") {
			AssertTextEquals.assertPartialText(
				locator1 = "ACWorkspace#WORKSPACE_ERROR_DESCRIPTION",
				value1 = "Either this workspace doesn't exist or you don't have access to it.");
		}
	}

	@description = "Automation ID: LRAC-9075 | Test Summary: The logged in user does not have access to the workspace"
	@ignore = "true"
	@priority = "3"
	test LoggedUserDoesNotHaveAccessWorkspace {

		// TODO LRAC-9075 LoggedUserDoesNotHaveAccessWorkspace

	}

	@description = "Automation ID: LRAC-9096 | Test Summary: Member cannot add data sources"
	@priority = "4"
	test MemberCannotAddDataSources {
		task ("Login as user with member role") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");
		}

		task ("Go to Data Sources") {
			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();
		}

		task ("Assert that the button 'Add Data Source' is not present") {
			AssertElementNotPresent(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}
	}

	@description = "Automation ID: LRAC-9098 | Test Summary: Member cannot change user permissions"
	@priority = "4"
	test MemberCannotChangeUserPermissions {
		task ("Go to AC and Login as user with member role") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");
		}

		task ("Go to User Management") {
			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Assert that the button 'Edit' is not present") {
			AssertElementNotPresent(locator1 = "Button#EDIT");
		}
	}

	@description = "Automation ID: LRAC-9097 | Test Summary: Member cannot remove data sources"
	@priority = "4"
	test MemberCannotRemoveDataSources {
		task ("Connect DXP to AC") {
			ACSettings.takeTokenFromAnalyticsCloud();

			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Get the Data Source name") {
			var dataSource = StringUtil.replace("${propertyName}", " Combined Property", "");
		}

		task ("Go to AC and Login as user with member role") {
			ACUtils.launchAC();

			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");
		}

		task ("Go to Data Sources") {
			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();

			ACNavigation.openItem(itemName = "${dataSource}");
		}

		task ("Assert that the button 'Delete Data Source' is not present") {
			AssertElementNotPresent(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");
		}
	}

	@description = "Automation ID: LRAC-9083 | Test Summary: [AC] Only admin or owner users are able to add properties on AC"
	@priority = "3"
	test OnlyAdminOrOwnerUsersCanAddPropertiesOnAC {
		var userList = "michelle.hoshi@faro.io,bryan.cheung@faro.io";

		for (var userEmail : list "${userList}") {
			task ("Logout AC and login as an admin/owner user") {
				ACWorkspace.signOut();

				ACLogin.loginAs(
					emailAddress = "${userEmail}",
					password = "test");
			}

			task ("Go To Settings then Go To Properties") {
				ACWorkspace.openWorkspace();

				ACNavigation.goToSettings();

				ACSettings.goToProperties();
			}

			task ("Add a New Property and Assert The New Property was Created") {
				ACProperties.addNewProperty(propertyName = "Name of property");

				if ("${userEmail}" == "michelle.hoshi@faro.io") {
					ACProperties.assertNewCreatedProperty(propertyName = "Name of property");
				}
				else {
					ACProperties.assertNewCreatedProperty(propertyName = "Name of property (1)");
				}
			}
		}

		task ("Logout and Login as Member") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");
		}

		task ("Go To Settings then Go To Properties") {
			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Assert New Property Button is Not Present") {
			AssertElementNotPresent(locator1 = "ACSettings#NEW_PROPERTY_BUTTON");
		}
	}

	@description = "Automation ID: LRAC-9090 | Test Summary: Owner can add data sources"
	@priority = "5"
	test OwnerCanAddDataSources {
		task ("Logout and login as an owner user") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "bryan.cheung@faro.io",
				password = "test");
		}

		task ("Go to settings, data source, take token and launch dxp") {
			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();

			ACSettings.takeTokenFromAnalyticsCloud();

			ACUtils.launchDXP();
		}

		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

			var dataSource = StringUtil.replace("${propertyName}", " Combined Property", "");

			ACUtils.launchAC();
		}

		task ("Login in AC, go to settings then go to data sources") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "bryan.cheung@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();
		}

		task ("Assert that a data source is searchable and found") {
			ACUtils.searchBar(searchItem = "${dataSource}");

			ACNavigation.openItem(itemName = "${dataSource}");

			ACSettings.assertDataSourceStatus(status = "Active");
		}
	}

	@description = "Automation ID: LRAC-9092 | Test Summary: Owner can change user permissions"
	@priority = "5"
	test OwnerCanChangeUserPermissions {
		var userEmail = "ac@liferay.com";

		task ("Login with another Owner User") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "bryan.cheung@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();
		}

		task ("Go to User Management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			ACSettings.addUser(userInvite = "${userEmail}");
		}

		task ("Change user permission") {
			ACSettings.changeUserRole(
				newRole = "Administrator",
				permissionType = "Member",
				userEmail = "${userEmail}");
		}

		task ("Assert user permission") {
			ACSettings.assertUserPermission(
				permissionType = "Administrator",
				userEmail = "${userEmail}");
		}

		task ("Delete Pending All Users") {
			ACSettings.deleteAllPendingUsers();
		}
	}

	@description = "Automation ID: LRAC-9091 | Test Summary: Owner can remove data sources"
	@priority = "5"
	test OwnerCanRemoveDataSources {
		task ("Connect DXP to AC") {
			ACSettings.takeTokenFromAnalyticsCloud();

			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Get the Data Source name") {
			var dataSource = StringUtil.replace("${propertyName}", " Combined Property", "");
		}

		task ("Go to AC and login with another Owner User") {
			ACUtils.launchAC(emailAddress = "bryan.cheung@faro.io");
		}

		task ("Delete the data source and check if it has been deleted") {
			ACSettings.deleteDataSource(dataSourceName = "${dataSource}");

			AssertElementNotPresent(
				itemName = "${dataSource}",
				locator1 = "ACSettings#ITEM_ON_LIST");
		}
	}

	@description = "Automation ID: LRAC-9088 | Test Summary: Select and change an admin + member to admins"
	@priority = "3"
	test SelectandChangeAnAdminAndMemberToAdmins {
		var firstUser = "ac@liferay.com";
		var secondUser = "ac2@liferay.com";

		task ("Go to User Management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			for (var users : list "${firstUser},${secondUser}") {
				ACSettings.addUser(userInvite = "${users}");
			}
		}

		task ("Change user permission") {
			ACSettings.changeUserRole(
				newRole = "Administrator",
				permissionType = "Member",
				userEmail = "${firstUser}");
		}

		task ("Assert user permission") {
			ACSettings.assertUserPermission(
				permissionType = "Administrator",
				userEmail = "${firstUser}");
		}

		task ("Change permission for all selected users") {
			ACSettings.changeMultipleUsersPermissions(
				permissionType = "Administrator",
				userEmail = "${firstUser},${secondUser}");
		}

		task ("Assert user permission") {
			for (var users : list "${firstUser},${secondUser}") {
				ACSettings.assertUserPermission(
					permissionType = "Administrator",
					userEmail = "${users}");
			}
		}

		task ("Delete Pending All Users") {
			ACSettings.deleteAllPendingUsers();
		}
	}

	@description = "Automation ID: LRAC-9087 | Test Summary: Select and change an admin + member to members"
	@priority = "3"
	test SelectAndChangeAnAdminAndMembertoMembers {
		var firstUser = "ac@liferay.com";
		var secondUser = "ac2@liferay.com";

		task ("Go to User Management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			for (var users : list "${firstUser},${secondUser}") {
				ACSettings.addUser(userInvite = "${users}");
			}
		}

		task ("Change user permission") {
			ACSettings.changeUserRole(
				newRole = "Administrator",
				permissionType = "Member",
				userEmail = "${firstUser}");
		}

		task ("Assert user permission") {
			ACSettings.assertUserPermission(
				permissionType = "Administrator",
				userEmail = "${firstUser}");
		}

		task ("Change permission for all selected users") {
			ACSettings.changeMultipleUsersPermissions(
				permissionType = "Member",
				userEmail = "${firstUser},${secondUser}");
		}

		task ("Assert user permission") {
			for (var users : list "${firstUser},${secondUser}") {
				ACSettings.assertUserPermission(
					permissionType = "Member",
					userEmail = "${users}");
			}
		}

		task ("Delete Pending All Users") {
			ACSettings.deleteAllPendingUsers();
		}
	}

	@description = "Automation ID: LRAC-9082 | Test Summary: A user lost access to a given property (because the admin removed the user's access of the system)"
	@priority = "3"
	test UserLostAccessToProperty {
		task ("Go to settings then go to properties") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Create two new properties, check if it was created and add admin user") {
			ACProperties.addNewProperty(propertyName = "Property Name 1");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 1");

			ACProperties.addUserProperty(emailAddress = "test@liferay.com");

			ACSettings.goToProperties();

			ACProperties.addNewProperty(propertyName = "Property Name 2");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 2");

			ACProperties.addUserProperty(emailAddress = "corbin.murakami@faro.io");
		}

		task ("Log in as member and go to the properties menu") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Checks if only property 2 are present") {
			ACProperties.assertPropertyTitleList(propertyName = "Property Name 2");

			ACProperties.assertPropertyNotPresent(propertyName = "Property Name 1");
		}

		task ("Login as owner user, go to properties then select one") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "test@liferay.com",
				password = "test");

			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACUtils.searchBar(searchItem = "Property Name 2");

			ACNavigation.openItem(itemName = "Property Name 2");
		}

		task ("Delete a member inside a property") {
			ACProperties.deleteUserFromProperty(emailAddress = "corbin.murakami@faro.io");

			Alert.viewSuccessMessage();

			AssertElementNotPresent(
				locator1 = "AppBuilder#ITEM_ON_THE_TABLE",
				value1 = "corbin.murakami@faro.io");
		}

		task ("Login as member, go to properties then assert if the property is no longer present") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACProperties.assertPropertyNotPresent(propertyName = "Property Name 2");
		}
	}

	@description = "Automation ID: LRAC-9079 | Test Summary: An user not logged in accessing the AC URL by passing workspace parameter"
	@priority = "3"
	test UserNotLoggedAccessACURLPassingWorkspaceParameter {
		task ("Copy current URL and SignOut") {
			var workspaceURL = Navigator.getCurrentURL();

			ACWorkspace.signOut();
		}

		task ("Open URL and LogIn") {
			Open.openNoError(locator1 = "${workspaceURL}");

			ACLogin.loginAs(
				emailAddress = "test@liferay.com",
				password = "test");
		}

		task ("Assert Page Title") {
			ACUtils.assertPageTitle(pageTitle = "Sites");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9044 | Test Summary: Users list can be ordered"
	@priority = "3"
	test UsersListCanBeOrdered {
		task ("Go to User Management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Change the order to desc") {
			ACUtils.orderArrow(type = "descending");
		}

		task ("Assert that the first item on the list was changed") {
			AssertElementPresent(
				key_index = "1",
				key_KeywordName = "test test",
				locator1 = "ACSettings#KEYWORD_NAME_BY_INDEX");

			AssertElementPresent(
				key_index = "5",
				key_KeywordName = "bryan cheung",
				locator1 = "ACSettings#KEYWORD_NAME_BY_INDEX");
		}

		task ("Change the order do asc") {
			ACUtils.orderArrow(type = "ascending");
		}

		task ("Assert that the first item on the list was changed") {
			AssertElementPresent(
				key_index = "1",
				key_KeywordName = "bryan cheung",
				locator1 = "ACSettings#KEYWORD_NAME_BY_INDEX");

			AssertElementPresent(
				key_index = "5",
				key_KeywordName = "Test Test",
				locator1 = "ACSettings#KEYWORD_NAME_BY_INDEX");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9045	 | Test Summary: Users list can be paginated"
	@priority = "3"
	test UsersListCanBePaginated {
		task ("Go to User Management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Invite user") {
			ACSettings.addUser(userInvite = "ac@liferay.com");
		}

		task ("Select the 5 Items in Pagination") {
			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("View only 5 users are shown in page 1") {
			for (var emailList : list "bryan.cheung@faro.io,corbin.murakami@faro.io,michelle.hoshi@faro.io,test@faro.io,ac@liferay.com") {
				ACSettings.assertUsersListByEmail(userEmail = "${emailList}");
			}

			AssertElementNotPresent(
				locator1 = "ACSettings#USER_LIST_BY_EMAIL",
				userEmail = "test@liferay.com");
		}

		task ("Navigate to the page 2") {
			ACUtils.checkAnyPage(pageNumber = "2");
		}

		task ("View the test@liferay.com is shown in page 2") {
			ACSettings.assertUsersListByEmail(userEmail = "test@liferay.com");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8142 | Test Summary: Users list can be searched"
	@priority = "5"
	test UsersListCanBeSearched {
		ACNavigation.goToSettings();

		ACSettings.goToUserManagement();

		ACUtils.searchBar(searchItem = "michelle hoshi");

		ACSettings.assertUserList(userName = "michelle hoshi");

		ACUtils.searchBar(searchItem = "corbin murakami");

		ACSettings.assertUserList(userName = "corbin murakami");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8143 | Test Summary: Owner can delete users"
	@priority = "5"
	test ViewOwnerCanDeleteUser {
		ACWorkspace.signOut();

		ACLogin.loginAs(
			emailAddress = "bryan.cheung@faro.io",
			password = "test");

		ACWorkspace.openWorkspace();

		ACNavigation.goToSettings();

		ACSettings.goToUserManagement();

		ACSettings.addUser(userInvite = "user@liferay.com");

		ACUtils.searchBar(searchItem = "user");

		ACSettings.assertUserListEmail(userEmail = "user@liferay.com");

		ACSettings.deleteUser(userDelete = "user@liferay.com");

		AssertTextNotPresent(
			locator1 = "ACSettings#USER_LIST_EMAIL",
			value1 = "user@liferay.com");

		ACSettings.addUser(userInvite = "user2@liferay.com");

		ACWorkspace.signOut();

		ACLogin.loginAs(
			emailAddress = "corbin.murakami@faro.io",
			password = "test");

		ACWorkspace.openWorkspace();

		ACNavigation.goToSettings();

		ACSettings.goToUserManagement();

		AssertElementNotPresent(locator1 = "ACSettings#DELETE_USER");

		ACWorkspace.signOut();

		ACLogin.loginAs(
			emailAddress = "michelle.hoshi@faro.io",
			password = "test");

		ACWorkspace.openWorkspace();

		ACNavigation.goToSettings();

		ACSettings.goToUserManagement();

		ACUtils.searchBar(searchItem = "user");

		ACSettings.assertUserListEmail(userEmail = "user2@liferay.com");

		ACSettings.deleteUser(userDelete = "user2@liferay.com");

		AssertTextNotPresent(
			locator1 = "ACSettings#USER_LIST_EMAIL",
			value1 = "user2@liferay.com");
	}

}