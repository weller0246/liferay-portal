@component-name = "portal-content-dashboard"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Dashboard";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.uncheckStrangersVerifyEmailCheckbox();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "LPS-116987 When the user makes a change on web content and creates a draft version, the Info panel shows the version for the last version approved and the version of the draft "
	@priority = "5"
	test ApprovedAndDraftStatus {
		property portal.acceptance = "true";

		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "WC Content");
		}
		task ("Navigate to the content Dashboard, click edit web content and save as draft") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			WebContent.saveAsDraft();
		}
		task ("go back to web content and check for approved and draft versions") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertElementPresent(
				key_status = "Approved",
				locator1 = "WCEditWebContent#WORKFLOW_STATUS");

			AssertElementPresent(
				key_status = "Draft",
				locator1 = "WCEditWebContent#WORKFLOW_STATUS");
		}
	}

	@description = "LPS-122873 When all the web content is unassigned from a Vocab1's category, the relative ordering of the rest of the categories remain the same"
	@priority = "3"
	test AssigningSomeAudienceCategoriesAndCheckingTheOrder {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "S ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a list of Stages") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Stage");
			}
		}

		task ("Create a list of Web Content") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Webcontent Content",
					groupName = "Test Site Name",
					title = "Webcontent Title ${count}");
			}
		}

		task ("Select of categories 1 and 3 of Audience, and all categories of Stage") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var count : list "1,2,3") {
				WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title ${count}");

				for (var count : list "1,3") {
					WebContent.selectCategory(
						categoryName = "S ${count}",
						vocabularyName = "Audience");
				}

				for (var count : list "1,2,3") {
					WebContent.selectCategory(
						categoryName = "test ${count}",
						vocabularyName = "Stage");
				}

				PortletEntry.publish();
			}
		}
		task ("Navigate to content Dashboard and View the order of categories") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			task ("blue - first position") {
				AssertElementPresent(
					fillColor = "4B9FFF",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("orange - second position") {
				AssertElementPresent(
					fillColor = "FFB46E",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("red - third position") {
				AssertElementPresent(
					fillColor = "FF5F5F",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}
		}
	}

	@description = "LPS-114911 When the user selects vocabularies from the selection panel, vocabularies selected show in the table as headers and categories assigned to contents will show "
	@priority = "5"
	test CategorieShowInTable {
		property portal.acceptance = "true";

		task ("Adding vocabulary and category") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");

			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Test",
				vocabularyName = "Vocabulary Name");
		}

		task ("Adding Web Content") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Go to Content Dashboard and filtering category") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.filterByCategory(
				categoryName = "Test",
				filterOption = "Categories");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Test");
		}
	}

	@description = "LPS-122873 When there are some categories created for vocabulary1 (X axis), they will always have the same order during the user session"
	@priority = "3"
	test CategoriesWithSameOrderDuringASession {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "S ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a list of Stages") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Stage");
			}
		}

		task ("Create a Web Content") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Webcontent Content",
					groupName = "Test Site Name",
					title = "Webcontent Title ${count}");
			}
		}

		task ("Select list of categories") {
			ContentDashboard.selectListofCategoriesForAudienceAndStage();
		}

		task ("Navigate to content Dashboard and View the order of categories") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}
	}

	@description = "LPS-132597 When a web content is associated to a Display Page and its status is Approved, a display page icon is displayed"
	@priority = "5"
	test CheckDisplayPageIconofApprovedWebContent {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-132597 When a web content is NOT associated to a Display Page and its status is Approved, a display page icon is NOT displayed"
	@priority = "5"
	test CheckDisplayPageIconofApprovedWebContentNotDisplayed {
		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementNotPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-132597 When a web content is associated to a Display Page and its status is Pending, a display page icon is NOT displayed"
	@priority = "5"
	test CheckDisplayPageIconofPendingWebContent {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Workflow");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementNotPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-117341 Create a label for one of the categories and add another one with the text "..." and tooltip or popover with all theF categories left"
	@priority = "5"
	test CheckForMoreCategories {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "test content",
				groupName = "Test Site Name",
				title = "WC");
		}

		task ("select of audiences ") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC");

			for (var count : list "1,2,3") {
				WebContent.selectCategory(
					categoryName = "test ${count}",
					vocabularyName = "Audience");
			}

			PortletEntry.publish();
		}

		task ("Nagigate to Content Dashboard and check if there's a label with '...' indicating 'more categories' ") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertElementPresent(
				locator1 = "ContentDashboard#AUDIENCE_LIST_DASHBOARD",
				value = "...");
		}
	}

	@description = "LPS-122873 When any web content is unassigned to a Vocab1's category, the relative ordering of categories remain the same"
	@priority = "3"
	test CheckOrderEvenWithSomeUnassignedCategories {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "S ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a list of Stages") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Stage");
			}
		}

		task ("Create a Web Content") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Webcontent Content",
					groupName = "Test Site Name",
					title = "Webcontent Title ${count}");
			}
		}

		task ("Selecting the categories, one of the contents will not have category 2 of vocabulary 1") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title 1");

			for (var count : list "1,3") {
				WebContent.selectCategory(
					categoryName = "S ${count}",
					vocabularyName = "Audience");
			}

			for (var count : list "1,2,3") {
				WebContent.selectCategory(
					categoryName = "test ${count}",
					vocabularyName = "Stage");
			}

			PortletEntry.publish();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var count : list "2,3") {
				WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title ${count}");

				for (var count : list "1,2,3") {
					WebContent.selectCategory(
						categoryName = "S ${count}",
						vocabularyName = "Audience");
				}

				for (var count : list "1,2,3") {
					WebContent.selectCategory(
						categoryName = "test ${count}",
						vocabularyName = "Stage");
				}

				PortletEntry.publish();
			}
		}
		task ("Navigate to content Dashboard and View the order of categories") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			task ("blue - first position") {
				AssertElementPresent(
					fillColor = "4B9FFF",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("orange - second position") {
				AssertElementPresent(
					fillColor = "FFB46E",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("red - third position") {
				AssertElementPresent(
					fillColor = "FF5F5F",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}
		}
	}

	@description = "LPS-133716 When in Content Dashboard, a column with the Site / assetLibraty header is shown."
	@priority = "2"
	test CheckSiteAssertLibraryColumn {
		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check in Content Dashboard if the column is being displayed") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertElementPresent(
				locator1 = "ContentDashboard#SITE_ASSET_LIBRARY_COLUMN",
				siteAssetValue = "Site or Asset Library");
		}
	}

	@description = "LPS-133716 When in Content Dashboard, the name of the Site/Asset Library where the contents are stored is shown, regardless where it was created"
	@priority = "5"
	test CheckSiteAssertLibraryOfContent {
		task ("Create new Group") {
			JSONGroup.addGroup(groupName = "Second Test Site Name");
		}

		task ("Create a Web Content for each group") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Second Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Check in Content Dashboard if the right information is being displayed") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertElementPresent(
				locator1 = "ContentDashboard#SITE_ASSET_LIBRARY_COLUMN",
				siteAssetValue = "Test Site Name");

			AssertElementPresent(
				locator1 = "ContentDashboard#SITE_ASSET_LIBRARY_COLUMN",
				siteAssetValue = "Second Test Site Name");
		}

		task ("Drop second group") {
			JSONGroup.deleteGroupByName(groupName = "Second Test Site Name");
		}
	}

	@description = "LPS-122873 When a new category is created and assigned to a web content, the relative ordering of categories remain the same and the new category gets a new color, positionated in the last position"
	@priority = "3"
	test CheckTheOrderWithANewCategory {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "S ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a list of Stages") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Stage");
			}
		}

		task ("Create a list of Web Content") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Webcontent Content",
					groupName = "Test Site Name",
					title = "Webcontent Title ${count}");
			}
		}

		task ("Select list of categories") {
			ContentDashboard.selectListofCategoriesForAudienceAndStage();
		}

		task ("Navigate to content Dashboard and View the order of categories") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			task ("blue - first position") {
				AssertElementPresent(
					fillColor = "4B9FFF",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("orange - second position") {
				AssertElementPresent(
					fillColor = "FFB46E",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("red - third position") {
				AssertElementPresent(
					fillColor = "FF5F5F",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("green - last position") {
				AssertElementNotPresent(
					fillColor = "50D2A0",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}
		}

		task ("Create a new category and assign one of the contents") {
			JSONCategory.addCategory(
				groupName = "Global",
				title = "test 4",
				vocabularyName = "Stage");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title 1");

			WebContent.selectCategory(
				categoryName = "test 4",
				vocabularyName = "Stage");

			PortletEntry.publish();
		}
		task ("Navigate to the content panel and see if, in the new category order, the new category receives a new color, placed in the last position") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			task ("blue - first position") {
				AssertElementPresent(
					fillColor = "4B9FFF",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("orange - second position") {
				AssertElementPresent(
					fillColor = "FFB46E",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("red - third position") {
				AssertElementPresent(
					fillColor = "FF5F5F",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("green - last position") {
				AssertElementPresent(
					fillColor = "50D2A0",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}
		}
	}

	@description = "When click on the 'Other options' icon of Approved WC and has NOT a display page associated, View option NOT displayed"
	@priority = "4"
	test CheckViewOptionNotDisplayedApprovedWCNotAssiciatedDPT {
		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check in Content Dashboard if view option is NOT avalible for this WC") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click(locator1 = "ContentDashboard#WEB_CONTENT_MENU_DROPDOWN_BUTTON");

			AssertElementNotPresent(locator1 = "ContentDashboard#VIEW_OPTION");
		}
	}

	@description = "When click on the 'Other options' icon of not Approved WC and has a display page associated, View option NOT displayed"
	@priority = "4"
	test CheckViewOptionNotDisplayedNotApprovedWCAssiciatedDPT {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Workflow");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check in Content Dashboard if view option is NOT avalible for this WC") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click(locator1 = "ContentDashboard#WEB_CONTENT_MENU_DROPDOWN_BUTTON");

			AssertElementNotPresent(locator1 = "ContentDashboard#VIEW_OPTION");
		}
	}

	@description = "LPS-121658 When a user with no edit permissions clicks on the title of a content in status Approved with associated DPT, the user is led to the page view"
	@priority = "4"
	@uitest
	test ClickTitleApprovedDPTWithNoPermissions {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleApprovedDPTWithNoPermissions";

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "Basic Web Content");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		Button.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			requirePasswordReset = "true",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		JSONRole.addRegularRole(
			roleKey = "WC Creator Edit Permissions",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "WC Creator Edit Permissions");

		JSONRole.assignRoleToUser(
			roleTitle = "WC Creator Edit Permissions",
			userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		LexiconTable.clickTableEntryColumnLink(
			columnName = "title",
			tableEntry = "");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONRole.deleteRole(roleTitle = "WC Creator Edit Permissions");

		JSONUser.deleteUserByEmailAddress(userEmailAddress = "userea@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "LPS-121658 When a user with edit permissions clicks on the title of a content in status Approved with associated DPT, the user is led to the page view"
	@priority = "4"
	@uitest
	test ClickTitleApprovedDPTWithPermissions {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleApprovedDPTWithPermissions";

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "Basic Web Content");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		Button.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			requirePasswordReset = "true",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		JSONRole.addRegularRole(
			roleKey = "WC Creator Edit Permissions",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_ARTICLE",
			resourceName = "com.liferay.journal",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "WC Creator Edit Permissions");

		JSONRole.assignRoleToUser(
			roleTitle = "WC Creator Edit Permissions",
			userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		LexiconTable.clickTableEntryColumnLink(
			columnName = "title",
			tableEntry = "");

		AssertTextPresent(
			locator1 = "ContentDashboard#DISPLAY_PAGE_TITLE",
			value1 = "Display Page Name");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONRole.deleteRole(roleTitle = "WC Creator Edit Permissions");

		JSONUser.deleteUserByEmailAddress(userEmailAddress = "userea@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "LPS-121658 When a user with edit permissions (owner) clicks on the title of a content in status Approved with no associated DPT, the user is led to the web content editor"
	@priority = "3"
	@uitest
	test ClickTitleApprovedNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleApprovedNoDPT";

		task ("Add web content Approved") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#PUBLISH",
				value1 = "Publish");
		}
	}

	@priority = "4"
	@uitest
	test ClickTitleDocumentDPTWithNoPermissions {
		property osgi.module.configuration.file.names = "com.liferay.content.dashboard.web.internal.configuration.FFContentDashboardDocumentConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addWidget(portletName = "Documents and Media");

			PageEditor.clickPublish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");
		}

		task ("Add a role and user with NO permissions") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.addCP(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editPasswordCP(
				requirePasswordReset = "true",
				userEmailAddress = "userea@liferay.com",
				userScreenName = "usersn");

			JSONRole.addRegularRole(
				roleKey = "WC Creator Edit Permissions",
				roleTitle = "WC Creator Edit Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "WC Creator Edit Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
				roleTitle = "WC Creator Edit Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "WC Creator Edit Permissions");

			JSONRole.assignRoleToUser(
				roleTitle = "WC Creator Edit Permissions",
				userEmailAddress = "userea@liferay.com");

			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Click on the title") {
			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "DM Document Title");
		}

		task ("Login again with the Test user") {
			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
	}

	@priority = "4"
	@uitest
	test ClickTitleDocumentDPTWithPermissions {
		property osgi.module.configuration.file.names = "com.liferay.content.dashboard.web.internal.configuration.FFContentDashboardDocumentConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addWidget(portletName = "Documents and Media");

			PageEditor.clickPublish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Click on the title") {
			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");

			AssertTextPresent(
				locator1 = "ContentDashboard#DISPLAY_PAGE_TITLE",
				value1 = "Display Page Name");
		}
	}

	@description = "LPS-121658 When a user with edit permissions(owner) clicks on the title of a content in status Draft, associated DPT or not, the user is led to web content editor"
	@priority = "3"
	@uitest
	test ClickTitleDraftNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleDraftNoDPT";

		task ("Add web content Draft") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addDraft(
				webContentContent = "WC Content",
				webContentTitle = "WC Title");

			VerifyElementPresent(locator1 = "Message#SUCCESS");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#PUBLISH",
				value1 = "Publish");
		}
	}

	@description = "LPS-121658 When a user with edit permissions(owner) clicks on the title of a content in status Pending, associated DPT or not, the user is led to web content editor"
	@priority = "3"
	@uitest
	test ClickTitlePendingNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitlePendingNoDPT";

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Workflow");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Edit the Web Content article and submit it for publication") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC Title");

			Button.clickSubmitForPublication();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#SUBMIT_FOR_PUBLICATION",
				value1 = "Submit for Publication");
		}
	}

	@description = "LPS-121658 When a user with edit permissions(owner) clicks on the title of a content in status Scheduled, associated DPT or not, the user is led to web content editor"
	@priority = "3"
	@uitest
	test ClickTitleScheduledNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleScheduledNoDPT";

		task ("Add web content Scheduled") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC Content",
				webContentTitle = "WC Title");

			WebContent.editDisplayDate(displayDate = "01/01/2100");

			PortletEntry.publish();
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#PUBLISH",
				value1 = "Publish");
		}
	}

	@priority = "5"
	test DocumentFromAssetLibraryIsListed {
		property osgi.module.configuration.file.names = "com.liferay.content.dashboard.web.internal.configuration.FFContentDashboardDocumentConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add an Asset Library") {
			JSONDepot.addDepot(
				depotDescription = "This is the description",
				depotName = "Test Depot Name");
		}

		task ("Add a document to the previous Asset Library created") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Asset Library 1",
				groupName = "Test Depot Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Go to the Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Assert that both documents appear in the table") {
			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "DM Document Asset Library 1");
		}

		task ("Delete the Asset Library") {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@priority = "4"
	test DocumentIconView {
		property osgi.module.configuration.file.names = "com.liferay.content.dashboard.web.internal.configuration.FFContentDashboardDocumentConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addWidget(portletName = "Documents and Media");

			PageEditor.clickPublish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Click on the View icon and check the user is lead to the Display Page") {
			Click.clickNoMouseOver(locator1 = "ContentDashboard#ROW_PANEL_WC");

			Click(locator1 = "ContentDashboard#ICON_VIEW_LISTED_MODIFIED_DATE");
		}
	}

	@priority = "5"
	test DocumentsFromDifferentSitesAreListed {
		property osgi.module.configuration.file.names = "com.liferay.content.dashboard.web.internal.configuration.FFContentDashboardDocumentConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add two different sites") {
			JSONGroup.addGroup(groupName = "Site Name 1");

			JSONGroup.addGroup(groupName = "Site Name 2");
		}

		task ("Add a document for each site") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-1");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Site 1");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-2");

			DMDocument.addCP(
				dmDocumentFile = "Document_2.txt",
				dmDocumentTitle = "DM Document Site 2");
		}

		task ("Go to the Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Assert that both documents appear in the table") {
			ContentDashboard.searchValue(webContentTitle = "DM Document Site 1");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "DM Document Site 1");

			ContentDashboard.searchValue(webContentTitle = "DM Document Site 2");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "DM Document Site 2");
		}
	}

	@description = "LPS-119966 Given a document with and associated Display Page Template
	When the user with permissions clicks on the info panel button
	Then the user is lead to the info panel"

	@priority = "4"
	test DocumentViewInfoPanel {
		property portal.acceptance = "true";

		task ("Create a new Document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Open the Info panel") {
			ContentDashboard.openInfoPanelByDropdownMenu();

			AssertTextPresent(
				locator1 = "ContentDashboard#INFO_PANEL_TITLE",
				value1 = "DM Document Title");

			Click(locator1 = "ContentDashboard#CLOSE_INFO_PANEL_BUTTON");
		}
	}

	@priority = "4"
	test EditDocument {
		property osgi.module.configuration.file.names = "com.liferay.content.dashboard.web.internal.configuration.FFContentDashboardDocumentConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Add a document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Edit the document") {
			ContentDashboard.editAsset(assetTitle = "DM Document Title Edited");
		}

		task ("Assert the document has been edited") {
			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "DM Document Title Edited");
		}
	}

	@description = "Validate if the user can edit a web content through the Edit option"
	@priority = "5"
	test EditWebContent {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.editAsset(assetTitle = "WC Title Edited");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Edited");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Edited");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Edited");
	}

	@description = "Validate if the user can access to the Content Dashboard after s/he has expired a Web Content"
	@priority = "5"
	test ExpiredWebContent {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireSpecificVersionCP(webContentTitle = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#EXPIRED_LABEL",
			value1 = "EXPIRED");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "Validate if the user can filter by Author, using different display types"
	@priority = "5"
	test FilterByAuthor {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "5000");

		ContentDashboard.filterByAuthorTable(filterOption = "Author");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		ContentDashboard.clearFilters();

		ContentDashboard.filterByAuthorList(filterOption = "Author");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		ContentDashboard.clearFilters();

		ContentDashboard.filterByAuthorCard(filterOption = "Author");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "Validate if the user can filter by category"
	@priority = "5"
	test FilterByCategory {
		property portal.acceptance = "true";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		var categoryId = JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${categoryId}",
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "5000");

		ContentDashboard.filterByCategory(
			categoryName = "Category Name",
			filterOption = "Categories");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC WebContent Title");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.deleteCategoryByMenuCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");
	}

	@description = "Validate if the user can filter by multiple tags"
	@priority = "5"
	test FilterByMultipleTags {
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tagnumber1,tagnumber2",
			webContentContent = "Web Content With Tag1 and Tag2",
			webContentTitle = "WC Title 1");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tagnumber1",
			webContentContent = "Web Content With Tag1",
			webContentTitle = "WC Title 2");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByTag(
			filterOption = "Tags",
			tagName = "tagnumber1");

		ContentDashboard.filterByTag(
			filterOption = "Tags",
			tagName = "tagnumber2");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 1");

		Tag.openTagsAdmin(siteURLKey = "test-site-name");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Tags");

		Tag.viewCP(tagName = "tagnumber1");

		PortletEntry.deleteViaToolbar(rowEntries = "tagnumber1");

		Alert.viewSuccessMessage();

		Tag.viewCP(tagName = "tagnumber2");

		PortletEntry.deleteViaToolbar(rowEntries = "tagnumber2");

		Alert.viewSuccessMessage();

		Portlet.viewEmptyMessage(message = "There are no tags.");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title 1");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title 2");
	}

	@description = "Validate if the user can filter by Site"
	@priority = "5"
	test FilterBySite {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Global",
			title = "WC Title Global");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterBySiteGlobal(filterOption = "Site or Asset Library");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Global");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title Global");
	}

	@description = "Validate if the user can filter by Status: Any"
	@priority = "5"
	test FilterByStatusAny {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title Approved");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC Title Draft",
			workflowAction = "DRAFT");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusAny(filterOption = "Any");

		ContentDashboard.searchValue(webContentTitle = "WC Title Approved");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Approved");

		ContentDashboard.searchValue(webContentTitle = "WC Title Draft");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Draft");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title Approved");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Draft");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Draft");
	}

	@description = "Validate if the user can filter by Status: Approved"
	@priority = "5"
	test FilterByStatusApproved {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title Approved");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusApproved(filterOption = "Approved");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Approved");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title Approved");
	}

	@description = "Validate if the user can filter by Status: Draft"
	@priority = "5"
	test FilterByStatusDraft {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC Title Draft",
			workflowAction = "DRAFT");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusDraft(filterOption = "Draft");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Draft");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Draft");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Draft");
	}

	@description = "Validate if the user can filter by Status: Scheduled"
	@priority = "5"
	test FilterByStatusScheduled {
		property portal.acceptance = "true";

		task ("Add a web content article with a future display date") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC Title Scheduled");

			WebContent.editDisplayDate(displayDate = "01/01/2100");

			PortletEntry.publish();
		}

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusScheduled(filterOption = "Scheduled");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Scheduled");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Scheduled");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Scheduled");
	}

	@description = "LPS-132411 Given The Type filter modal
	When the user selects one or more subtypes
	Then the subtypes selected appear as filter boxes above the Content table in the Content Dashboard, with the format Subtype: [subtypen_name]"
	@priority = "5"
	test FilterBySubtype {
		property portal.acceptance = "true";

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Navigate to the content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Filter by Type") {
			ContentDashboard.filterByType(
				filterOption = "Type",
				subtypeName = "Basic Web Content");
		}

		task ("Assert that the web content and filter label are present") {
			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertTextPresent(
				locator1 = "ContentDashboard#FILTER_TEXT",
				value1 = "Subtype: Basic Web Content");
		}
	}

	@description = "Validate if the user can filter by tag"
	@priority = "5"
	test FilterByTag {
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tag1",
			webContentContent = "Web Content With Tag1 and Tag2",
			webContentTitle = "Web Content Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByTag(
			filterOption = "Tags",
			tagName = "tag1");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "Web Content Title");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Tags");

		Tag.viewCP(tagName = "tag1");

		PortletEntry.deleteViaToolbar(rowEntries = "tag1");

		Alert.viewSuccessMessage();

		Portlet.viewEmptyMessage(message = "There are no tags.");
	}

	@description = "LPS-117419 When the item selector for tags displays all available tags and there's a tag that is created in two different sites with the same name, the repeated tag shows only once, the filter results retrieve contents labeled with those categories from the two sites and there's only one filter applied"
	@priority = "5"
	test FilterTheListOfContentsByTag {
		property portal.acceptance = "true";

		task ("Adding the tag to the web content of the first site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithTagCP(
				tagNameList = "test",
				webContentContent = "Web Content Tag1 ",
				webContentTitle = "Web Content Title");
		}

		task ("Adding the tag the web content of the second site") {
			JSONGroup.addGroup(groupName = "Test Site Name 2");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name 2");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithTagCP(
				tagNameList = "test",
				webContentContent = "Web Content Tag1",
				webContentTitle = "Web Content Title");
		}

		task ("navigate to the content dashboard, filter by tags and make sure there is only one tag") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.filterByTag(
				filterOption = "Tags",
				tagName = "test");
		}
	}

	@description = "LPS-116840 When a user with update permissions clicks on the edit icon, the user is led to the web editor"
	@priority = "5"
	test IconEdit {
		property portal.acceptance = "true";

		task ("Create a Web Content ") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check it in its display page and access the edit") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click.clickNoMouseOver(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_MODIFIED_DATE");
		}
	}

	@description = "LPS-116840 When the user clicks on the info icon, the info panel displays"
	@priority = "5"
	test IconInfo {
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page and access the info") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "teste");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click.clickNoMouseOver(locator1 = "ContentDashboard#ROW_PANEL_WC");

			Click(locator1 = "ContentDashboard#ICON_INFO_LISTED_MODIFIED_DATE");
		}
	}

	@description = "LPS-122873 When the user add filters need to have only one vocabulary, the relative ordering of the categories remain the same"
	@priority = "3"
	test JustAddingAVocabularyThroughTheFilters {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "S ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a list of Stages") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Stage");
			}
		}

		task ("Create a Web Content") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Webcontent Content",
					groupName = "Test Site Name",
					title = "Webcontent Title ${count}");
			}
		}

		task ("Selecting only the Stage vocabulary") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var count : list "1,2,3") {
				WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title ${count}");

				for (var count : list "1,2,3") {
					WebContent.selectCategory(
						categoryName = "test ${count}",
						vocabularyName = "Stage");
				}

				PortletEntry.publish();
			}
		}
		task ("Go to content Dashboard and View the relative ordering of the categories remain the same") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#X_AXIS_VOCABULARY_NAME",
				value1 = "test 1",
				xAxisCategoryName = "stage");

			AssertTextPresent(
				locator1 = "ContentDashboard#X_AXIS_VOCABULARY_NAME",
				value1 = "test 2",
				xAxisCategoryName = "stage");

			AssertTextPresent(
				locator1 = "ContentDashboard#X_AXIS_VOCABULARY_NAME",
				value1 = "test 3",
				xAxisCategoryName = "stage");
		}
	}

	@description = "LPS-116987 When the user clicks on the eye icon in any of the translated into languages within the info panel, the user navigates to the VIEW version of the page in the matching language"
	@priority = "5"
	test LanguageVersion {
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and change the language") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				description = "Description",
				groupName = "Test Site Name",
				title = "WC WebContent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "Test Site Name");

			Translations.gotoTranslate(webContentTitle = "WC WebContent Title");

			Translations.changeTargetLocale(
				currentTargetLocale = "ar-SA",
				newTargetLocale = "es-ES");

			Button.clickPublish();
		}
		task ("Navigate to the content Dashboard and go to the page view in the corresponding language") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			WebContent.checkLanguage();
		}
	}

	@description = "LPS-122873 When the user configure the audit graph to have just one vocabulary, the relative ordering of the categories remain the same"
	@priority = "3"
	test NumberOfVcabulariesAccordingToTheAuditGraph {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "S ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a list of Stages") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Stage");
			}
		}

		task ("Create a Web Content") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Webcontent Content",
					groupName = "Test Site Name",
					title = "Webcontent Title ${count}");
			}
		}

		task ("Select list of categories") {
			ContentDashboard.selectListofCategoriesForAudienceAndStage();
		}

		task ("Go to content Dashboard > Audit Graph configuration > and see the order when only one of the categories is selected in the audit Grafich") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			task ("removing the stage and leaving only the audience") {
				ContentDashboard.moveVocabularyDisplayConfiguration(vocabularyName = "Stage");

				AssertTextNotPresent(
					locator1 = "ContentDashboard#X_AXIS_VOCABULARY_NAME",
					value1 = "test 1",
					xAxisCategoryName = "stage");

				AssertTextNotPresent(
					locator1 = "ContentDashboard#X_AXIS_VOCABULARY_NAME",
					value1 = "test 2",
					xAxisCategoryName = "stage");

				AssertTextNotPresent(
					locator1 = "ContentDashboard#X_AXIS_VOCABULARY_NAME",
					value1 = "test 3",
					xAxisCategoryName = "stage");
			}
		}
	}

	@descrip	ion = "Validate if the user can order by Modification Date"
	@priority = "5"
	test OrderByModificationDate {
		for (var count : list "1,2,3,4,5") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Test Site Name",
				title = "WC Title ${count}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.orderByModificationDate(filterOption = "Modified Date");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 5");

		Click(locator1 = "ContentDashboard#REVERSE_SORT_DIRECTION_BUTTON");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 1");

		for (var count : list "1,2,3,4,5") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "WC Title ${count}");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "WC Title ${count}");
		}
	}

	@description = "Validate if the user can order by title"
	@priority = "5"
	test OrderByTitle {
		for (var count : list "1,2,3,4,5") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Test Site Name",
				title = "WC Title ${count}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.orderByTitle(filterOption = "Title");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 5");

		Click(locator1 = "ContentDashboard#REVERSE_SORT_DIRECTION_BUTTON");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 1");

		for (var count : list "1,2,3,4,5") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "WC Title ${count}");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "WC Title ${count}");
		}
	}

	@description = "LPS-132254 When a user selects the value of the number of rows (4, 8, 40, 60) displayed in the list, the Content Dashboard will display the number of rows selected"
	@priority = "5"
	test PaginationDisplaySelectedNumberOfRows {
		property portal.acceptance = "true";

		task ("Create 10 WC using JSON") {
			for (var count : list "1,2,3,4,5,6,7,8,9,10") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Test Site Name",
					title = "WC Title ${count}");
			}
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Check if the correct number of entries are being displayed") {
			Pagination.changePagination(itemsPerPage = "8");

			Pagination.viewResults(results = "Showing 1 to 8 of 10 entries.");
		}
	}

	@description = "LPS-132254 When a user use the <, > buttons, the page displayed moves forward/backward"
	@priority = "3"
	test PaginationMoveAcrossPagesWithButtons {
		property portal.acceptance = "true";

		task ("Create 6 WC using JSON") {
			for (var count : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Test Site Name",
					title = "WC Title ${count}");
			}
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Use < > buttons to move forth and back") {
			Pagination.changePagination(itemsPerPage = "4");

			Click(locator1 = "Pagination#NEXT_LINK");

			Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");

			Click(locator1 = "Pagination#PREVIOUS_LINK");

			Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");
		}
	}

	@description = "LPS-132254 When a user clicks on a page number, that page is displayed in the Content Dashboard"
	@priority = "3"
	test PaginationMoveAcrossPagesWithNumber {
		property portal.acceptance = "true";

		task ("Create 6 WC using JSON") {
			for (var count : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Test Site Name",
					title = "WC Title ${count}");
			}
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Use page numbers to move between pages") {
			Pagination.changePagination(itemsPerPage = "4");

			ContentDashboard.moveToPage(pageNumber = "2");

			Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
		}
	}

	@description = "LPS-113832 So access to content dashboard will be a combination of permissions for accessing the Global App Menu and to view or edit web content."
	@priority = "5"
	test PermissionsForContentDashboard {
		property portal.acceptance = "true";

		task ("Adding vocabulary and category") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");

			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Test",
				vocabularyName = "Vocabulary Name");
		}

		task ("Adding Web Content") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Create a new user and add access permission to content Dasboard") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editPasswordCP(
				requirePasswordReset = "true",
				userEmailAddress = "userea@liferay.com",
				userScreenName = "usersn");

			JSONRole.addRegularRole(
				roleKey = "WC Creator Edit Permissions",
				roleTitle = "WC Creator Edit Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "WC Creator Edit Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
				roleTitle = "WC Creator Edit Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
				roleTitle = "WC Creator Edit Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "WC Creator Edit Permissions");

			JSONRole.assignRoleToUser(
				roleTitle = "WC Creator Edit Permissions",
				userEmailAddress = "userea@liferay.com");
		}

		task ("login with the new user and access the content panel") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}
	}

	@description = "Validate if the user can open de Info side panel of a web content"
	@priority = "5"
	test SaveFiltersAfterEditing {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByAuthorTable(filterOption = "Author");

		ContentDashboard.editAsset(assetTitle = "WC Title Edited");

		AssertTextPresent(
			locator1 = "ContentDashboard#FILTER_TEXT",
			value1 = "Author:Test Test");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Edited");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Edited");
	}

	@description = "LPS-131886 Validade if when Web Content is updated its being corectly displayed"
	@priority = "3"
	test ShouldExhibitUpdatedWebContent {
		task ("Create WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Go to Content Dashboard and Edit WC") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.editAsset(assetTitle = "WC WebContent New Title");
		}

		task ("Check if content is correct") {
			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_MODIFIED_DATE",
				value1 = "0 Seconds Ago");
		}
	}

	@description = "LPS-131886 Validade if a Web Content associated with a Display Page Template is shown"
	@priority = "5"
	test ShouldExhibitWebContentAssociatedWithDisplayPage {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-131886 Validade if a Web Content not associated with a Display Page Template is shown"
	@priority = "5"
	test ShouldExhibitWebContentNotAssociatedWithDisplayPageTemplate {
		task ("Create WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Check if WC is not associated in Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title");

			AssertElementNotPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-133181 When Filter by Author 'All', displays content from all users featured in the user's content dashboard view."
	@priority = "5"
	test ShowAllContentCreatorUsers {
		task ("Create and configure second user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create First WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC Content 1",
				groupName = "Test Site Name",
				title = "WC Title 1");
		}

		task ("Change to second user and create second WC") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			JSONWebcontent.addWebContent(
				content = "WC Content 2",
				groupName = "Test Site Name",
				title = "WC Title 2");
		}

		task ("Go to Content Dashboard and aplly All filter") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.filterByAuthorAll(filterOption = "All");
		}

		task ("Check if all contents are being displayed") {
			ContentDashboard.searchValue(webContentTitle = "WC Title 1");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title 1");

			ContentDashboard.searchValue(webContentTitle = "WC Title 2");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title 2");
		}
	}

	@description = "LPS-133181 When Filter by Author 'Me', displays content where the current user is the last editor of the approved version."
	@priority = "5"
	test ShowOnlyContentCreatedByUser {
		task ("Create and configure second user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create First WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC Content 1",
				groupName = "Test Site Name",
				title = "WC Title 1");
		}

		task ("Change to second user and create second WC") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC Content 2",
				webContentTitle = "WC Title 2");

			PortletEntry.publish();
		}

		task ("Go to Content Dashboard and aplly All filter") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.filterByAuthorMe(filterOption = "Me");
		}

		task ("Check if all contents created by user are being displayed") {
			ContentDashboard.orderByTitle(filterOption = "Title");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title 2");
		}
	}

	@description = "LPS-131187 Given the Content Dashboard table
	When a document is added
	Then its type will be shown in the Type column"
	@priority = "3"
	test TypeColumnForDocument {
		property osgi.module.configuration.file.names = "com.liferay.content.dashboard.web.internal.configuration.FFContentDashboardDocumentConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Create document via JSON") {
			task ("Create a new Document") {
				JSONDocument.addFile(
					dmDocumentDescription = "DM Document Description",
					dmDocumentTitle = "DM Document Title",
					groupName = "Test Site Name");
			}
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Assert the type of the web content is shown in the Type column") {
			AssertTextPresent(
				locator1 = "ContentDashboard#TYPE_COLUMN_VALUE",
				value1 = "Document");
		}
	}

	@description = "LPS-131187 Given the Content Dashboard table
	When a web content is added
	Then its type will be shown in the Type column"
	@priority = "3"
	test TypeColumnForWebContent {
		task ("Create WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Assert the type of the web content is shown in the Type column") {
			AssertTextPresent(
				locator1 = "ContentDashboard#TYPE_COLUMN_VALUE",
				value1 = "Web Content Article");
		}
	}

	@description = "LPS-122873 When the user uncheck any checkbox from the vocab2, the relative ordering of the categories remain the same"
	@priority = "3"
	test UncheckACategoryInTheContentPanel {
		property portal.acceptance = "true";

		task ("Create a list of Audiences") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "S ${count}",
					vocabularyName = "Audience");
			}
		}

		task ("Create a list of Stages") {
			for (var count : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Global",
					title = "test ${count}",
					vocabularyName = "Stage");
			}
		}

		task ("Create a Web Content") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Webcontent Content",
					groupName = "Test Site Name",
					title = "Webcontent Title ${count}");
			}
		}

		task ("Select list of categories") {
			ContentDashboard.selectListofCategoriesForAudienceAndStage();
		}

		task ("Navigate to content Dashboard, uncheck a vocabulary category 2 and see the order of categories") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click.javaScriptClick(
				checkboxName = "test 2",
				locator1 = "Checkbox#ANY_CHECKBOX");

			task ("blue - first position") {
				AssertElementPresent(
					fillColor = "4B9FFF",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("orange - second position") {
				AssertElementNotPresent(
					fillColor = "FFB46E",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}

			task ("red - third position") {
				AssertElementPresent(
					fillColor = "FF5F5F",
					locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
			}
		}
	}

	@description = "LPS-116840 When the user clicks on the view icon of a content with an associated display page, the user is led to the view mode of the page"
	@priority = "5"
	test WebContentIconView {
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page and access the view") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click.clickNoMouseOver(locator1 = "ContentDashboard#ROW_PANEL_WC");

			Click(locator1 = "ContentDashboard#ICON_VIEW_LISTED_MODIFIED_DATE");
		}
	}

	@description = "LPS-114912: Validate if the user can open de Info side panel of a web content"
	@priority = "5"
	test WebContentViewInfoPanel {
		property portal.acceptance = "true";

		task ("Create a web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Open the Info panel") {
			ContentDashboard.openInfoPanelByDropdownMenu();

			AssertTextPresent(
				locator1 = "ContentDashboard#INFO_PANEL_TITLE",
				value1 = "WC Title");

			Click(locator1 = "ContentDashboard#CLOSE_INFO_PANEL_BUTTON");
		}
	}

}