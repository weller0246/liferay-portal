@component-name = "portal-content-dashboard"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Dashboard";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.uncheckStrangersVerifyEmailCheckbox();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "LPS-114911 When the user selects vocabularies from the selection panel, vocabularies selected show in the table as headers and categories assigned to contents will show "
	@priority = "5"
	test CategorieShowInTable {
		property portal.acceptance = "true";

		task ("Adding vocabulary and category") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");

			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Test",
				vocabularyName = "Vocabulary Name");
		}

		task ("Adding Web Content") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Go to Content Dashboard and filtering category") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.filterByCategory(
				categoryName = "Test",
				filterOption = "Categories");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Test");
		}
	}

	@description = "LPS-132597 When a web content is associated to a Display Page and its status is Approved, a display page icon is displayed"
	@priority = "5"
	test CheckDisplayPageIconofApprovedWebContent {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-132597 When a web content is NOT associated to a Display Page and its status is Approved, a display page icon is NOT displayed"
	@priority = "5"
	test CheckDisplayPageIconofApprovedWebContentNotDisplayed {
		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementNotPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-132597 When a web content is associated to a Display Page and its status is Pending, a display page icon is NOT displayed"
	@priority = "5"
	test CheckDisplayPageIconofPendingWebContent {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Workflow");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementNotPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-133716 When in Content Dashboard, a column with the Site / assetLibraty header is shown."
	@priority = "2"
	test CheckSiteAssertLibraryColumn {
		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check in Content Dashboard if the column is being displayed") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertElementPresent(
				locator1 = "ContentDashboard#SITE_ASSET_LIBRARY_COLUMN",
				siteAssetValue = "Site or Asset Library");
		}
	}

	@description = "LPS-133716 When in Content Dashboard, the name of the Site/Asset Library where the contents are stored is shown, regardless where it was created"
	@priority = "5"
	test CheckSiteAssertLibraryOfContent {
		task ("Create new Group") {
			JSONGroup.addGroup(groupName = "Second Test Site Name");
		}

		task ("Create a Web Content for each group") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Second Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Check in Content Dashboard if the right information is being displayed") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertElementPresent(
				locator1 = "ContentDashboard#SITE_ASSET_LIBRARY_COLUMN",
				siteAssetValue = "Test Site Name");

			AssertElementPresent(
				locator1 = "ContentDashboard#SITE_ASSET_LIBRARY_COLUMN",
				siteAssetValue = "Second Test Site Name");
		}

		task ("Drop second group") {
			JSONGroup.deleteGroupByName(groupName = "Second Test Site Name");
		}
	}

	@description = "When click on the 'Other options' icon of Approved WC and has NOT a display page associated, View option NOT displayed"
	@priority = "4"
	test CheckViewOptionNotDisplayedApprovedWCNotAssiciatedDPT {
		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check in Content Dashboard if view option is NOT avalible for this WC") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click(locator1 = "ContentDashboard#WEB_CONTENT_MENU_DROPDOWN_BUTTON");

			AssertElementNotPresent(locator1 = "ContentDashboard#VIEW_OPTION");
		}
	}

	@description = "When click on the 'Other options' icon of not Approved WC and has a display page associated, View option NOT displayed"
	@priority = "4"
	test CheckViewOptionNotDisplayedNotApprovedWCAssiciatedDPT {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Workflow");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check in Content Dashboard if view option is NOT avalible for this WC") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click(locator1 = "ContentDashboard#WEB_CONTENT_MENU_DROPDOWN_BUTTON");

			AssertElementNotPresent(locator1 = "ContentDashboard#VIEW_OPTION");
		}
	}

	@description = "LPS-121658 When a user with no edit permissions clicks on the title of a content in status Approved with associated DPT, the user is led to the page view"
	@priority = "4"
	@uitest
	test ClickTitleApprovedDPTWithNoPermissions {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleApprovedDPTWithNoPermissions";

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "Basic Web Content");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		Button.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			requirePasswordReset = "true",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		JSONRole.addRegularRole(
			roleKey = "WC Creator Edit Permissions",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "WC Creator Edit Permissions");

		JSONRole.assignRoleToUser(
			roleTitle = "WC Creator Edit Permissions",
			userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		LexiconTable.clickTableEntryColumnLink(
			columnName = "title",
			tableEntry = "");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONRole.deleteRole(roleTitle = "WC Creator Edit Permissions");

		JSONUser.deleteUserByEmailAddress(userEmailAddress = "userea@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "LPS-121658 When a user with edit permissions clicks on the title of a content in status Approved with associated DPT, the user is led to the page view"
	@priority = "4"
	@uitest
	test ClickTitleApprovedDPTWithPermissions {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleApprovedDPTWithPermissions";

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "Basic Web Content");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		Button.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			requirePasswordReset = "true",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		JSONRole.addRegularRole(
			roleKey = "WC Creator Edit Permissions",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_ARTICLE",
			resourceName = "com.liferay.journal",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
			roleTitle = "WC Creator Edit Permissions");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "WC Creator Edit Permissions");

		JSONRole.assignRoleToUser(
			roleTitle = "WC Creator Edit Permissions",
			userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		LexiconTable.clickTableEntryColumnLink(
			columnName = "title",
			tableEntry = "");

		AssertTextPresent(
			locator1 = "ContentDashboard#DISPLAY_PAGE_TITLE",
			value1 = "Display Page Name");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONRole.deleteRole(roleTitle = "WC Creator Edit Permissions");

		JSONUser.deleteUserByEmailAddress(userEmailAddress = "userea@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "LPS-121658 When a user with edit permissions (owner) clicks on the title of a content in status Approved with no associated DPT, the user is led to the web content editor"
	@priority = "3"
	@uitest
	test ClickTitleApprovedNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleApprovedNoDPT";

		task ("Add web content Approved") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#PUBLISH",
				value1 = "Publish");
		}
	}

	@description = "LPS-121658 When a user with edit permissions(owner) clicks on the title of a content in status Draft, associated DPT or not, the user is led to web content editor"
	@priority = "3"
	@uitest
	test ClickTitleDraftNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleDraftNoDPT";

		task ("Add web content Draft") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addDraft(
				webContentContent = "WC Content",
				webContentTitle = "WC Title");

			VerifyElementPresent(locator1 = "Message#SUCCESS");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#PUBLISH",
				value1 = "Publish");
		}
	}

	@description = "LPS-121658 When a user with edit permissions(owner) clicks on the title of a content in status Pending, associated DPT or not, the user is led to web content editor"
	@priority = "3"
	@uitest
	test ClickTitlePendingNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitlePendingNoDPT";

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Workflow");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Edit the Web Content article and submit it for publication") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC Title");

			Button.clickSubmitForPublication();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#SUBMIT_FOR_PUBLICATION",
				value1 = "Submit for Publication");
		}
	}

	@description = "LPS-121658 When a user with edit permissions(owner) clicks on the title of a content in status Scheduled, associated DPT or not, the user is led to web content editor"
	@priority = "3"
	@uitest
	test ClickTitleScheduledNoDPT {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentDashboard#ClickTitleScheduledNoDPT";

		task ("Add web content Scheduled") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC Content",
				webContentTitle = "WC Title");

			WebContent.editDisplayDate(displayDate = "01/01/2100");

			PortletEntry.publish();
		}

		task ("Go to Content Dashboard and click on the title") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the web content is opened in the web content editor") {
			AssertElementPresent(
				locator1 = "Button#PUBLISH",
				value1 = "Publish");
		}
	}

	@description = "Validate if the user can edit a web content through the Edit option"
	@priority = "5"
	test EditWebContent {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.editWebContent(webContentTitle = "WC Title Edited");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Edited");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Edited");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Edited");
	}

	@description = "Validate if the user can access to the Content Dashboard after s/he has expired a Web Content"
	@priority = "5"
	test ExpiredWebContent {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireSpecificVersionCP(webContentTitle = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#EXPIRED_LABEL",
			value1 = "EXPIRED");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "Validate if the user can filter by Author, using different display types"
	@priority = "5"
	test FilterByAuthor {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "5000");

		ContentDashboard.filterByAuthorTable(filterOption = "Author");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		ContentDashboard.clearFilters();

		ContentDashboard.filterByAuthorList(filterOption = "Author");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		ContentDashboard.clearFilters();

		ContentDashboard.filterByAuthorCard(filterOption = "Author");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title");
	}

	@description = "Validate if the user can filter by category"
	@priority = "5"
	test FilterByCategory {
		property portal.acceptance = "true";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		var categoryId = JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${categoryId}",
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "5000");

		ContentDashboard.filterByCategory(
			categoryName = "Category Name",
			filterOption = "Categories");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC WebContent Title");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.deleteCategoryByMenuCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");
	}

	@description = "Validate if the user can filter by category and subtype"
	@priority = "5"
	test FilterByCategoryAndSubtype {
		property portal.acceptance = "true";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		var categoryId1 = JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category 1",
			vocabularyName = "Vocabulary Name");

		var categoryId2 = JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category 2",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "Subtype1");

		DataEngine.addFields(fieldNameList = "Text");

		WebContentStructures.saveCP(structureName = "Subtype1");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "Subtype2");

		DataEngine.addFields(fieldNameList = "Text");

		WebContentStructures.saveCP(structureName = "Subtype2");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Subtype1");

		WebContent.addWithStructureCP(
			structureName = "Subtype1",
			webContentTitle = "WC Title 1");

		PortletEntry.publish();

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Subtype2");

		WebContent.addWithStructureCP(
			structureName = "Subtype2",
			webContentTitle = "WC Title 2");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC Title 1");

		WebContent.selectCategory(
			categoryName = "Category 1",
			userSegmentDetailTitle = "${userSegmentDetailTitle}",
			vocabularyName = "Vocabulary Name");

		WebContent.selectCategory(
			categoryName = "Category 2",
			userSegmentDetailTitle = "${userSegmentDetailTitle}",
			vocabularyName = "Vocabulary Name");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC Title 2");

		WebContent.selectCategory(
			categoryName = "Category 1",
			userSegmentDetailTitle = "${userSegmentDetailTitle}",
			vocabularyName = "Vocabulary Name");

		PortletEntry.publish();

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "5000");

		ContentDashboard.filterByCategory(
			categoryName = "Category 1",
			filterOption = "Categories");

		ContentDashboard.filterBySubtype(
			filterOption = "Subtype",
			subtypeName = "Subtype1");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 1");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title 1");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title 2");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Vocabulary.deleteByMenuCP(vocabularyName = "Vocabulary Name");
	}

	@description = "Validate if the user can filter by multiple tags"
	@priority = "5"
	test FilterByMultipleTags {
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tagnumber1,tagnumber2",
			webContentContent = "Web Content With Tag1 and Tag2",
			webContentTitle = "WC Title 1");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tagnumber1",
			webContentContent = "Web Content With Tag1",
			webContentTitle = "WC Title 2");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByTag(
			filterOption = "Tags",
			tagName = "tagnumber1");

		ContentDashboard.filterByTag(
			filterOption = "Tags",
			tagName = "tagnumber2");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 1");

		Tag.openTagsAdmin(siteURLKey = "test-site-name");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Tags");

		Tag.viewCP(tagName = "tagnumber1");

		PortletEntry.deleteViaToolbar(rowEntries = "tagnumber1");

		Alert.viewSuccessMessage();

		Tag.viewCP(tagName = "tagnumber2");

		PortletEntry.deleteViaToolbar(rowEntries = "tagnumber2");

		Alert.viewSuccessMessage();

		Portlet.viewEmptyMessage(message = "There are no tags.");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title 1");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title 2");
	}

	@description = "Validate if the user can filter by Site"
	@priority = "5"
	test FilterBySite {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Global",
			title = "WC Title Global");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterBySiteGlobal(filterOption = "Site or Asset Library");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Global");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title Global");
	}

	@description = "Validate if the user can filter by Status: Any"
	@priority = "5"
	test FilterByStatusAny {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title Approved");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC Title Draft",
			workflowAction = "DRAFT");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusAny(filterOption = "Any");

		ContentDashboard.searchValue(webContentTitle = "WC Title Approved");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Approved");

		ContentDashboard.searchValue(webContentTitle = "WC Title Draft");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Draft");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title Approved");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Draft");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Draft");
	}

	@description = "Validate if the user can filter by Status: Approved"
	@priority = "5"
	test FilterByStatusApproved {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title Approved");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusApproved(filterOption = "Approved");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Approved");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title Approved");
	}

	@description = "Validate if the user can filter by Status: Draft"
	@priority = "5"
	test FilterByStatusDraft {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC Title Draft",
			workflowAction = "DRAFT");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusDraft(filterOption = "Draft");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Draft");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Draft");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Draft");
	}

	@description = "Validate if the user can filter by Status: Scheduled"
	@priority = "5"
	test FilterByStatusScheduled {
		property portal.acceptance = "true";

		task ("Add a web content article with a future display date") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC Title Scheduled");

			WebContent.editDisplayDate(displayDate = "01/01/2100");

			PortletEntry.publish();
		}

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByStatusScheduled(filterOption = "Scheduled");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title Scheduled");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Scheduled");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Scheduled");
	}

	@description = "Validate if the user can filter by tag"
	@priority = "5"
	test FilterByTag {
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tag1",
			webContentContent = "Web Content With Tag1 and Tag2",
			webContentTitle = "Web Content Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByTag(
			filterOption = "Tags",
			tagName = "tag1");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "Web Content Title");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Tags");

		Tag.viewCP(tagName = "tag1");

		PortletEntry.deleteViaToolbar(rowEntries = "tag1");

		Alert.viewSuccessMessage();

		Portlet.viewEmptyMessage(message = "There are no tags.");
	}

	@description = "LPS-116840 When a user with update permissions clicks on the edit icon, the user is led to the web editor"
	@priority = "5"
	test IconEdit {
		property portal.acceptance = "true";

		task ("Create a Web Content ") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check it in its display page and access the edit") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click.clickNoMouseOver(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_MODIFIED_DATE");
		}
	}

	@description = "LPS-116840 When the user clicks on the info icon, the info panel displays"
	@priority = "5"
	test IconInfo {
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page and access the info") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "teste");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click.clickNoMouseOver(locator1 = "ContentDashboard#ROW_PANEL_WC");

			Click(locator1 = "ContentDashboard#ICON_INFO_LISTED_MODIFIED_DATE");
		}
	}

	@description = "LPS-116840 When the user clicks on the view icon of a content with an associated display page, the user is led to the view mode of the page"
	@priority = "5"
	test IconView {
		property portal.acceptance = "true";

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page and access the view") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			Click.clickNoMouseOver(locator1 = "ContentDashboard#ROW_PANEL_WC");

			Click(locator1 = "ContentDashboard#ICON_VIEW_LISTED_MODIFIED_DATE");
		}
	}

	@descrip	ion = "Validate if the user can order by Modification Date"
	@priority = "5"
	test OrderByModificationDate {
		for (var count : list "1,2,3,4,5") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Test Site Name",
				title = "WC Title ${count}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.orderByModificationDate(filterOption = "Modified Date");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 5");

		Click(locator1 = "ContentDashboard#REVERSE_SORT_DIRECTION_BUTTON");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 1");

		for (var count : list "1,2,3,4,5") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "WC Title ${count}");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "WC Title ${count}");
		}
	}

	@description = "Validate if the user can order by title"
	@priority = "5"
	test OrderByTitle {
		for (var count : list "1,2,3,4,5") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Test Site Name",
				title = "WC Title ${count}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.orderByTitle(filterOption = "Title");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 5");

		Click(locator1 = "ContentDashboard#REVERSE_SORT_DIRECTION_BUTTON");

		Pause(locator1 = "3000");

		AssertTextPresent(
			locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
			value1 = "WC Title 1");

		for (var count : list "1,2,3,4,5") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "WC Title ${count}");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "WC Title ${count}");
		}
	}

	@description = "LPS-132254 When a user selects the value of the number of rows (4, 8, 40, 60) displayed in the list, the Content Dashboard will display the number of rows selected"
	@priority = "5"
	test PaginationDisplaySelectedNumberOfRows {
		property portal.acceptance = "true";

		task ("Create 10 WC using JSON") {
			for (var count : list "1,2,3,4,5,6,7,8,9,10") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Test Site Name",
					title = "WC Title ${count}");
			}
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Check if the correct number of entries are being displayed") {
			Pagination.changePagination(itemsPerPage = "8");

			Pagination.viewResults(results = "Showing 1 to 8 of 10 entries.");
		}
	}

	@description = "LPS-132254 When a user use the <, > buttons, the page displayed moves forward/backward"
	@priority = "3"
	test PaginationMoveAcrossPagesWithButtons {
		property portal.acceptance = "true";

		task ("Create 6 WC using JSON") {
			for (var count : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Test Site Name",
					title = "WC Title ${count}");
			}
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Use < > buttons to move forth and back") {
			Pagination.changePagination(itemsPerPage = "4");

			Click(locator1 = "Pagination#NEXT_LINK");

			Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");

			Click(locator1 = "Pagination#PREVIOUS_LINK");

			Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");
		}
	}

	@description = "LPS-132254 When a user clicks on a page number, that page is displayed in the Content Dashboard"
	@priority = "3"
	test PaginationMoveAcrossPagesWithNumber {
		property portal.acceptance = "true";

		task ("Create 6 WC using JSON") {
			for (var count : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Test Site Name",
					title = "WC Title ${count}");
			}
		}

		task ("Go to Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Use page numbers to move between pages") {
			Pagination.changePagination(itemsPerPage = "4");

			ContentDashboard.moveToPage(pageNumber = "2");

			Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
		}
	}

	@description = "Validate if the user can open de Info side panel of a web content"
	@priority = "5"
	test SaveFiltersAfterEditing {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.filterByAuthorTable(filterOption = "Author");

		ContentDashboard.editWebContent(webContentTitle = "WC Title Edited");

		AssertTextPresent(
			locator1 = "ContentDashboard#FILTER_TEXT",
			value1 = "Author:Test Test");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC Title Edited");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC Title Edited");
	}

	@description = "LPS-131886 Validade if when Web Content is updated its being corectly displayed"
	@priority = "3"
	test ShouldExhibitUpdatedWebContent {
		task ("Create WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Go to Content Dashboard and Edit WC") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.editWebContent(webContentTitle = "WC WebContent New Title");
		}

		task ("Check if content is correct") {
			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_MODIFIED_DATE",
				value1 = "0 Seconds Ago");
		}
	}

	@description = "LPS-131886 Validade if a Web Content associated with a Display Page Template is shown"
	@priority = "5"
	test ShouldExhibitWebContentAssociatedWithDisplayPage {
		task ("Create and Publish a Display Page Template with Fragment") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content and set a Display Page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Check in Content Dashboard if WC is assiciated with Display Page Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Webcontent Title");

			AssertElementPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-131886 Validade if a Web Content not associated with a Display Page Template is shown"
	@priority = "5"
	test ShouldExhibitWebContentNotAssociatedWithDisplayPageTemplate {
		task ("Create WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Check if WC is not associated in Content Dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title");

			AssertElementNotPresent(locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED_DISPLAY_PAGE");
		}
	}

	@description = "LPS-133181 When Filter by Author 'All', displays content from all users featured in the user's content dashboard view."
	@priority = "5"
	test ShowAllContentCreatorUsers {
		task ("Create and configure second user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create First WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC Content 1",
				groupName = "Test Site Name",
				title = "WC Title 1");
		}

		task ("Change to second user and create second WC") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			JSONWebcontent.addWebContent(
				content = "WC Content 2",
				groupName = "Test Site Name",
				title = "WC Title 2");
		}

		task ("Go to Content Dashboard and aplly All filter") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.filterByAuthorAll(filterOption = "All");
		}

		task ("Check if all contents are being displayed") {
			ContentDashboard.searchValue(webContentTitle = "WC Title 1");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title 1");

			ContentDashboard.searchValue(webContentTitle = "WC Title 2");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title 2");
		}
	}

	@description = "LPS-133181 When Filter by Author 'Me', displays content where the current user is the last editor of the approved version."
	@priority = "5"
	test ShowOnlyContentCreatedByUser {
		task ("Create and configure second user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create First WC via JSON") {
			JSONWebcontent.addWebContent(
				content = "WC Content 1",
				groupName = "Test Site Name",
				title = "WC Title 1");
		}

		task ("Change to second user and create second WC") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC Content 2",
				webContentTitle = "WC Title 2");

			PortletEntry.publish();
		}

		task ("Go to Content Dashboard and aplly All filter") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			ContentDashboard.filterByAuthorMe(filterOption = "Me");
		}

		task ("Check if all contents created by user are being displayed") {
			ContentDashboard.orderByTitle(filterOption = "Title");

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "WC Title 2");
		}
	}

	@description = "Validate if the user can open de Info side panel of a web content"
	@priority = "5"
	test ViewInfoPanel {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Test Site Name",
			title = "WC Title");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		Pause(locator1 = "3000");

		ContentDashboard.openInfoPanelByDropdownMenu();

		AssertTextPresent(
			locator1 = "ContentDashboard#INFO_PANEL_TITLE",
			value1 = "Content Info");

		Click(locator1 = "ContentDashboard#CLOSE_INFO_PANEL_BUTTON");

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WC Title");
	}

}