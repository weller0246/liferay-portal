@component-name = "portal-analytics-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Set up instance and sign into DXP") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();

			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "AC Page");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8626 | Test Summary: Segment distribution chart can be filtered by date property"
	@priority = "5"
	test CanDistributionChartFilteredDateProperty {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("View AC Page as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			Pause(locator1 = "5000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add new user as member") {
			ACSegments.addStaticMember(tableMember = "userfn userln");

			ACSegments.saveSegment();
		}

		task ("Go to Segments") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute") {
			ACNavigation.switchTab(tabName = "Distribution");

			ACSegments.selectDistributionByAttribute(attribute = "birthDate");
		}

		task ("View Chart Entry") {
			ACSegments.viewBreakdownChartsEntry(key_entry = "1986-05-31T00:00:00.000Z - 100.0%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8627 | Test Summary: Segment distribution chart can be filtered by number property"
	@priority = "3"
	test CanDistributionChartFilteredNumber {
		property portal.upstream = "quarantine";

		// AC Refactor: Chart fails to appear when filtering with a number property.
		// AC Refactor ticket: LRAC-9328
		// AC Bug ticekt: LRAC-9329

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("View AC Page as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Age",
				fieldName = "age",
				fieldType = "Number",
				newField = "true",
				selectAnalyticsCloudField = "true",
				sourceFileName = "contacts_age.csv");

			ACNavigation.exitSettings();
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add new user as member") {
			ACSegments.addStaticMember(tableMember = "userfn userln");

			ACSegments.saveSegment();
		}

		task ("Go to Segments") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute") {
			ACNavigation.switchTab(tabName = "Distribution");

			ACSegments.selectDistributionByAttribute(attribute = "age");
		}

		task ("View Chart Entry") {

			// Test will fail here because of no chart appearing.

			ACSegments.viewBreakdownChartsEntry(key_entry = "userfn - 100.0%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8628 | Test Summary: Segment distribution chart can be filtered by text property"
	@priority = "3"
	test CanDistributionChartFilteredText {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("View AC Page as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add new user as member") {
			ACSegments.addStaticMember(tableMember = "userfn userln");

			ACSegments.saveSegment();
		}

		task ("Go to Segments") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute") {
			ACNavigation.switchTab(tabName = "Distribution");

			ACSegments.selectDistributionByAttribute(attribute = "givenName");
		}

		task ("View Chart Entry") {
			ACSegments.viewBreakdownChartsEntry(key_entry = "userfn - 100.0%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8625 | Test Summary: Search the Segment Profile Distribution"
	@priority = "3"
	test CanSearchTheSegmentProfileDistribution {
		var userList = "DXP,LiferayAC";

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Create new users") {
			for (var userCreate : list "${userList}") {
				JSONUser.addUser(
					jobTitle = "QA",
					userEmailAddress = "${userCreate}@liferay.com",
					userFirstName = "${userCreate}",
					userLastName = "${userCreate}",
					userScreenName = "${userCreate}");
			}
		}

		ACDXPSettings.syncNewContactData();

		task ("View AC Page as new user") {
			for (var userLogin : list "${userList}") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${userLogin}@liferay.com",
					userLoginFullName = "${userLogin} ${userLogin}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add new user as member") {
			for (var userAdd : list "${userList}") {
				ACSegments.addStaticMember(tableMember = "${userAdd} ${userAdd}");
			}

			ACSegments.saveSegment();
		}

		task ("Go to Segments") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute") {
			ACNavigation.switchTab(tabName = "Distribution");

			ACSegments.selectDistributionByAttribute(attribute = "jobTitle");
		}

		task ("Click on the category in the dashboard") {
			Click(locator1 = "ACSegments#BREAKDOWN_CHART");
		}

		task ("Assert that a right word will be found") {
			for (var userSearch : list "${userList}") {
				ACSegments.searchTheSegmentProfile(searchTerm = "${userSearch} ${userSearch}");

				ACInterests.viewIndividualInterestSpecificOrder(interestTopic = "${userSearch} ${userSearch}");
			}
		}

		task ("Assert that a wrong word will be not found") {
			ACSegments.searchTheSegmentProfile(searchTerm = "wrong");

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no items found.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8624 | Test Summary: Order the Segment Profile Distribution"
	@priority = "3"
	test OrderSegmentProfileDistribution {
		property portal.upstream = "quarantine";

		// AC Bug ticket: LRAC-9250
		// Depends on the bug fix

		task ("Connect Analytics Cloud to DXP") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Create page") {
			ACUtils.addSiteAndPage(layoutName = "AC Page");
		}

		task ("Add two new users") {
			for (var name : list "ac,liferay") {
				JSONUser.addUser(
					jobTitle = "QA",
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}

			ACDXPSettings.syncNewContactData();
		}

		task ("Login with the users and open the site") {
			for (var name : list "ac,liferay") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${name}@liferay.com",
					userLoginFullName = "${name} ${name}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Launch AC and Switch to new property") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add new user as member") {
			for (var name : list "ac,liferay" ) {
				ACSegments.addStaticMember(tableMember = "${name} ${name}");
			}

			ACSegments.saveSegment();
		}

		task ("Go to Segments") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute") {
			ACNavigation.switchTab(tabName = "Distribution");

			ACSegments.selectDistributionByAttribute(attribute = "jobTitle");
		}

		task ("Click in Chart Entry") {
			Click(locator1 = "ACSegments#BREAKDOWN_CHART");
		}

		task ("Sort the Names in ascending order") {
			ACInterests.viewIndividualInterestSpecificOrder(interestTopic = "ac ac,liferay liferay");
		}

		task ("Sort the Names in ascending order") {
			Click(
				labelOption = "Name",
				locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");
		}

		// Sorting the names in ascending order to work correctly depends on the bug fix

	}

}