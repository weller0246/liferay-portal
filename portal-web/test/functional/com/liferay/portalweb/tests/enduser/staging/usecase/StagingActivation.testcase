@component-name = "portal-staging"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Staging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Check the publication summary that is published via local staging."
	@priority = "4"
	test CheckPublicationSummaryLocal {
		property test.name.skip.portal.instance = "StagingActivation#CheckPublicationSummaryLocal";

		task ("Given: Add a new page on site and enable local staging") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page");

			JSONStaging.enableLocalStaging(groupName = "Site Name");
		}

		task ("And: Place a DM widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name (Staging)",
				layoutName = "Staging Test Page",
				site = "false",
				widgetName = "Documents and Media");
		}

		task ("When: Publish to local live site") {
			Navigator.gotoStagedSitePage(
				pageName = "Staging Test Page",
				siteName = "Site Name");

			Staging.gotoPublishToLive();

			Staging.publishToLive(publicationName = "summCheck");
		}

		task ("Then: Check publication summary") {
			Staging.openStagingAdmin(siteURLKey = "site-name-staging");

			Staging.viewPublicationSummary(
				dateRestrictionOption = "From Last Publish Date",
				deletions = "true",
				pagesOption = "Pages",
				permissions = "true",
				publicationTitle = "summCheck");
		}
	}

	@description = "Check the publication summary that is published via remote staging."
	@priority = "4"
	test CheckPublicationSummaryRemote {
		property app.server.bundles.size = "1";
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property databases.size = "1";
		property minimum.slave.ram = "24";
		property portal.acceptance = "true";

		task ("Given: Enable remote staging and add a new page on site") {
			Staging.remoteStagingSetUpViaJson(
				groupName = "Site Name",
				remotePort = "9080");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page");
		}

		task ("When: Publish to remote live site") {
			Navigator.gotoSitePage(
				pageName = "Staging Test Page",
				siteName = "Site Name");

			Staging.gotoPublishToLive();

			Staging.publishToLive(
				publicationName = "summCheck",
				remoteStaging = "true");
		}

		task ("Then: Check publication summary") {
			Staging.openStagingAdmin(siteURLKey = "site-name");

			Staging.viewPublicationSummary(publicationTitle = "summCheck");
		}
	}

	@description = "Verify that the recycle bin of the site is automatically emptied before turning on local staging."
	@priority = "4"
	test DeleteRecycleBinOnStagingActivation {
		property portal.acceptance = "true";

		task ("Given: Add a web content entry") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.addArticleCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("When: Move web content entry to recycle bin") {
			WebContent.moveToRecycleBinCP(webContentTitle = "Web Content Title");
		}

		task ("Then: Verify recycle bin of the local staging is empty") {
			Staging.openStagingAdmin(siteURLKey = "site-name");

			Staging.activateStagingCP(
				recycleBinNotification = "true",
				siteName = "Site Name");

			ProductMenu.gotoPortlet(
				category = "Recycle Bin",
				portlet = "Recycle Bin");

			RecycleBin.viewDefaultCP(assetName = "Web Content Title");
		}
	}

}