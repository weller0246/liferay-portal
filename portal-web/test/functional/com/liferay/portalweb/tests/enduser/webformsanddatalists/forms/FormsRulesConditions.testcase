@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			Navigator.gotoNavItem(navItem = "Data Providers");

			FormsAdmin.teardownDataProviders();

			Page.tearDownCP();
		}
	}

	@description = "Verify that a Rule Condition can be deleted"
	@ignore = "True"
	@priority = "5"
	test CanBeDeleted {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-134381 CanBeDeleted pending implementation

	}

	@description = "Verify that a Rule Condition can be edited"
	@ignore = "True"
	@priority = "5"
	test CanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionOperator = "Is empty",
			ruleNumber = "1");

		FormRules.gotoEdit(ruleNumber = "1");

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Does not contain",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionFieldConstant = "Test",
			conditionOperator = "Does not contain",
			ruleNumber = "1");
	}

	@description = "Verify that a Rule with 'Contains' condition can be created"
	@priority = "4"
	test CanCreateAContainsRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text",
			formPageNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Contains",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Numeric",
			conditionField = "Text",
			conditionOperator = "Contains",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		Form.validateNoFieldLabel(fieldLabel = "Numeric");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewLabel(
			fieldLabel = "Numeric",
			fieldName = "Numeric");
	}

	@description = "Verify that a Rule with 'Does not contains' condition can be created"
	@priority = "4"
	test CanCreateADoesNotContainRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		for (var fieldAndPosition : list "Text-0,Numeric-1") {
			var field = StringUtil.extractFirst("${fieldAndPosition}","-");
			var position = StringUtil.extractLast("${fieldAndPosition}","-");

			Form.gotoAddField(
				fieldPositionNumber = "${position}",
				fieldType = "${field}",
				formPageNumber = "0");

			Form.closeSidebar();
		}

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Does not contain",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Numeric",
			conditionField = "Text",
			conditionFieldConstant = "Test",
			conditionOperator = "Does not contain",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		FormFields.viewRequiredAsteriskDataField(fieldFieldLabel = "Numeric");

		for (var value : list "Test,Text") {
			FormFields.editText(
				fieldName = "Text",
				fieldValue = "${value}");

			if ("${value}" == "Test") {
				FormFields.viewRequiredAsteriskDataFieldNotPresent(fieldFieldLabel = "Numeric");
			}
			else {
				FormFields.viewRequiredAsteriskDataField(fieldFieldLabel = "Numeric");
			}
		}
	}

	@description = "Verify that a Rule with 'Is empty' condition can be created"
	@priority = "4"
	test CanCreateAnIsEmptyRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionOperator = "Is empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Numeric",
			conditionField = "Text",
			conditionFieldConstant = "Numeric",
			conditionOperator = "Is empty",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		FormFields.viewRequiredAsteriskDataField(fieldFieldLabel = "Numeric");

		FormFields.viewTextLabel(fieldLabel = "Indicates Required Fields");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewRequiredAsteriskDataFieldNotPresent(fieldFieldLabel = "Numeric");

		FormFields.viewFieldLabelNotPresent(fieldLabel = "Indicates Required Fields");
	}

	@description = "Verify that a Rule with 'Is Equal to' condition can be created"
	@priority = "4"
	test CanCreateAnIsEqualToRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Is equal to",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric");

		FormRules.save();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Numeric",
			conditionField = "Text",
			conditionOperator = "Is equal to",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		Form.validateNoFieldLabel(fieldLabel = "Numeric");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Text");

		Form.validateNoFieldLabel(fieldLabel = "Numeric");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewFieldLabel(
			fieldName = "Numeric",
			fieldValue = "");
	}

	@description = "Verify that a Rule with 'Is greater than or equal to' condition is working fine on the numeric field"
	@priority = "4"
	test CanCreateAnIsGreaterThanOrEqualToRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Paragraph",
			formPageNumber = "0");

		FormFields.editParagraphBody(content = "Test.");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Numeric",
			conditionFieldValue = "5",
			conditionOperator = "Is greater than or equal to",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Paragraph");

		FormRules.save();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Paragraph",
			conditionField = "Numeric",
			conditionFieldConstant = "5",
			conditionOperator = "Is greater than or equal to",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		for (var value : list "2,5,6") {
			FormFields.editText(
				fieldName = "Numeric",
				fieldValue = "${value}");

			if ("${value}" == "2") {
				FormFields.viewParagraphFieldNotPresent(fieldTitle = "Paragraph");
			}
			else {
				FormFields.viewParagraphField(
					fieldTitle = "Paragraph",
					fieldValue = "Test.");
			}

			if ("${value}" != "6") {
				FormFields.editTextWithBackspace(fieldName = "Numeric");
			}
		}
	}

	@description = "Verify that a Rule with 'Is greater than' condition is working fine on the numeric field"
	@ignore = "True"
	@priority = "4"
	test CanCreateAnIsGreaterThanRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-134390 CanCreateAnIsGreaterThanRule pending implementation

	}

	@description = "Verify that a Rule with 'Is less than or equal to' condition is working fine on the numeric field"
	@priority = "4"
	test CanCreateAnIsLessThanOrEqualToRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Text",
			formPageNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Numeric",
			conditionFieldValue = "5",
			conditionOperator = "Is less than or equal to",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Text",
			conditionField = "Numeric",
			conditionOperator = "Is less than or equal to",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewLabel(
			fieldLabel = "Text",
			fieldName = "Text");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "5");

		FormFields.viewLabel(
			fieldLabel = "Text",
			fieldName = "Text");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "4");

		FormFields.viewLabel(
			fieldLabel = "Text",
			fieldName = "Text");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "6");

		Form.validateNoFieldLabel(fieldLabel = "Text");
	}

	@description = "Verify that a Rule with 'Is less than' condition is working fine on the numeric field"
	@priority = "4"
	test CanCreateAnIsLessThanRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Paragraph",
			formPageNumber = "0");

		FormFields.editParagraphBody(content = "Test");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Numeric",
			conditionFieldValue = "5",
			conditionOperator = "Is less than",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Paragraph");

		FormRules.save();

		FormRules.viewSummary(
			action = "Show",
			actionTarget = "Paragraph",
			conditionField = "Numeric",
			conditionOperator = "Is less than",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		FormFields.viewLabel(
			fieldLabel = "Paragraph",
			fieldName = "Paragraph");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "5");

		Form.validateNoFieldLabel(fieldLabel = "Paragraph");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "4");

		FormFields.viewLabel(
			fieldLabel = "Paragraph",
			fieldName = "Paragraph");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "6");

		Form.validateNoFieldLabel(fieldLabel = "Paragraph");
	}

	@description = "Verify that a Rule with 'Is not Equal to' condition can be created"
	@priority = "4"
	test CanCreateAnIsNotEqualToRule {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Text",
			conditionFieldValue = "Test",
			conditionOperator = "Is not equal to",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Require",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormRules.viewSummary(
			action = "Require",
			actionTarget = "Text",
			conditionField = "Text",
			conditionOperator = "Is not equal to",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		FormFields.viewRequiredAsteriskDataField(fieldFieldLabel = "Text");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormFields.viewRequiredAsteriskDataFieldNotPresent(fieldFieldLabel = "Text");
	}

	@description = "Verify that the OR operator on Condition is working as expected"
	@priority = "5"
	test CanCreateMultipleConditionsUsingOR {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		for (var fieldAndNumber : list "Text-0,Numeric-1,Paragraph-2") {
			var field = StringUtil.extractFirst("${fieldAndNumber}","-");
			var rowNumber = StringUtil.extractLast("${fieldAndNumber}","-");

			Form.gotoAddField(
				fieldPositionNumber = "${rowNumber}",
				fieldType = "${field}",
				formPageNumber = "0");

			if ("${field}" == "Paragraph") {
				FormFields.editParagraphBody(content = "Test.");
			}

			Form.closeSidebar();
		}

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		for (var fieldAndNumber : list "Text-1,Numeric-2") {
			var field = StringUtil.extractFirst("${fieldAndNumber}","-");
			var rowNumber = StringUtil.extractLast("${fieldAndNumber}","-");

			FormRules.configureConditionOptions(
				conditionField = "${field}",
				conditionOperator = "Is not empty",
				conditionRowNumber = "${rowNumber}");

			if ("${field}" == "Text") {
				FormRules.addCondition();
			}
		}

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Paragraph");

		FormRules.save();

		for (var field : list "Text,Numeric") {
			FormRules.viewConditionFieldSummary(
				conditionField = "${field}",
				ruleNumber = "1");

			FormRules.viewConditionOperatorSummary(
				conditionOperator = "Is not empty",
				ruleNumber = "1");
		}

		FormRules.viewActionSummary(
			action = "Show",
			ruleNumber = "1");

		FormRules.viewActionTargetSummary(
			action = "Show",
			actionTarget = "Paragraph",
			ruleNumber = "1");

		FormsAdminNavigator.gotoFormBuilder();

		FormsAdminNavigator.gotoPreviewForm();

		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		FormFields.viewParagraphFieldNotPresent(fieldTitle = "Paragraph");

		var count = "0";

		while ("${count}" != "3") {
			if ("${count}" == "0" || "${count}" == "2") {
				FormFields.editText(
					fieldName = "Text",
					fieldValue = "Test");
			}
			else {
				FormFields.editText(
					fieldName = "Numeric",
					fieldValue = "1");
			}

			FormFields.viewParagraphField(
				fieldTitle = "Paragraph",
				fieldValue = "Test.");

			if ("${count}" == "0") {
				FormFields.editTextWithBackspace(fieldName = "Text");
			}

			var count = ${count} + 1;
		}
	}

	@description = "Verify that the OR operator on Condition is disabled by default"
	@priority = "5"
	test OrOperatorisDisabledByDefault {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.closeSidebar();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.viewRuleConditionDropdownDisabled();
	}

}