@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "false";
	property portal.upstream = "true";
	property slave.label = "slave-1";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site and page") {
			ACUtils.addSiteAndPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9204 | Test Summary: Add segment using a session property 'Device'"
	@priority = "4"
	test CanCreateSessionAttributeUsingDevice {
		property portal.upstream = "quarantine";

		// AC Refactor: timing issue for total members and membership card
		// AC Refactor ticket: LRAC-9264

		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch DXP and visit the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		// Total Members data is taking too much time to appear

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "New Segment Test");
		}

		task ("Add a Device Brand field") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "Device");

			ACSegments.selectOperator(operator = "is");

			ACSegments.editTextCriterion(textInput = "Desktop");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("Assert the criteria is correct in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaSessionAttributes(
				attributeName = "Device",
				attributeValue = '''"Desktop"''',
				condition = "is",
				preposition = "since",
				time = "last 24 hours");
		}

		task ("Assert that the user is present on the segment") {
			ACNavigation.switchTab(tabName = "Membership");

			ACSegments.assertMember(memberName = "Test Test");

			ACNavigation.switchTab(tabName = "Overview");

			// Takes too much time to the card data appear

			ACSegments.viewSegmentMembershipLegendNumbers(
				anonymousNumber = "0",
				knownNumber = "1",
				totalNumber = "1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9206 | Test Summary: Add segment using a session property 'Language'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSessionAttributeUsingLanguage {

		// TODO LRAC-9206 CanCreateSessionAttributeUsingLanguage pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9207 | Test Summary: Add segment using a session property 'Last Sign In Date'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSessionAttributeUsingLastSignInDate {

		// TODO LRAC-9207 CanCreateSessionAttributeUsingLastSignInDate pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9208 | Test Summary: Add segment using a session property 'Referrer URL'"
	@priority = "4"
	test CanCreateSessionAttributeUsingReferrerURL {
		property portal.upstream = "quarantine";

		// AC Refactor: timing issue for Referrer URL with page sync
		// AC Refactor ticket: LRAC-9272

		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync new user") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Add pages") {
			for (var n : list "1,2") {
				ACUtils.addSiteAndPage(layoutName = "AC Page ${n}");
			}
		}

		task ("Go to AC Page and get URL") {
			Navigator.gotoSitePage(
				pageName = "AC Page 1",
				siteName = "Site Name");

			var myURL = Navigator.getCurrentURL();

			Pause(locator1 = "3000");

			Navigator.gotoSitePage(
				pageName = "AC Page 2",
				siteName = "Site Name");
		}

		task ("Sign in with the new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			for (var n : list "1,2") {
				Navigator.gotoSitePage(
					pageName = "AC Page ${n}",
					siteName = "Site Name");

				Pause(locator1 = "3000");
			}
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Add an URL criteria from Session Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "Referrer");

			ACSegments.selectOperator(operator = "is");

			ACSegments.editTextCriterion(textInput = "${myURL}");

			ACSegments.editWebBehaviorCriterion(
				indexField = "1",
				timeOption = "ever");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("View criteria in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaSessionAttributes(
				attributeName = "Referrer",
				attributeValue = '''"${myURL}"''',
				condition = "is",
				preposition = "ever");
		}

		task ("Refresh the page to receive data") {
			Refresh();
		}

		task ("Assert that new user is on segment") {

			// Takes too much time to sync and get data from the page on AC

			ACNavigation.openItem(itemName = "Membership");

			ACSegments.assertMember(memberName = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9209 | Test Summary: Add segment using a session property 'Request Parameters'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSessionAttributeUsingRequestParameters {

		// TODO LRAC-9209 CanCreateSessionAttributeUsingRequestParameters pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9210 | Test Summary: Add segment using a session property 'Signed In'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSessionAttributeUsingSignedIn {

		// TODO LRAC-9210 CanCreateSessionAttributeUsingSignedIn pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9211 | Test Summary: Add segment using a session property 'URL'"
	@priority = "4"
	test CanCreateSessionAttributeUsingURL {
		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync new user") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("Go to Home Page DXP") {
			Navigator.openURL();
		}

		task ("Get URL") {
			var myURL = Navigator.getCurrentURL();
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Add an URL criteria from Session Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "URL");

			ACSegments.selectOperator(operator = "is");

			ACSegments.editTextCriterion(textInput = "${myURL}");

			ACSegments.editWebBehaviorCriterion(
				indexField = "1",
				timeOption = "ever");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("View criteria in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaSessionAttributes(
				attributeName = "URL",
				attributeValue = '''"${myURL}"''',
				condition = "is",
				preposition = "ever");
		}

		task ("Refresh the page to receive data") {
			Refresh();
		}

		task ("Assert that new user is on segment") {
			ACNavigation.openItem(itemName = "Membership");

			ACSegments.assertMember(memberName = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9212 | Test Summary: Create a Segment of Session in a Topic"
	@ignore = "true"
	@priority = "4"
	test CreateSegmentSessionInATopic {

		// TODO LRAC-9212 CreateSegmentSessionInATopic pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9213 | Test Summary: Show 'duplicate' and 'delete' options in a list for every segment criteria"
	@priority = "4"
	test SegmentCriteriaOptionsContainsDuplicateAndDelete {
		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Add criterias from differents attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "URL");

			ACSegments.goToSidebarAttributes(criterion = "Account Attributes");

			ACSegments.addSegmentField(segmentField = "accountName");
		}

		task ("Assert that Duplicate and Delete are present in the criterias options") {
			Click(
				criteriaName = "URL",
				index = "1",
				locator1 = "ACSegments#CRITERIA_ELLIPSIS");

			MenuItem.viewPresent(menuItem = "Duplicate");

			MenuItem.viewPresent(menuItem = "Delete");

			Click(
				criteriaName = "accountName",
				index = "1",
				locator1 = "ACSegments#CRITERIA_ELLIPSIS");

			MenuItem.viewPresent(menuItem = "Duplicate");

			MenuItem.viewPresent(menuItem = "Delete");
		}
	}

}