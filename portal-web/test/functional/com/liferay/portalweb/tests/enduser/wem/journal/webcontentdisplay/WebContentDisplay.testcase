@component-name = "portal-wcd"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Display";

	var pageName = "Web Content Display Page";
	var portletName = "Web Content Display";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@priority = "5"
	test AddAudioViaWebContent {
		property dummy.socket.proxy.disabled = "true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "WebContentDisplay#AddAudioViaWebContent";
		property testray.component.names = "Training,Web Content Administration";

		task ("Enable the FFMPEG Audio Converter in System Settings") {
			DMNavigator.openToConfigInSystemSettings(portlet = "FFMPEG Audio Converter");

			FormFields.enableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.mp3",
			groupName = "Test Site Name",
			mimeType = "audio/mpeg",
			sourceFileName = "Document_1.mp3");

		DMDocument.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.mp3");

		DMNavigator.gotoURLDetail();

		var dmDocumentURL = selenium.getElementValue("//input[contains(@id,'url')]");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.uploadAudio(
			dmDocumentURL = "${dmDocumentURL}",
			navTab = "URL");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewAudioViaWCD();
	}

	@priority = "4"
	test AddDraftNotApproved {
		property testray.component.names = "Web Content Display";

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.addDraftPGViaWCD(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(
			draft = "true",
			webContentTitle = "WC WebContent Title");
	}

	@priority = "5"
	test AddExistingPageAsDisplayPageInSiteCP {
		property portal.acceptance = "true";
		property testray.component.names = "Training,Web Content Administration";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Site Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Site Page Name",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Site Page Name",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.editDisplayPage(
			pageName = "Site Page Name",
			pageType = "Public Pages",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Site Page Name",
			siteName = "Test Site Name");

		WebContent.viewPGViaAP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");
	}

	@priority = "5"
	test AddImageToWebContentViaItemSelector {
		property portal.acceptance = "true";
		property testray.component.names = "Training,Web Content Administration";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Image Page");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		ItemSelector.gotoItemSelectorViaCKEditor();

		ItemSelector.uploadFile(
			navTab = "Documents and Media",
			uploadFileName = "Document_3.png");

		PortletEntry.publish();

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Image Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Web Content Image Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		AssertElementPresent(locator1 = "WCD#WEB_CONTENT_INLINE_IMAGE");
	}

	@priority = "4"
	test AddNewWebContentViaAddContentPanel {
		property testray.component.names = "Web Content Display";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Page");

		Navigator.gotoSitePage(
			pageName = "Web Content Page",
			siteName = "Test Site Name");

		Content.addNewPG(assetType = "Basic Web Content");

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Click.clickAt(locator1 = "ControlMenu#ADD");

		AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

		Navigator.gotoNavTab(navTab = "Content");

		AssertVisible(
			key_entryTitle = "WC WebContent Title",
			locator1 = "ControlMenuAddPanel#ASSET_ENTRY");
	}

	@priority = "4"
	test AddVideoViaWebContent {
		property dummy.socket.proxy.disabled = "true";
		property testray.component.names = "Web Content Administration,Web Content Display";

		task ("Add an external video shortcut") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			VideoShortcut.addCP(
				videoShortcutTitle = "Liferay Digital Experience Platform",
				videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addViaCKEditor(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.uploadVideo(
			navTab = "Documents and Media",
			videoShortcutTitle = "Liferay Digital Experience Platform");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WaitForElementPresent(locator1 = "YoutubePortlet#VIDEO_IFRAME");

		WebContent.viewVideoViaWCD(videoShortcutTitle = "Liferay Digital Experience Platform");
	}

	@priority = "5"
	test AddWebContent {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Display";

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.addPGViaWCD(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@priority = "3"
	test AddWebContentPortalScopeCurrentPage {
		property testray.component.names = "Web Content Display";

		for (var i : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page${i}");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page${i}",
				widgetName = "Web Content Display");
		}

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page1",
			siteName = "Test Site Name");

		MouseOver(locator1 = "Portlet#PORTLET_CONTENT");

		WebContentDisplayPortlet.configureScopePG(scopeSelection = "Web Content Display Page1");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page1",
			siteName = "Test Site Name");

		MouseOver(locator1 = "Portlet#PORTLET_CONTENT");

		WebContentDisplayPortlet.viewConfigureScopePG(scopeSelection = "Web Content Display Page1");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page2",
			siteName = "Test Site Name");

		MouseOver(locator1 = "Portlet#PORTLET_CONTENT");

		WebContentDisplayPortlet.configureScopePG(scopeSelection = "Web Content Display Page1");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page2",
			siteName = "Test Site Name");

		MouseOver(locator1 = "Portlet#PORTLET_CONTENT");

		WebContentDisplayPortlet.viewConfigureScopePG(scopeSelection = "Web Content Display Page1");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page1",
			siteName = "Test Site Name");

		MouseOver(locator1 = "Portlet#PORTLET_CONTENT");

		WebContent.addPGViaWCD(
			portletNameScoped = "Web Content Display (Web Content Display Page1)",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page2",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.viewDefaultMessage();

		MouseOver(locator1 = "Portlet#PORTLET_CONTENT");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@priority = "5"
	test AddWebContentViaAddContentPanel {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Display,Training";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		Content.addPG(
			assetTitle = "WC WebContent Title",
			pageName = "Web Content Display Page",
			webContentContent = "WC WebContent Content");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@description = "This is a use case for LPS-70386."
	@priority = "5"
	test AddWebContentWithPortletURL {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Site Page Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(webContentTitle = "Web Content Title");

		var portalURL = PropsUtil.get("portal.url");

		CKEditor.addSourceContent(content = '''<p><span><a href="${portalURL}/web/test-site-name/site-page-name/-/testportlet">text</a></span></p>''');

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Site Page Name",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Site Page Name",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		IFrame.closeFrame();

		Click(
			key_contentText = "text",
			locator1 = "WCD#WEB_CONTENT_TEXT_LINK_URL");

		Portlet.viewTitle(portletName = "testportlet");
	}

	@description = "Add a web content article with a custom DDM structure and template and display it in the web content display widget."
	@priority = "5"
	test AddWithStructure {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "false";
		property portal.acceptance = "false";
		property testray.component.names = "Web Content Display,Training";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addField(
			fieldFieldLabel = "Text Box",
			fieldLocation = "2",
			fieldName = "Text",
			fieldType = "Multiple Lines");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateFile = "wc_template.ftl",
			templateName = "WC Template Name");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		var content = '''Hello World
Welcome to Liferay Community Edition Portal 7.4.0 CE GA1''';

		WebContent.addStructuredPGViaWCD(
			fieldLabelList = "Text,Text Box",
			structureName = "WC Structure Name",
			text = "WC WebContent Text",
			textBox = "${content}",
			webContentTitle = "WC WebContent Title");

		AssertTextEquals(
			locator1 = "//div[contains(@class,journal-content-article)]//h1[contains(@class,'text')]",
			value1 = "WC WebContent Text");

		var actual = TestUtils.getElementTextContent(element = "//div[contains(@class,journal-content-article)]//h2[contains(@class,'text-box')]");

		TestUtils.assertEquals(
			actual = "${actual}",
			expected = "${content}");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		WebContent.viewWithStructureCP(
			fieldType = "Multiple Lines",
			predefinedValue = "true",
			webContentText = "${content}",
			webContentTextFieldLabel = "Text Box");
	}

	@priority = "4"
	test AssertExpired {
		property testray.component.names = "Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireSpecificVersionCP(webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(
			expiredContent = "true",
			webContentTitle = "WC WebContent Title");
	}

	@priority = "4"
	test ChangeTemplate {
		property test.name.skip.portal.instance = "WebContentDisplay#ChangeTemplate";
		property testray.component.names = "Web Content Display";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");

		WebContentTemplates.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

		WebContentTemplates.addCP(
			structureName = "Basic Web Content",
			templateFieldNames = "Content,Content,Content",
			templateName = "Second Basic Template");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.addPGViaWCD(
			templateName = "Second Basic Template",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content WC WebContent Content WC WebContent Content");

		WebContentDisplayPortletNavigator.gotoEdit(
			menuItem = "Edit Web Content",
			webContentTitle = "WC WebContent Title");

		WebContent.selectTemplateCP(
			structureName = "Basic Web Content",
			templateName = "Basic Web Content");

		WebContent.publishViaWCD();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@description = "This is a test for LPS-129438. The user could configure the border styles of WCD."
	@priority = "4"
	@uitest
	test ConfigureBorderStyles {
		task ("View the default border width and border color of WCD") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			AssertVisible(
				key_portletName = "Web Content Display",
				locator1 = "Portlet#TITLE");

			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-width",
					value1 = "1px");
			}

			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-color",
					value1 = "rgba(0, 0, 0, 0)");
			}
		}

		task ("Define the border width and border color of WCD") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Portlet.gotoPortletOptions(
				portletName = "Web Content Display",
				portletOption = "Look and Feel Configuration");

			IFrame.selectConfigurationFrame();

			Portlet.configureCustomBorderStylesViaLookandfeelPG(
				borderColorAttributeList = "Top-FF0D0D",
				borderWidthAttributeList = "WidthTop-15",
				borderWidthUnitList = "WidthTop-px",
				sameForAllFieldsetLabelList = "Border Width,Border Color");

			IFrame.closeFrame();

			Refresh();

			AssertVisible(
				key_portletName = "Web Content Display",
				locator1 = "Portlet#TITLE");
		}

		task ("View the border width and border color of WCD") {
			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-width",
					value1 = "15px");
			}

			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-color",
					value1 = "rgba(255, 13, 13, 1)");
			}
		}
	}

	@description = "This is a test for LPS-129944. The user could configure WCD when selected web content based on template with embedded widget."
	@priority = "4"
	test ConfigureWCDWhenSelectedWebContentBasedOnTemplateWithEmbeddedWidget {
		task ("Add a web content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template for new structure") {
			NavItem.gotoTemplates();

			var instanceId = StringUtil.randomString("12");

			var templateScript = '''<@liferay_portlet["runtime"] portletName="com_liferay_journal_content_web_portlet_JournalContentPortlet" instanceId="${instanceId}" />''';

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a web content based on new structure") {
			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "WC WebContent Title");

			PortletEntry.publish();
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add the web content to page via Content tab of Add panel") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Content.addPG(
				assetTitle = "WC WebContent Title",
				pageName = "Test Page Name");
		}

		task ("Enable the Related Assets in WCD") {
			Portlet.gotoPortletOptions(
				portletName = "Web Content Display",
				portletOption = "Configuration");

			WebContentDisplayPortlet.configureSetupPG(metadataNameList = "Related Assets");

			WebContentDisplayPortlet.saveConfiguration();

			IFrame.closeFrame();
		}

		task ("View the web content shown on WCD") {
			Portlet.viewTitle(portletName = "WC WebContent Title");

			Portlet.viewTitle(portletName = "Web Content Display");

			WebContentDisplayPortlet.viewDefaultMessage();
		}
	}

	@description = "This is a use case for LPS-130033. Display web content with Geolocation field in Web Content Display."
	@priority = "4"
	test DisplayWebContentWithGeolocationField {
		task ("Add a web content structure with a Geolocation field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Geolocation",
				fieldName = "Geolocation");

			WebContentStructures.saveCP();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View the web content is shown in Web Content Display") {
			Portlet.viewTitle(portletName = "Web Content Title");

			AssertVisible(
				key_content = "//div[contains(@id,'Geolocation')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@priority = "4"
	test EditWebContent {
		property testray.component.names = "Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentDisplayPortletNavigator.gotoEdit(
			menuItem = "Edit Web Content",
			webContentTitle = "WC WebContent Title");

		WebContent.editPGViaWCD(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitleEdit = "WC WebContent Title Edit");
	}

	@priority = "4"
	test LocalizeWebContent {
		property test.name.skip.portal.instance = "WebContentDisplay#LocalizeWebContent";
		property testray.component.names = "Localization,Web Content Display";

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Language Selector");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentDisplayPortletNavigator.gotoEdit(
			menuItem = "Edit Web Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(locale = "zh-CN");

		WebContent.addCP(
			webContentContent = "世界您好 Content",
			webContentTitle = "世界您好 Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		LanguagePortlet.selectLanguagePG(
			locale = "zh-CN",
			textIcon = "中文-中国");

		WebContent.viewPGViaWCD(webContentContent = "世界您好 Content");

		LanguagePortlet.tearDownLanguagePG();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@priority = "4"
	test SearchWebContent {
		property testray.component.names = "Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.searchWebContent(webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.searchForNoWebContent(webContentTitle = "WC2 WebContent2 Title2");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.searchWebContent(
			webContentSearchValue = "&quot;WC WebContent Title&quot;",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.searchForNoWebContent(
			webContentSearchValue = "&quot;WC2 WebContent2 Title2&quot;",
			webContentTitle = "WC2 WebContent2 Title2");
	}

	@priority = "5"
	test SelectWebContent {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Display,Training";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@priority = "3"
	test SelectWebContentScopeGlobal {
		property testray.component.names = "Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Global",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.configureScopePG(scopeSelection = "Global");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.viewConfigureScopePG(scopeSelection = "Global");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@description = "This is a use case for LPS-71941."
	@priority = "5"
	test UndeployWebContentDisplayModuleViaGogoShell {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "WebContentDisplay#UndeployWebContentDisplayModuleViaGogoShell";

		GogoShell.openGogoShellAdmin();

		var moduleID = GogoShell.getModuleID(moduleName = "com.liferay.journal.content.web");

		GogoShell.stopModule(moduleID = "${moduleID}");

		GogoShell.viewModuleStatus(
			moduleName = "com.liferay.journal.content.web",
			moduleStatus = "Resolved");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		Portlet.viewUndeployMessage();

		Click(locator1 = "Portlet#PORTLET_CONTENT");

		Portlet.deletePG(portletName = "com_liferay_journal_content_web_portlet_JournalContentPortlet");

		GogoShell.openGogoShellAdmin();

		GogoShell.startModule(moduleID = "${moduleID}");

		GogoShell.viewModuleStatus(
			moduleName = "com.liferay.journal.content.web",
			moduleStatus = "Active");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Web Content Display");
	}

	@priority = "4"
	test ViewAllFileTypesEnabled {
		property test.name.skip.portal.instance = "WebContentDisplay#ViewAllFileTypesEnabled";
		property testray.component.names = "Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Connectors",
			configurationName = "OpenOffice Integration",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "serverEnabled");

		SystemSettings.saveConfiguration();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		WebContentDisplayPortlet.configureSetupPG(userToolNameList = "DOC,ODT,PDF,TXT");

		WebContentDisplayPortlet.saveConfiguration();

		IFrame.closeFrame();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.viewEnabledFileTypesPGViaWCD(fileTypes = "DOC,ODT,PDF,TXT");
	}

	@priority = "4"
	test ViewAllSettingsEnabledWCDConfiguration {
		property test.name.skip.portal.instance = "WebContentDisplay#ViewAllSettingsEnabledWCDConfiguration";
		property testray.component.names = "Web Content Display";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content 1",
			webContentTitle = "Web Content Title 1");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.addCP(
			webContentContent = "Web Contenido Contenido 1",
			webContentTitle = "Web Contenido Título 1");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title 1");

		JSONWebcontent.addWebContent(
			content = "Web Content Content 2",
			groupName = "Test Site Name",
			title = "Web Content Title 2");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title 1");

		WebContent.addExistingRelatedAssetCP(
			assetTitle = "Web Content Title 2",
			assetType = "Basic Web Content",
			siteName = "Test Site Name");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title 1");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		WebContentDisplayPortlet.configureSetupPG(
			enableViewCountIncrement = "true",
			metadataNameList = "Related Assets,Ratings,Comments,Comment Ratings",
			userToolNameList = "Translations,Print");

		WebContentDisplayPortlet.saveConfiguration();

		IFrame.closeFrame();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.viewAllSettingsEnabledPG(
			locale = "español-España",
			relatedAssetTitle = "Web Content Title 2",
			webContentContentLocalized = "Web Contenido Contenido 1",
			webContentTitleLocalized = "Web Contenido Título 1");
	}

	@priority = "4"
	test ViewArticleWithGuestViewPermission {
		property testray.component.names = "Permissions,Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		PermissionsInline.gotoConfigurationPG(portletName = "Web Content Display");

		Role.viewPermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			permissionFlagged = "true",
			roleTitle = "guest");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "guest");

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		Portlet.viewNoPermissionPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		PermissionsInline.gotoConfigurationPG(portletName = "Web Content Display");

		Role.definePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "guest");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEntryMenuItem(
			entry = "WC WebContent Title",
			menuItem = "Permissions");

		IFrame.selectPermissionsFrame();

		Role.viewPermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			permissionFlagged = "true",
			roleTitle = "guest");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "guest");

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewNoContentAsGuestPGViaWCD();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test ViewEditTemplate {
		property testray.component.names = "Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentDisplayPortlet.editTemplate(
			editTemplateButton = "true",
			structureName = "Basic Web Content",
			templateName = "Template Edit",
			templateScript = "Template Edited Extra Content",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@description = "View messages in Web Content Display."
	@priority = "4"
	@uitest
	test ViewMessagesInWebContentDisplay {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("View the default message shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewDefaultMessage();
		}

		task ("Select the web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

			IFrame.closeFrame();
		}

		task ("View the web content shown in Web Content Display") {
			WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
		}

		task ("Remove the web content from Web Content Display") {
			WebContentDisplayPortlet.removeWebContent();
		}

		task ("View the default message shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewDefaultMessage();
		}

		task ("Select the web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

			IFrame.closeFrame();
		}

		task ("Move the web content to Recycle Bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentTitle = "WC WebContent Title");
		}

		task ("View the moved to Recycle Bin message shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewRecycleBinMessage(webContentTitle = "WC WebContent Title");
		}

		task ("Undo move to Recycle Bin in Web Content Display") {
			WebContentDisplayPortlet.undoMoveToRecycleBin();
		}

		task ("View the web content shown in Web Content Display") {
			WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
		}

		task ("Delete the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "WC WebContent Title");
		}

		task ("View the no longer exists message in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewDeletedArticle();
		}

		task ("View the no longer exists message as Guest") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContent.viewNoContentAsGuestPGViaWCD(portletName = "Web Content Display");
		}
	}

	@priority = "4"
	test ViewPortletWCDShowAvailableLocales {
		property testray.component.names = "Localization,Web Content Display";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentDisplayPortletNavigator.gotoEdit(
			menuItem = "Edit Web Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(locale = "zh-CN");

		WebContent.addCP(
			webContentContent = "世界您好 Content",
			webContentTitle = "世界您好 Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		WebContentDisplayPortlet.configureSetupPG(userToolNameList = "Translations");

		WebContentDisplayPortlet.saveConfiguration();

		IFrame.closeFrame();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		LanguagePortlet.selectLanguagePG(
			locale = "zh-cn",
			portletName = "JournalContentPortlet",
			textIcon = "中文-中国");

		WebContent.viewPGViaWCD(webContentContent = "世界您好 Content");

		LanguagePortlet.selectLanguagePG(
			locale = "en_US",
			portletName = "JournalContentPortlet",
			textIcon = "english-United States");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@priority = "4"
	test ViewWithPaginationScript {
		property testray.component.names = "Web Content Display";

		JSONWebcontent.addWebContent(
			content = "@page_break@ Home @page_break@",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContent.viewPageBreak();

		WebContentDisplayPortlet.viewContentPageBreak(webContentContent = "Home");
	}

}