@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content and Application Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "ADT Test Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "ADT Test Page",
			layoutTemplate = "1 Column");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "View the widget template applied to Asset Publisher widget."
	@priority = "3"
	test ViewWidgetTemplateAppliedToAssetPublisher {
		property testray.component.names = "Asset Publisher,Content and Application Templates";

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "Asset Publisher");
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a widget template for Asset Publisher") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_asset_publisher_rich_summary.ftl",
				adtType = "Asset Publisher");
		}

		task ("Configure the display setttings of Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureDisplaySettings(
				displaySettings = "Comments,Comment Ratings,Flags,Print,Ratings,Related Assets",
				enableSocialBookmarkSites = "Facebook,LinkedIn,Twitter");
		}

		task ("Select the widget template in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewDefaultWithAllDisplaySettingsCheckboxesPG(
				assetDescription = "Web Content Content",
				assetTitle = "Web Content Title");

			ApplicationDisplayTemplates.selectPortletADT(templateName = "Asset Publisher Test ADT");
		}

		task ("View the widget template applied to Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewCustomADTRichSummaryPG(
				assetDescription = "Web Content Content",
				assetTitle = "Web Content Title");
		}
	}

	@description = "View the widget template applied to Breadcrumb widget."
	@priority = "5"
	test ViewWidgetTemplateAppliedToBreadcrumb {
		property portal.acceptance = "true";
		property testray.component.names = "Breadcrumb,Content and Application Templates";

		task ("Add a Breadcrumb to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "Breadcrumb");
		}

		task ("Select the Arrows widget template in Breadcrumb") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "BreadcrumbPortlet#BREADCRUMB");

			Portlet.gotoPortletOptions(
				portletName = "Breadcrumb",
				portletOption = "Configuration");

			Breadcrumb.configureBreadcrumb(selectADTType = "Arrows");
		}

		task ("View the widget template applied to Breadcrumb") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			Breadcrumb.viewADTApplied(breadcrumbADTType = "arrows");
		}
	}

	@description = "View the widget template applied to Categories Navigation widget."
	@priority = "5"
	test ViewWidgetTemplateAppliedToCategoriesNavigation {
		property portal.acceptance = "true";
		property testray.component.names = "Categories,Content and Application Templates";

		task ("Add three vocabularies") {
			for (var n : list "1,2,3") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "Vocabulary Name ${n}");
			}
		}

		task ("Add a category to last two vocabularies") {
			for (var n : list "2,3") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name ${n}",
					vocabularyName = "Vocabulary Name ${n}");
			}
		}

		task ("Add a Categories Navigation to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "Categories Navigation");
		}

		task ("View the displayed content in Categories Navigation") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			CategoriesNavigationPortlet.viewDefaultPG(
				categoryName = "Category Name 2",
				vocabularyName = "Vocabulary Name 2");

			CategoriesNavigationPortlet.viewDefaultPG(
				categoryName = "Category Name 3",
				vocabularyName = "Vocabulary Name 3");
		}

		task ("Add a widget template for Categories Navigation") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_categories_navigation_multi_column.ftl",
				adtType = "Categories Navigation");
		}

		task ("Select the widget template in Categories Navigation") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			ApplicationDisplayTemplates.selectPortletADT(templateName = "Categories Navigation Test ADT");
		}

		task ("View the widget template applied to Categories Navigation") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			CategoriesNavigationPortlet.viewCustomADTMultiColumnPG(
				categoryNameList = "Null,Null,Category Name 2,Category Name 3",
				columnList = "1,2,3,4",
				vocabularyNameList = "Topic,Vocabulary Name 1,Vocabulary Name 2,Vocabulary Name 3");
		}
	}

	@description = "View the widget template applied to RSS Publisher widget."
	@priority = "5"
	test ViewWidgetTemplateAppliedToRSSPublisher {
		property portal.acceptance = "true";
		property testray.component.names = "Content and Application Templates,RSS";

		task ("Add a RSS Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "RSS Publisher");
		}

		task ("Add a RSS Feed") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			RSSPortlet.addFeed(
				feedRowIndexNumber = "0",
				feedTitle = "Latimes &gt; Technology News",
				feedType = "file",
				feedUrlLink = "rss2.0.xml");
		}

		task ("Add a widget template for RSS Publisher") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtType = "RSS Publisher",
				fieldNameList = "RSS Feeds*");
		}

		task ("Select the widget template in RSS Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			RSSPortlet.waitForRSSLoad();

			ApplicationDisplayTemplates.selectPortletADT(templateName = "RSS Publisher Test ADT");
		}

		task ("View the widget template applied to RSS Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			RSSPortlet.waitForRSSLoad();

			RSSPortlet.viewCustomADT(feedContentTitle = "Technology");
		}
	}

	@description = "View the widget template applied to Site Map widget."
	@priority = "3"
	test ViewWidgetTemplateAppliedToSiteMap {
		property testray.component.names = "Content and Application Templates,Sitemap";

		task ("Add a Site Map widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "Site Map");
		}

		task ("Add two widget pages") {
			for (var n : list "2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "ADT Test Page ${n}");
			}
		}

		task ("Add a child widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Child Page Name",
				parentLayoutName = "ADT Test Page");
		}

		task ("View the displayed content in Site Map") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			SiteMapPortlet.viewDefaultPG(
				listChildPageName = "ADT Child Page Name",
				listPageName = "ADT Test Page,ADT Test Page 2,ADT Test Page 3");
		}

		task ("Add a widget template for Site Map") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_sitemap_multi_column.ftl",
				adtType = "Site Map");
		}

		task ("Select the widget template in Site Map") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			ApplicationDisplayTemplates.selectPortletADT(templateName = "Site Map Test ADT");
		}

		task ("View the widget template applied to Site Map") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			SiteMapPortlet.viewCustomADTMultiColumnPG(
				listChildPageName = "ADT Child Page Name",
				listPageName = "ADT Test Page,ADT Test Page 2,ADT Test Page 3");
		}
	}

	@description = "View the widget template applied to Tags Navigation widget."
	@priority = "5"
	test ViewWidgetTemplateAppliedToTagsNavigation {
		property portal.acceptance = "true";
		property testray.component.names = "Content and Application Templates,Tags";

		task ("Add a Tags Navigation to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "Tags Navigation");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Blogs Test Page");
		}

		task ("Add a Blogs widget to new page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Blogs Test Page",
				widgetName = "Blogs");
		}

		task ("Add three blogs entry with tag") {
			JSONBlog.addEntry(
				assetTagNames = "tag name 1,tag name 2,tag name 3",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONBlog.addEntry(
				assetTagNames = "tag name 2,tag name 3",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONBlog.addEntry(
				assetTagNames = "tag name 3",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("View the displayed content in Tags Navigation") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			TagsNavigationPortlet.viewDefaultPG(tagNameList = "tag name 1,tag name 2,tag name 3");
		}

		task ("Add a widget template for Tags Navigation") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_tags_color.ftl",
				adtType = "Tag Cloud");
		}

		task ("Select the widget template in Tags Navigation") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			ApplicationDisplayTemplates.selectPortletADT(templateName = "Tag Cloud Test ADT");
		}

		task ("View the widget template applied to Tags Navigation") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			TagsNavigationPortlet.viewADTColorByPopularityPG(
				adtTagColor = "green",
				tagName = "tag name 1");

			TagsNavigationPortlet.viewADTColorByPopularityPG(
				adtTagColor = "orange",
				tagName = "tag name 2");

			TagsNavigationPortlet.viewADTColorByPopularityPG(
				adtTagColor = "red",
				tagName = "tag name 3");
		}
	}

	@description = "View the widget template applied to Wiki widget."
	@priority = "3"
	test ViewWidgetTemplateAppliedToWiki {
		property app.server.types = "tomcat,websphere";
		property testray.component.names = "Content and Application Templates,Wiki";

		task ("Add a Wiki to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "Wiki");
		}

		task ("Add content to FrontPage") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			JSONWiki.updateWikiPage(
				groupName = "Test Site Name",
				wikiNodeName = "Main",
				wikiPageContent = "Test Wiki Content",
				wikiPageName = "FrontPage");
		}

		task ("Add a Wiki type widget template") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_wiki_social.ftl",
				adtType = "Wiki");
		}

		task ("Select the widget template in Wiki widget") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Wiki",
				templateName = "Wiki Test ADT");
		}

		task ("View the widget template is applied to Wiki widget") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			WikiPage.viewCustomADTSocialPG(wikiPageContent = "Test Wiki Content");
		}
	}

	@description = "View the widget template based on script file applied to RSS Publisher widget."
	@priority = "3"
	test ViewWidgetTemplateBasedOnScriptFileAppliedToRSSPublisher {
		property testray.component.names = "Content and Application Templates,RSS";

		task ("Add a RSS Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "RSS Publisher");
		}

		task ("Add a RSS Feed") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			RSSPortlet.addFeed(
				feedRowIndexNumber = "0",
				feedTitle = "Technology",
				feedType = "file",
				feedUrlLink = "Technology.xml");
		}

		task ("Add a widget template based on script file for RSS Publisher") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_rss_navigation.ftl",
				adtType = "RSS Publisher");
		}

		task ("Select the widget template") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			ApplicationDisplayTemplates.selectPortletADT(templateName = "RSS Publisher Test ADT");
		}

		task ("View the widget template applied to RSS Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			RSSPortlet.viewNavigationDisplayFeedTitle(
				feedTitle = "Technology",
				navigationNullADT = "true");
		}
	}

	@description = "This is a use case for LPS-71944."
	@priority = "5"
	test ViewWidgetTemplateEmbeddedWidgetAppliedToAssetPublisher {
		property test.name.skip.portal.instance = "ApplicationDisplayTemplatesUseCase#ADTChangeTemplatePortletPreferencesMethodContracts";
		property testray.component.names = "Asset Publisher,Content and Application Templates";

		task ("Execute reindex all search indexes") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Search");

			SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");
		}

		task ("Edit Rich Summary widget template") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "global");

			ApplicationDisplayTemplates.searchGlobalADT(templateName = "Rich Summary");

			ApplicationDisplayTemplates.gotoWidgetTemplatesEllipsisItem(
				item = "Edit",
				widgetTemplateName = "Rich Summary");

			var script = '''
	<@liferay_portlet["runtime"]
		defaultPreferences="${freeMarkerPortletPreferences}"
		instanceId="whateverV1"
		portletProviderAction=portletProviderAction.VIEW
		portletProviderClassName="com.liferay.portal.kernel.servlet.taglib.ui.BreadcrumbEntry"/>
					''';

			ApplicationDisplayTemplates.editADTScript(adtScript = "${script}");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "Asset Publisher");
		}

		task ("Select the Rich Summary widget template in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			Portlet.gotoPortletOptions(
				portletName = "Asset Publisher",
				portletOption = "Configuration");

			AssetPublisherPortlet.configureDisplayTemplatePG(displayTemplate = "Rich Summary");
		}

		task ("View the widget template applied to Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			AssertElementPresent(
				key_portletName = "Breadcrumb",
				locator1 = "Portlet#TITLE");

			AssertConsoleTextNotPresent(value1 = "UnexpectedCharException");
		}
	}

	@description = "View the widget template with corrupt script applied to RSS Publisher widget."
	@priority = "3"
	test ViewWidgetTemplateWithCorruptScriptAppliedToRSSPublisher {
		property testray.component.names = "Content and Application Templates,RSS";

		task ("Add a RSS Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ADT Test Page",
				widgetName = "RSS Publisher");
		}

		task ("Add a RSS Feed") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			RSSPortlet.addFeed(
				feedRowIndexNumber = "0",
				feedTitle = "Latimes &gt; Technology News",
				feedType = "file",
				feedUrlLink = "rss2.0.xml");
		}

		task ("Add a widget template for RSS Publisher") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_rss_navigation_corrupt.ftl",
				adtType = "RSS Publisher");
		}

		task ("Select the widget template in RSS Publisher") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			ApplicationDisplayTemplates.selectPortletADT(templateName = "RSS Publisher Test ADT");
		}

		task ("View the widget template with corrupt script applied to RSS Publisher widget") {
			Navigator.gotoSitePage(
				pageName = "ADT Test Page",
				siteName = "Test Site Name");

			RSSPortlet.viewCorruptScript();
		}
	}

}