@component-name = "portal-upgrades"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Upgrades WEM";

	setUp {
		SignIn.signIn();

		var portalURL = PropsUtil.get("portal.url");

		AssertLocation(value1 = "${portalURL}/web/guest?SM_USER=test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");
	}

	@description = "This is a use case for LPS-130223. The user can edit a inline text of an OOTB Card fragment after Upgrade."
	@priority = "4"
	test CanEditInlineTextOfAnOOTBCardFragmentAfterUpgrade730 {
		property data.archive.type = "data-archive-card-fragment";
		property database.types = "mariadb,mysql,postgresql";
		property portal.version = "7.3.0";

		Upgrade.viewEditableCardFragment();
	}

	@description = "This is a use case for LPS-130223. The user can edit a inline text of an OOTB Card fragment after Upgrade."
	@priority = "4"
	test CanEditInlineTextOfAnOOTBCardFragmentAfterUpgrade73101 {
		property data.archive.type = "data-archive-card-fragment";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.version = "7.3.10.1";

		Upgrade.viewEditableCardFragment();
	}

	@description = "This is a use case for LPS-120693."
	@priority = "3"
	test ConfigureContainerStylesAfterUpgrade721 {
		property data.archive.type = "data-archive-section-with-fragments";
		property database.types = "mariadb,mysql,postgresql";
		property portal.version = "7.2.1";

		task ("View fragments shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "card",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Card Title Example");
		}

		task ("View the outer Container styles in edit mode") {
			ContentPages.clickPencil();

			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				position = "1");
		}

		task ("Configure the outer Container to Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Center",
				contentDisplay = "Flex Row",
				justifyContent = "Center",
				panel = "Styles");
		}

		task ("View the outer Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "center",
				containerWidth = "Fluid",
				contentDisplay = "row",
				justifyContent = "center",
				position = "1");
		}

		task ("Configure the outer Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "End",
				contentDisplay = "Flex Column",
				justifyContent = "Between",
				panel = "Styles");
		}

		task ("View the outer Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "end",
				containerWidth = "Fluid",
				contentDisplay = "column",
				justifyContent = "between",
				position = "1");
		}

		task ("View the inner Container styles in edit mode") {
			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fixed Width",
				position = "2");
		}

		task ("Configure the inner Container to Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Start",
				contentDisplay = "Flex Row",
				justifyContent = "End",
				panel = "Styles",
				position = "2");
		}

		task ("View the inner Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "start",
				containerWidth = "Fixed Width",
				contentDisplay = "row",
				justifyContent = "end",
				position = "2");
		}

		task ("Configure the inner Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "Baseline",
				contentDisplay = "Flex Column",
				justifyContent = "Around",
				panel = "Styles",
				position = "2");
		}

		task ("View the inner Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "baseline",
				containerWidth = "Fixed Width",
				contentDisplay = "column",
				justifyContent = "around",
				position = "2");
		}
	}

	@description = "This is a use case for LPS-120693."
	@priority = "3"
	test ConfigureContainerStylesAfterUpgrade735 {
		property data.archive.type = "data-archive-container-with-fragments";
		property database.types = "mariadb,mysql,postgresql";
		property portal.version = "7.3.5";

		task ("View fragments shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "card",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Card Title Example");
		}

		task ("View the Container styles in edit mode") {
			ContentPages.clickPencil();

			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				position = "1");
		}

		task ("Configure the Container to Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Center",
				contentDisplay = "Flex Row",
				justifyContent = "Center",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "center",
				containerWidth = "Fluid",
				contentDisplay = "row",
				justifyContent = "center",
				position = "1");
		}

		task ("Configure the Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "End",
				contentDisplay = "Flex Column",
				justifyContent = "Between",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "end",
				containerWidth = "Fluid",
				contentDisplay = "column",
				justifyContent = "between",
				position = "1");
		}

		task ("Configure the Container to Fixed Width and Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Start",
				containerWidth = "Fixed Width",
				contentDisplay = "Flex Row",
				justifyContent = "End",
				panel = "Styles");
		}

		task ("View the inner Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "start",
				containerWidth = "Fixed Width",
				contentDisplay = "row",
				justifyContent = "end",
				position = "1");
		}

		task ("Configure the Fixed Width Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "Baseline",
				contentDisplay = "Flex Column",
				justifyContent = "Around",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "baseline",
				containerWidth = "Fixed Width",
				contentDisplay = "column",
				justifyContent = "around",
				position = "1");
		}
	}

	@description = "This is a use case for LPS-120693."
	@priority = "3"
	test ConfigureContainerStylesAfterUpgrade72104 {
		property data.archive.type = "data-archive-section-with-fragments";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.version = "7.2.10.4";

		task ("View fragments shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "card",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Card Title Example");
		}

		task ("View the outer Container styles in edit mode") {
			ContentPages.clickPencil();

			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				position = "1");
		}

		task ("Configure the outer Container to Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Center",
				contentDisplay = "Flex Row",
				justifyContent = "Center",
				panel = "Styles");
		}

		task ("View the outer Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "center",
				containerWidth = "Fluid",
				contentDisplay = "row",
				justifyContent = "center",
				position = "1");
		}

		task ("Configure the outer Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "End",
				contentDisplay = "Flex Column",
				justifyContent = "Between",
				panel = "Styles");
		}

		task ("View the outer Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "end",
				containerWidth = "Fluid",
				contentDisplay = "column",
				justifyContent = "between",
				position = "1");
		}

		task ("View the inner Container styles in edit mode") {
			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fixed Width",
				position = "2");
		}

		task ("Configure the inner Container to Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Start",
				contentDisplay = "Flex Row",
				justifyContent = "End",
				panel = "Styles",
				position = "2");
		}

		task ("View the inner Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "start",
				containerWidth = "Fixed Width",
				contentDisplay = "row",
				justifyContent = "end",
				position = "2");
		}

		task ("Configure the inner Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "Baseline",
				contentDisplay = "Flex Column",
				justifyContent = "Around",
				panel = "Styles",
				position = "2");
		}

		task ("View the inner Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "baseline",
				containerWidth = "Fixed Width",
				contentDisplay = "column",
				justifyContent = "around",
				position = "2");
		}
	}

	@description = "This is a use case for LPS-120693."
	@priority = "3"
	test ConfigureContainerStylesAfterUpgrade73101 {
		property data.archive.type = "data-archive-container-with-fragments";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.version = "7.3.10.1";

		task ("View fragments shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Heading Example");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "card",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Card Title Example");
		}

		task ("View the Container styles in edit mode") {
			ContentPages.clickPencil();

			AssertElementNotPresent(
				key_contentDisplay = "",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");

			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				position = "1");
		}

		task ("Configure the Container to Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Center",
				contentDisplay = "Flex Row",
				justifyContent = "Center",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "center",
				containerWidth = "Fluid",
				contentDisplay = "row",
				justifyContent = "center",
				position = "1");
		}

		task ("Configure the Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "End",
				contentDisplay = "Flex Column",
				justifyContent = "Between",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "end",
				containerWidth = "Fluid",
				contentDisplay = "column",
				justifyContent = "between",
				position = "1");
		}

		task ("Configure the Container to Fixed Width and Flex Row") {
			PageEditor.editLayoutContainer(
				alignItems = "Start",
				containerWidth = "Fixed Width",
				contentDisplay = "Flex Row",
				justifyContent = "End",
				panel = "Styles");
		}

		task ("View the inner Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "start",
				containerWidth = "Fixed Width",
				contentDisplay = "row",
				justifyContent = "end",
				position = "1");
		}

		task ("Configure the Fixed Width Container to Flex Column") {
			PageEditor.editLayoutContainer(
				alignItems = "Baseline",
				contentDisplay = "Flex Column",
				justifyContent = "Around",
				panel = "Styles");
		}

		task ("View the Container styles") {
			PageEditor.viewContainerStyle(
				alignItems = "baseline",
				containerWidth = "Fixed Width",
				contentDisplay = "column",
				justifyContent = "around",
				position = "1");
		}
	}

	@description = "This is a basic test for modern site building components such as Content Pages, Page Templates, Fragments, Display Page Templates, and Navigation Menus. After the upgrade is complete, all of those elements should still be present, and a user should still be able to perform basic modern site building functions."
	@priority = "5"
	test ConfigurePageEditorAfterUpgrade721 {
		property data.archive.type = "data-archive-page-editor";
		property database.types = "mariadb,mysql,postgresql";
		property portal.version = "7.2.1";

		Upgrade.viewDefaultPage();

		Upgrade.configurePageEditor();
	}

	@priority = "5"
	test ConfigurePageEditorAfterUpgrade72101 {
		property data.archive.type = "data-archive-page-editor";
		property database.types = "db2,mariadb,mysql,oracle,postgresql";
		property portal.version = "7.2.10.1";

		Upgrade.viewDefaultPage();

		Upgrade.configurePageEditor();
	}

	@priority = "5"
	test ViewContributedFragmentStyleAfterUpgrade721 {
		property data.archive.type = "data-archive-contributed-fragments";
		property database.types = "mariadb,mysql,postgresql";
		property portal.version = "7.2.1";

		Upgrade.viewContributedFragmentStyle();
	}

	@priority = "5"
	test ViewContributedFragmentStyleAfterUpgrade72101 {
		property data.archive.type = "data-archive-contributed-fragments";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.version = "7.2.10.1";

		Upgrade.viewContributedFragmentStyle();
	}

	@description = "This is a use case for LPS-123098 and LPS-135373. View existing Banner Center fragment on page after upgrade from 7.2."
	@priority = "4"
	test ViewEditedInlineContentOfBannerCenterAfterUpgrade721 {
		property data.archive.type = "data-archive-banner-center";
		property database.types = "mariadb,mysql,postgresql";
		property portal.version = "7.2.1";

		task ("View the edited inline content at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Guest");

			for (var text : list "Edited Banner Title,Edited Banner Subtitle,Edited Banner Link") {
				AssertVisible(locator1 = "//div[contains(@class,'banner')]//*[normalize-space(text())='${text}']");
			}

			AssertVisible(locator1 = "//div[contains(@class,'banner')][contains(@style,'Document_1.jpg')]");
		}

		task ("View the edited inline content at edit mode") {
			ContentPages.clickPencil();

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Edited Banner Title",
				fragmentName = "Element",
				id = "01-title");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Edited Banner Subtitle",
				fragmentName = "Element",
				id = "02-subtitle");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Edited Banner Link",
				fragmentName = "Element",
				id = "03-link");

			AssertVisible(
				key_fragmentName = "Element",
				key_imageName = "Document_1.jpg",
				locator1 = "Fragment#FRAGMENT_CONTENT_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a use case for LPS-135373. View existing Banner Center fragment on page after upgrade from 7.3."
	@priority = "4"
	test ViewEditedInlineContentOfBannerCenterAfterUpgrade735 {
		property data.archive.type = "data-archive-banner-center";
		property database.types = "mariadb,mysql,postgresql";
		property portal.version = "7.3.5";

		task ("View the edited inline content at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var text : list "Edited Banner Title,Edited Banner Subtitle,Edited Banner Link") {
				AssertVisible(locator1 = "//div[contains(@class,'banner')]//*[normalize-space(text())='${text}']");
			}

			AssertVisible(locator1 = "//div[contains(@class,'banner')][contains(@style,'Document_1.jpg')]");
		}

		task ("View the edited inline content at edit mode") {
			ContentPages.clickPencil();

			PageEditor.viewFragmentEditableText(
				editableText = "Edited Banner Title",
				fragmentName = "Element",
				id = "01-title");

			PageEditor.viewFragmentEditableText(
				editableText = "Edited Banner Subtitle",
				fragmentName = "Element",
				id = "02-subtitle");

			PageEditor.viewFragmentEditableText(
				editableText = "Edited Banner Link",
				fragmentName = "Element",
				id = "03-link");

			AssertVisible(
				key_fragmentName = "Element",
				key_imageName = "Document_1.jpg",
				locator1 = "Fragment#FRAGMENT_CONTENT_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a use case for LPS-123098 and LPS-135373. View existing Banner Center fragment on page after upgrade from 7.2."
	@priority = "4"
	test ViewEditedInlineContentOfBannerCenterAfterUpgrade72101 {
		property data.archive.type = "data-archive-banner-center";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.version = "7.2.10.1";

		task ("View the edited inline content at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Guest");

			for (var text : list "Edited Banner Title,Edited Banner Subtitle,Edited Banner Link") {
				AssertVisible(locator1 = "//div[contains(@class,'banner')]//*[normalize-space(text())='${text}']");
			}

			AssertVisible(locator1 = "//div[contains(@class,'banner')][contains(@style,'Document_1.jpg')]");
		}

		task ("View the edited inline content at edit mode") {
			ContentPages.clickPencil();

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Edited Banner Title",
				fragmentName = "Element",
				id = "01-title");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Edited Banner Subtitle",
				fragmentName = "Element",
				id = "02-subtitle");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Edited Banner Link",
				fragmentName = "Element",
				id = "03-link");

			AssertVisible(
				key_fragmentName = "Element",
				key_imageName = "Document_1.jpg",
				locator1 = "Fragment#FRAGMENT_CONTENT_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a use case for LPS-135373. View existing Banner Center fragment on page after upgrade from 7.3."
	@priority = "4"
	test ViewEditedInlineContentOfBannerCenterAfterUpgrade73101 {
		property data.archive.type = "data-archive-banner-center";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.version = "7.3.10.1";

		task ("View the edited inline content at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var text : list "Edited Banner Title,Edited Banner Subtitle,Edited Banner Link") {
				AssertVisible(locator1 = "//div[contains(@class,'banner')]//*[normalize-space(text())='${text}']");
			}

			AssertVisible(locator1 = "//div[contains(@class,'banner')][contains(@style,'Document_1.jpg')]");
		}

		task ("View the edited inline content at edit mode") {
			ContentPages.clickPencil();

			PageEditor.viewFragmentEditableText(
				editableText = "Edited Banner Title",
				fragmentName = "Element",
				id = "01-title");

			PageEditor.viewFragmentEditableText(
				editableText = "Edited Banner Subtitle",
				fragmentName = "Element",
				id = "02-subtitle");

			PageEditor.viewFragmentEditableText(
				editableText = "Edited Banner Link",
				fragmentName = "Element",
				id = "03-link");

			AssertVisible(
				key_fragmentName = "Element",
				key_imageName = "Document_1.jpg",
				locator1 = "Fragment#FRAGMENT_CONTENT_BACKGROUND_IMAGE");
		}
	}

}