@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "quarantine";
	property remote.elasticsearch.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();

			BlogsEntry.tearDownCP();
		}
	}

	@priority = "5"
	test StartupJDBCPING {
		property app.server.types = "tomcat";
		property cluster.jdbc.ping = "true";
		property database.types = "mysql";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ClusteringConfigs#StartupJDBCPING";

		Clustering.viewClusterStatusInConsole();

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "JDBC_PING",
			nodePort = "8080");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "JDBC_PING",
			nodePort = "9080");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		echo("Successfully logged in to both nodes on JDBC_PING");
	}

}