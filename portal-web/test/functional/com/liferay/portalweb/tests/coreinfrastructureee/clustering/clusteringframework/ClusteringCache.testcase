@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "4"
	test DoNotReplicatePut {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePuts=false";
		property test.name.skip.portal.instance = "ClusteringCache#DoNotReplicatePut";

		Clustering.viewClusterStatusInConsole();

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-update.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value.update");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-remove.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");
	}

	@priority = "4"
	test ReplicateByCopy {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePutsViaCopy=true";
		property test.name.skip.portal.instance = "ClusteringCache#ReplicateByCopy";

		Clustering.viewClusterStatusInConsole();

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-remove.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");
	}

	@priority = "4"
	test ReplicateByRemove {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePutsViaCopy=false";
		property test.name.skip.portal.instance = "ClusteringCache#ReplicateByRemove";

		Clustering.viewClusterStatusInConsole();

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-remove-all.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Cleared test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Cleared test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");
	}

}