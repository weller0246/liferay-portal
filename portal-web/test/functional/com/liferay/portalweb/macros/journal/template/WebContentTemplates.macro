definition {

	@summary = "Helper function to add fields '${templateFieldNames}' to the template"
	macro _addFields {
		if (isSet(templateFieldNames)) {
			Navigator.gotoSidebarTab(tabName = "Elements");

			for (var fieldName : list "${templateFieldNames}") {
				var key_panelTitle = "Fields";
				var key_variableName = "${fieldName}";

				AssertClick(
					locator1 = "DDMEditTemplate#WEB_CONTENT_SCRIPT_VARIABLE",
					value1 = "${fieldName}");
			}
		}
	}

	macro _addGeneralVariables {
		if (isSet(generalVariables)) {
			Navigator.gotoSidebarTab(tabName = "Elements");

			for (var generalVariable : list "${generalVariables}") {
				var key_panelTitle = "General Variables";
				var key_variableName = "${generalVariable}";

				AssertClick(
					locator1 = "DDMEditTemplate#WEB_CONTENT_SCRIPT_VARIABLE",
					value1 = "${generalVariable}");
			}
		}
	}

	@summary = "Helper function to add description '${description}' to the template"
	macro _inputDescription {
		if (isSet(templateDescription)) {
			Navigator.gotoSidebarTab(tabName = "Properties");

			PortletEntry.inputDescription(description = "${templateDescription}");
		}
	}

	@summary = "Helper function to link structure '${structureName}' to the template"
	macro _inputStructure {
		if (isSet(structureName)) {
			Navigator.gotoSidebarTab(tabName = "Properties");

			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(
				buttonId = "selectDDMStructure",
				locator1 = "Button#BUTTON_ID");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			var key_ddlDataDefinitionName = "${structureName}";

			AssertElementPresent(locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME_LINK");

			var browserType = PropsUtil.get("browser.type");

			if ("${browserType}" == "safari") {
				Click.javaScriptClick(locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME_LINK");
			}
			else {
				AssertClick.assertTextClickAt(
					locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME_LINK",
					value1 = "${structureName}");
			}

			SelectFrameTop();
		}
	}

	@summary = "Helper function to add a script to a template via file"
	macro _inputTemplateFile {
		if (isSet(templateFile)) {
			Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			var testBaseDirName = PropsUtil.get("test.base.dir.name");
			var testDependenciesDirName = PropsUtil.get("test.dependencies.dir.name");
			var filePath = "${testBaseDirName}tests/enduser/wem/journal/${testDependenciesDirName}/${templateFile}";
			var filePath = FileUtil.fixFilePath("${filePath}");

			UploadFile(
				inputFieldId = "importScript",
				locator1 = "TextInput#INPUT_ID",
				value1 = "${filePath}");
		}
	}

	@summary = "Click on the add button to add a template named '${templateName}' for structure '${structureName}', input most basic fields and then save the template"
	macro addCP {
		LexiconEntry.gotoAdd();

		WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

		WebContentTemplates.inputTemplateAddScreenFields(
			generalVariables = "${generalVariables}",
			imageSourceURL = "${imageSourceURL}",
			structureName = "${structureName}",
			templateDescription = "${templateDescription}",
			templateFieldNames = "${templateFieldNames}",
			templateFile = "${templateFile}",
			templateLanguage = "${templateLanguage}",
			templateName = "${templateName}",
			templateScript = "${templateScript}");

		DDLDataDefinition.save(publicationsEnabled = "${publicationsEnabled}");
	}

	@summary = "Attempt to add a blank template"
	macro addNullCP {
		LexiconEntry.gotoAdd();

		WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

		AssertElementNotPresent(locator1 = "TextInput#REQUIRED_ALERT");

		Button.clickSave();

		AssertElementPresent(locator1 = "TextInput#REQUIRED_ALERT");

		SelectFrame(value1 = "relative=top");
	}

	@summary = "Give the roles '${roles}' permissions to view the template '${templateName}'"
	macro addRoleViewPermissions {
		WebContentTemplates.gotoTemplateEllipsisItem(
			item = "Permissions",
			templateName = "${templateName}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "${roles}");

		SelectFrameTop();
	}

	macro copyCP {
		WebContentTemplates.gotoTemplateEllipsisItem(
			item = "Copy",
			templateName = "${templateName}");

		if (isSet(templateCopyName)) {
			PortletEntry.inputName(name = "${templateCopyName}");
		}

		if (isSet(description)) {
			PortletEntry.inputDescription(description = "${description}");
		}

		Click(locator1 = "Button#COPY");

		Alert.viewSuccessMessage();
	}

	@summary = "Attempt to delete the template '${templateName}'"
	macro deleteCP {
		var key_ddlTemplateName = "${templateName}";

		Click(
			key_card = "${templateName}",
			locator1 = "Card#CARD_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		if ("${webContentHasReference}" == "true") {
			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_1",
				value1 = "The template cannot be deleted because it is required by one or more template links.");
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	@summary = "Click on '${templateName}' ellipsis > '${item}'"
	macro gotoTemplateEllipsisItem {
		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		if ("${item}" == "Permissions") {
			WaitForLiferayEvent.initializeLiferayEventLog();
		}

		LexiconCard.clickEllipsisItem(
			card = "${templateName}",
			item = "${item}");
	}

	@summary = "Type '${templateScript}' into the template ACE editor field"
	macro inputScript {
		if (isSet(templateScript)) {
			Type.typeCodeMirrorEditorNoError(
				locator1 = "DDMEditTemplate#CODE_MIRROR_EDITOR",
				value1 = "${templateScript}");
		}
	}

	@summary = "Input most basic fields inside a template"
	macro inputTemplateAddScreenFields {
		if (isSet(templateName)) {
			PortletEntry.inputName(name = "${templateName}");
		}

		if (isSet(structureName)) {
			WebContentTemplates._inputStructure(structureName = "${structureName}");
		}

		WebContentTemplates._inputDescription(templateDescription = "${templateDescription}");

		if (isSet(imageSourceURL)) {
			Navigator.gotoSidebarTab(tabName = "Properties");

			WebContent.addFeaturedImageFromURL(imageSourceURL = "${imageSourceURL}");
		}

		WebContentTemplates.inputScript(templateScript = "${templateScript}");

		if ("${templateLanguage}" == "xsl") {
			WebContentTemplates._inputTemplateFile(templateFile = "${templateFile}");
		}
		else {
			WebContentTemplates._addFields(templateFieldNames = "${templateFieldNames}");

			WebContentTemplates._addGeneralVariables(generalVariables = "${generalVariables}");

			WebContentTemplates._inputTemplateFile(templateFile = "${templateFile}");
		}
	}

	@summary = "Add localization for the template name"
	macro localizeTemplateName {
		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		var key_ddlTemplateName = "${templateName}";

		WebContentNavigator.gotoViewTemplate(templateName = "${templateName}");

		WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "${templateName}");

		PortletEntry.changeLocale(locale = "${locale}");

		Type.clickAtType(
			locator1 = "TextInput#NAME",
			value1 = "${localization1Name}");

		if (isSet(locale2)) {
			PortletEntry.changeLocale(locale = "${locale2}");

			Type.clickAtType(
				locator1 = "TextInput#NAME",
				value1 = "${localization2Name}");
		}
	}

	@summary = "Modify template"
	macro modifyTemplate {
		WebContentTemplates.gotoTemplateEllipsisItem(
			item = "Edit",
			templateName = "${templatePreviousName}");

		WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

		WebContentTemplates.inputTemplateAddScreenFields(
			imageSourceURL = "${imageSourceURL}",
			templateDescription = "${templateDescription}",
			templateFieldNames = "${templateFieldNames}",
			templateFile = "${templateFile}",
			templateLanguage = "${templateLanguage}",
			templateName = "${templateName}",
			templateScript = "${templateScript}");

		DDLDataDefinition.save(publicationsEnabled = "${publicationsEnabled}");
	}

	@summary = "Open Web Content Templates admin page for the site '${siteURLKey}'"
	macro openWebContentTemplatesAdmin {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_journal_web_portlet_JournalPortlet&_com_liferay_journal_web_portlet_JournalPortlet_mvcPath=%2Fview_ddm_templates.jsp");
	}

	@summary = "Teardown templates in the guest site"
	macro tearDownCP {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Web Content");

		Navigator.gotoNavItem(navItem = "Templates");

		Search.searchCP(searchTerm = "2");

		while (IsElementNotPresent(locator1 = "Message#EMPTY_INFO")) {
			PortletEntry.selectAll();

			ClickNoError(locator1 = "Icon#DELETE");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}

		Search.searchCP(searchTerm = "Template");

		while (IsElementNotPresent(locator1 = "Message#EMPTY_INFO")) {
			PortletEntry.selectAll();

			ClickNoError(locator1 = "Icon#DELETE");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}

		Portlet.viewEmptyMessage(message = "There are no results.");
	}

	@summary = "Assert that the cards entry for template '${templateName}' is present"
	macro viewCardsEntryCP {
		LexiconCard.viewCardTitle(card = "${templateName}");

		if (isSet(templateSmallImage)) {
			AssertVisible(
				locator1 = "DDMSelectTemplate#TEMPLATE_CARDS_SMALL_IMAGE",
				value1 = "${templateSmallImage}");
		}
	}

	@summary = "Assert that certain template attributes are present for the template '${templateName}'"
	macro viewCP {
		var key_ddlStructureName = "${structureName}";
		var key_ddlTemplateDescription = "${templateDescription}";
		var key_ddlTemplateName = "${templateName}";

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		AssertVisible(
			key_tableEntry = "${templateName}",
			locator1 = "LexiconTable#TABLE_ENTRY");

		AssertTextEquals(
			key_columnName = "description",
			key_tableEntry = "${templateName}",
			locator1 = "LexiconTable#TABLE_ENTRY_INFO",
			value1 = "${templateDescription}");

		if (isSet(structureName)) {
			AssertTextEquals(
				locator1 = "DDMSelectTemplate#TEMPLATE_TABLE_MODE",
				value1 = "${structureName}");
		}

		if ("${templateLanguage}" == "vm") {
			AssertTextEquals(
				locator1 = "DDMSelectTemplate#TEMPLATE_TABLE_LANGUAGE",
				value1 = "Velocity");
		}
		else if ("${templateLanguage}" == "xsl") {
			AssertTextEquals(
				locator1 = "DDMSelectTemplate#TEMPLATE_TABLE_LANGUAGE",
				value1 = "Extensible Stylesheet Language");
		}
		else {
			AssertTextEquals(
				locator1 = "DDMSelectTemplate#TEMPLATE_TABLE_LANGUAGE",
				value1 = "FreeMarker");
		}

		if ("${userEditPermission}" != "noEditPermission") {
			WebContentNavigator.gotoViewTemplate(templateName = "${templateName}");

			WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

			AssertTextEquals(
				locator1 = "TextInput#NAME",
				value1 = "${templateName}");

			Navigator.gotoSidebarTab(tabName = "Properties");

			AssertTextEquals(
				locator1 = "TextArea#DESCRIPTION",
				value1 = "${templateDescription}");

			if (isSet(structureName)) {
				AssertTextEquals(
					key_text = "Structure",
					locator1 = "TextInput#ANY",
					value1 = "${structureName}");
			}

			if ("${templateLanguage}" == "vm") {
				AssertTextEquals.assertPartialText(
					locator1 = "DDMEditTemplate#DETAILS_LANGUAGE",
					value1 = "Velocity (.vm)");
			}
			else if ("${templateLanguage}" == "xsl") {
				AssertTextEquals.assertPartialText(
					locator1 = "DDMEditTemplate#DETAILS_LANGUAGE",
					value1 = "Extensible Stylesheet Language (.xsl)");
			}
			else {
				AssertTextEquals.assertPartialText(
					locator1 = "DDMEditTemplate#DETAILS_LANGUAGE",
					value1 = "FreeMarker (.ftl)");
			}

			if (isSet(templateScript)) {
				AssertTextEquals.assertPartialText(
					locator1 = "DDMEditTemplate#CODE_MIRROR_EDITOR_CONTENT",
					value1 = "${templateScript}");
			}
		}
	}

	@summary = "Assert that the table entry for template '${templateName}' is present"
	macro viewTableEntryCP {
		var key_ddlTemplateName = "${templateName}";

		AssertVisible(
			key_tableEntry = "${templateName}",
			locator1 = "LexiconTable#TABLE_ENTRY");

		if (isSet(templateSmallImage)) {
			AssertVisible(
				locator1 = "DDMSelectTemplate#TEMPLATE_TABLE_DESCRIPTION_SMALL_IMAGE",
				value1 = "${templateSmallImage}");
		}
		else {
			AssertTextEquals(
				key_columnName = "description",
				key_tableEntry = "${templateName}",
				locator1 = "LexiconTable#TABLE_ENTRY_INFO",
				value1 = "${templateDescription}");
		}
	}

}