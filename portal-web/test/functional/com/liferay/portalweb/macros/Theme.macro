definition {

	macro changeCurrentTheme {
		WaitForLiferayEvent.initializeLiferayEventLog();

		Click(locator1 = "SitePagesEditPage#CHANGE_CURRENT_THEME_BUTTON");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		LexiconCard.viewCardTitle(card = "${themeName}");

		LexiconCard.clickCardTitle(card = "${themeName}");

		SelectFrameTop(value1 = "relative=top");
	}

	macro configureLookAndFeelCustomCSS {
		Type(
			key_text = "regularCss",
			locator1 = "TextArea#ANY",
			value1 = "${cssText}");
	}

	macro configureLookAndFeelShowFooter {
		if ("${showFooter}" == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show Footer",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${showFooter}" == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Footer",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	macro configureLookAndFeelShowHeader {
		if ("${showHeader}" == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show Header",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${showHeader}" == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Header",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	macro configureLookAndFeelShowHeaderSearch {
		if ("${showHeaderSearch}" == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show Header Search",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${showHeaderSearch}" == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Header Search",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	macro configureLookAndFeelShowMaxMinAppLinks {
		if ("${showMaxMinAppLinks}" == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show Maximize/Minimize Application Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${showMaxMinAppLinks}" == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Maximize/Minimize Application Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	macro configureLookAndFeelSpecificLook {
		Click(locator1 = "Radio#SPECIFIC_LOOK");
	}

	macro configureLookAndFeelWrapWidgetPageContent {
		if ("${wrapWidgetPageContent}" == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Wrap Widget Page Content",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${wrapWidgetPageContent}" == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Wrap Widget Page Content",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	macro deployThemeWar {
		AntCommand(
			locator1 = "build-test.xml",
			value1 = "deploy-dependency-war -Dliferay.dependency.war=${themeName}.war");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "copy-log-file");

		var projectDir = PropsUtil.get("project.dir");
		var logContent = FileUtil.read("${projectDir}/log");

		while (!(contains("${logContent}", "STARTED ${themeName}"))) {
			Pause(locator1 = "3000");

			AntCommand(
				locator1 = "build-test.xml",
				value1 = "copy-log-file");

			var logContent = FileUtil.read("${projectDir}/log");
		}
	}

	macro viewClassicThemeBackgroundColor {
		AssertCssValue(
			locator1 = "//body",
			locator2 = "background-color",
			value1 = "rgba(255, 255, 255, 1)");

		takeScreenshot();
	}

	macro viewMaxPortletOption {
		AssertTextEquals(
			key_menuItem = "Maximize",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Maximize");
	}

	macro viewMinPortlet {
		AssertClick(
			key_menuItem = "Minimize",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Minimize");
	}

	macro viewRestorePortlet {
		Click(
			key_menuItem = "Restore",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Restore");

		AssertTextPresent(
			locator1 = "Portlet#PORTLET_CONTENT",
			value1 = "Embedded alerts are thought to be used inside context as forms");

		// Refresh step is a workaround for LPS-91762

		Refresh();
	}

	macro viewTestThemeBackgroundColor {
		AssertCssValue(
			locator1 = "//body",
			locator2 = "background-color",
			value1 = "rgba(255, 165, 0, 1)");

		takeScreenshot();
	}

}