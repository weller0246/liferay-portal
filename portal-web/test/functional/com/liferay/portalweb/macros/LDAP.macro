definition {

	@description = "Add Apache DS server and test the connection between it and Liferay DXP"
	macro addLDAPServerAndTestConnection {
		PortalSettings.addLDAPServer(ldapServerName = "${ldapServerName}");

		PortalSettings.editLDAPServer(ldapServerName = "${ldapServerName}");

		PortalSettings.testLDAPConnection();
	}

	@description = "Assert no pagination display in the LDAP connection page"
	macro assertNoPagination {
		PortalSettings.editLDAPServer(ldapServerName = "${ldapServerName}");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_USERS_BUTTON",
			value1 = "Test LDAP Users");

		AssertElementNotPresent(locator1 = "Pagination#PAGE_ITERATOR");

		Click(
			key_modalTitle = "LDAP",
			locator1 = "Button#CLOSE_MODAL");
	}

	@description = "Enable LDAP debug logs"
	macro enableLDAPDebugLogs {
		ServerAdministration.openServerAdmin(baseURL = "${baseURL}");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.ldap.internal.DefaultPortalLDAP");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.ldap.internal.authenticator.LDAPAuth");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.ldap.internal.exportimport");
	}

	@description = "Enable various LDAP related settings"
	macro enableLDAPSettings {
		PortalSettings.configureLDAPSetting(enableSettingList = "${enableSettingList}");

		PortalSettings.viewEnabledLDAPSetting(enableSettingList = "${enableSettingList}");
	}

	@description = "Import an LDIF file on LDAP then trigger the import manually with a groovy script"
	macro importLDIFOnLDAPAndTriggerSync {
		LDAP.updateLDAPDatabaseWithLDIFFile(ldifName = "${ldifName}");

		if (!(isSet(nodePort))) {
			var nodePort = "8080";
		}

		Clustering.runGroovyScript(
			nodePort = "${nodePort}",
			scriptFile = "groovy-script-invoke-ldap-user-import-on-master.groovy");

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "Install openldap util to be able to use ldap commands on command line"
	macro installLDAPCommandUtil {
		AntCommand(
			locator1 = "build-test-apacheds.xml",
			value1 = "get-apacheds-commands");
	}

	@description = "List the contents of the LDAP database"
	macro searchLDAPDatabaseForUsersAndGroups {
		AntCommand(
			locator1 = "build-test-apacheds.xml",
			value1 = "search-apacheds");
	}

	macro setGeneralMethod {
		Variables.assertDefined(parameterList = "${generalMethod}");

		PortalSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		Select(
			locator1 = "Select#SELECT_ID",
			selectFieldId = "method",
			value1 = "${generalMethod}");

		PortletEntry.save();
	}

	macro setPasswordEncryption {
		Variables.assertDefined(parameterList = "${passwordEncryption}");

		PortalSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		Select(
			locator1 = "Select#SELECT_ID",
			selectFieldId = "passwordEncryptionAlgorithm",
			value1 = "${passwordEncryption}");

		PortletEntry.save();
	}

	@description = "Update LDAP database through LDIF file"
	macro updateLDAPDatabaseWithLDIFFile {
		AntCommand(
			locator1 = "build-test-apacheds.xml",
			value1 = "update-apacheds -DldifName=${ldifName}");
	}

	@description = "Verify that the group is imported on localhost after LDAP sync"
	macro verifyLDAPUserGroupIsImported {
		UserGroup.openUserGroupsAdmin();

		AssertElementPresent(
			key_userGroupName = "${userGroupName}",
			locator1 = "UserGroups#USER_GROUP_TABLE_CHECKBOX");
	}

	@description = "Verify that the user is removed from group on localhost after LDAP sync"
	macro verifyLDAPUserIsRemovedFromGroup {
		UserGroup.openUserGroupsAdmin();

		UserGroup.viewRemoveMemberCP(
			userFirstName = "${userFirstName}",
			userGroupName = "${userGroupName}");
	}

	@description = "Verify that the user's first name has changed in the LDAP database after sync"
	macro verifyUserFirstNameIsChangedInLDAP {
		Variables.assertDefined(parameterList = "${userFirstName}");

		LDAP.searchLDAPDatabaseForUsersAndGroups();

		var projectDir = PropsUtil.get("project.dir");

		var result = FileUtil.read("${projectDir}/LDAPSearchResult.txt");

		if (!(contains("${result}", "${userFirstName}"))) {
			echo("${result}");

			fail("Failed to find LDAP contact in LDAP database");
		}
		else {
			echo("Contact found in LDAP database.");
		}
	}

	@description = "Verify that the user is imported on localhost after LDAP sync, after a specified interval time."
	macro verifyUserImportAfterImportIntervalTime {
		if (!(isSet(intervalTime))) {
			var intervalTime = "60000";
		}

		// Wait for the amount of the import interval time. Needed for LRQA-75138.

		Pause(locator1 = "${intervalTime}");

		User.openUsersAdmin();

		Search.searchCP(searchTerm = "${userScreenName}");
	}

	@description = "Verify that the user is imported on localhost after LDAP sync"
	macro verifyUserIsImported {
		User.openUsersAdmin();

		Search.searchCP(searchTerm = "${userScreenName}");

		AssertElementPresent(locator1 = "ContentRow#ENTRY_CONTENT_ROW_1");
	}

}