definition {

	@description = "Add Apache DS server and test the connection between it and Liferay DXP"
	macro addLDAPServerAndTestConnection {
		PortalSettings.addLDAPServer(ldapServerName = "${ldapServerName}");

		PortalSettings.editLDAPServer(ldapServerName = "${ldapServerName}");

		PortalSettings.testLDAPConnection();
	}

	@description = "Assert no pagination display in the LDAP connection page"
	macro assertNoPagination {
		PortalSettings.editLDAPServer(ldapServerName = "${ldapServerName}");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_USERS_BUTTON",
			value1 = "Test LDAP Users");

		AssertElementNotPresent(locator1 = "Pagination#PAGE_ITERATOR");

		Click(
			key_modalTitle = "LDAP",
			locator1 = "Button#CLOSE_MODAL");
	}

	@description = "Enable LDAP debug logs"
	macro enableLDAPDebugLogs {
		ServerAdministration.openServerAdmin(baseURL = "${baseURL}");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.ldap.internal.DefaultPortalLDAP");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.ldap.internal.authenticator.LDAPAuth");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.ldap.internal.exportimport");
	}

	@description = "Enable various LDAP related settings"
	macro enableLDAPSettings {
		PortalSettings.configureLDAPSetting(enableSettingList = "${enableSettingList}");

		PortalSettings.viewEnabledLDAPSetting(enableSettingList = "${enableSettingList}");
	}

	@description = "Update LDAP database through LDIF file"
	macro installLDAPCommandUtil {
		AntCommand(
			locator1 = "build-test-apacheds.xml",
			value1 = "get-apacheds-commands");
	}

	@description = "Update LDAP database through LDIF file"
	macro updateLDAPDatabaseWithLDIFFile {
		AntCommand(
			locator1 = "build-test-apacheds.xml",
			value1 = "update-apacheds -DldifName=${ldifName}");
	}

	@description = "Verify that the group is imported on localhost after LDAP sync"
	macro verifyLDAPUserGroupIsImported {
		UserGroup.openUserGroupsAdmin();

		AssertElementPresent(
			key_userGroupName = "${userGroupName}",
			locator1 = "UserGroups#USER_GROUP_TABLE_CHECKBOX");
	}

	@description = "Verify that the user is removed from group on localhost after LDAP sync"
	macro verifyLDAPUserIsRemovedFromGroup {
		UserGroup.openUserGroupsAdmin();

		UserGroup.viewRemoveMemberCP(
			userFirstName = "firstName2",
			userGroupName = "testgroup");
	}

}