definition {

	macro assertAutoTagPresent {
		var key_tagName = "${tagName}";

		AssertElementPresent(locator1 = "DocumentsAndMedia#TAG");
	}

	macro assertNoAutoTag {
		var key_tagName = "${tagName}";

		AssertElementNotPresent(locator1 = "DocumentsAndMedia#TAG");
	}

	macro disableAutoTagging {
		if ("${disableAutoTaggingFor}" == "System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Assets",
				configurationName = "Asset Auto Tagging",
				configurationScope = "System Scope");

			FormFields.disableCheckbox(fieldName = "enabled");
		}

		else if ("${disableAutoTaggingFor}" == "Instance Settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Assets",
				configurationName = "Asset Auto Tagging",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "enabled");
		}

		else if ("${disableAutoTaggingFor}" == "Site Settings") {
			AutoTagging.openToAutoTaggingSiteSettings(
				portlet = "Asset Auto Tagging",
				siteURLKey = "${siteURLKey}");

			Uncheck.uncheckToggleSwitch(locator1 = "Checkbox#ENABLE_AUTO_TAGGING");
		}

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}

		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
	}

	macro enableAutoTagging {
		if ("${enableAutoTaggingFor}" == "System Settings") {
			AutoTagging.openToAssetAutoTagging(configurationScope = "System Settings");

			FormFields.enableCheckbox(fieldName = "enabled");

			if (isSet(maximumNumberOfTags)) {
				SystemSettings.editTextSetting(
					settingName = "Maximum Number of Tags",
					settingValue = "${maximumNumberOfTags}");
			}
		}

		else if ("${enableAutoTaggingFor}" == "Instance Settings") {
			AutoTagging.openToAssetAutoTagging(
				configurationScope = "Instance Settings",
				systemSettingsInstanceScope = "${systemSettingsInstanceScope}");

			FormFields.enableCheckbox(fieldName = "enabled");

			if (isSet(maximumNumberOfTags)) {
				SystemSettings.editTextSetting(
					settingName = "Maximum Number of Tags",
					settingValue = "${maximumNumberOfTags}");
			}
		}

		else if ("${enableAutoTaggingFor}" == "Site Settings") {
			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings",
				site = "${site}");

			Click(
				key_itemName = "Assets",
				locator1 = "ListGroupItem#ITEM_TEXT");

			Navigator.gotoNavTab(navTab = "Asset Auto Tagging");

			Check.checkToggleSwitch(locator1 = "Checkbox#ENABLE_AUTO_TAGGING");
		}

		if (isSet(validationError)) {
			if (IsElementPresent(locator1 = "Button#UPDATE")) {
				Button.clickUpdate();
			}

			else if (IsElementPresent(locator1 = "Button#SAVE")) {
				Button.clickSave();
			}

			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_1",
				value1 = "${validationError}");
		}
		else {
			if (IsElementPresent(locator1 = "Button#UPDATE")) {
				PortletEntry.update();
			}

			else if (IsElementPresent(locator1 = "Button#SAVE")) {
				PortletEntry.save();
			}
		}
	}

	macro enableOpenNLP {
		AutoTagging.openToOpenNLP();

		if (isSet(confidenceThreshold)) {
			SystemSettings.editTextSetting(
				settingName = "Confidence Threshold",
				settingValue = "${confidenceThreshold}");
		}

		Click(locator1 = "Dropdown#TRIGGER");

		DropdownMenuItem.click(menuItem = "${assetType}");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}

		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
	}

	macro enableTensorFlow {
		AutoTagging.openToTensorFlow();

		Alert.viewInfoMessageSpecific(infoMessage = "The TensorFlow model will be downloaded in the background. No tags will be created until the model is fully downloaded");

		FormFields.enableCheckbox(fieldName = "enabled");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}

		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}

		Alert.viewInfoMessageSpecific(infoMessage = "The TensorFlow model is being downloaded in the background. No tags will be created until the model is fully downloaded");

		while (IsElementPresent(key_infoMessage = "The TensorFlow model is being downloaded in the background. No tags will be created until the model is fully downloaded", locator1 = "Message#INFO_SPECIFIC")) {
			Pause(locator1 = "20000");

			Refresh();
		}

		AssertElementNotPresent(
			key_infoMessage = "The TensorFlow model will be downloaded in the background. No tags will be created until the model is fully downloaded",
			locator1 = "Message#INFO_SPECIFIC");

		AssertElementNotPresent(
			key_infoMessage = "The TensorFlow model is being downloaded in the background. No tags will be created until the model is fully downloaded",
			locator1 = "Message#INFO_SPECIFIC");
	}

	macro openToAssetAutoTagging {
		var baseURL = PropsUtil.get("portal.url");

		if ("${configurationScope}" == "System Settings") {
			var pid = "com.liferay.asset.auto.tagger.internal.configuration.AssetAutoTaggerSystemConfiguration";

			var portlet = "SystemSettingsPortlet";
		}

		if ("${configurationScope}" == "Instance Settings") {
			var pid = "com.liferay.asset.auto.tagger.internal.configuration.AssetAutoTaggerCompanyConfiguration";

			if (!(isSet(systemSettingsInstanceScope))) {
				var portlet = "InstanceSettingsPortlet";
			}
		}

		Open(locator1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_${portlet}&_com_liferay_configuration_admin_web_portlet_${portlet}_factoryPid=${pid}&_com_liferay_configuration_admin_web_portlet_${portlet}_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	macro openToAutoTaggingSiteSettings {
		if ("${portlet}" == "Asset Auto Tagging") {
			var configurationScreenKey = "site-configuration-asset-auto-tagger";
		}

		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage/-/site/settings?_com_liferay_site_admin_web_portlet_SiteSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fview_configuration_screen&_com_liferay_site_admin_web_portlet_SiteSettingsPortlet_configurationScreenKey=${configurationScreenKey}");
	}

	macro openToOpenNLP {
		var baseURL = PropsUtil.get("portal.url");

		Open(locator1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=com.liferay.asset.auto.tagger.opennlp.internal.configuration.OpenNLPDocumentAssetAutoTaggerCompanyConfiguration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	macro openToTensorFlow {
		var baseURL = PropsUtil.get("portal.url");

		Open(locator1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=com.liferay.document.library.asset.auto.tagger.tensorflow.internal.configuration.TensorFlowImageAssetAutoTagProviderCompanyConfiguration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

}