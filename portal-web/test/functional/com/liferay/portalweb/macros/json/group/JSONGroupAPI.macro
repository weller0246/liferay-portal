definition {

	@summary = "Directly calls the JSON WS API to add a group"
	macro _addGroup {
		Variables.assertDefined(parameterList = "${groupNameMap}");

		if (!(isSet(portalURL))) {
			var portalURL = JSONCompany.getPortalURL();
		}

		if ("${type}" == "Private") {
			var type = "3";
		}
		else if ("${type}" == "Restricted") {
			var type = "2";
		}
		else {
			var type = "1";
		}

		if ("${manualMembership}" == "false") {
			var manualMembership = "false";
		}
		else {
			var manualMembership = "true";
		}

		var curl = '''
			${portalURL}/api/jsonws/group/add-group \
				-u test@liferay.com:test \
				-d parentGroupId=${parentGroupId} \
				-d liveGroupId=0 \
				-d nameMap=${groupNameMap} \
				-d descriptionMap=${groupDescriptionMap} \
				-d type=${type} \
				-d manualMembership=${manualMembership} \
				-d membershipRestriction=0 \
				-d friendlyURL= \
				-d site=true \
				-d inheritContent=false \
				-d active=true
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@summary = "Directly calls the JSON WS API to assign a user a role"
	macro _assignGroupRoleToUser {
		Variables.assertDefined(parameterList = "${groupId},${roleId},${userId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/usergrouprole/add-user-group-roles \
				-u test@liferay.com:test \
				-d roleId=${roleId} \
				-d groupId=${groupId} \
				-d userIds=${userId}
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@summary = "Directly calls the JSON WS API to add a user to a group"
	macro _assignUserGroupToGroup {
		Variables.assertDefined(parameterList = "${groupId},${userGroupId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/usergroup/add-group-user-groups/group-id/${groupId}/user-group-ids/${userGroupId} \
				-u test@liferay.com:test
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@summary = "Directly calls the JSON WS API to add a user to a group"
	macro _assignUserToGroup {
		Variables.assertDefined(parameterList = "${groupId},${userId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/user/add-group-users \
				-u test@liferay.com:test \
				-d groupId=${groupId} \
				-d userIds=${userId}
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@summary = "Directly calls the JSON WS API to delete a group"
	macro _deleteGroup {
		Variables.assertDefined(parameterList = "${groupId}");

		if (!(isSet(portalURL))) {
			var portalURL = JSONCompany.getPortalURL();
		}

		var curl = '''
			${portalURL}/api/jsonws/group/delete-group \
				-u test@liferay.com:test \
				-d groupId=${groupId}
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@summary = "Get the depotEntryGroupRelId from any existing depot that connects to a site by using groupName"
	macro _getDepotEntryGroupRelIdByGroupName {
		Variables.assertDefined(parameterList = "${groupName}");

		var companyId = JSONCompany.getCompanyId();

		var portalURL = JSONCompany.getPortalURL();

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}", site = "${site}");

		var curl = '''
			${portalURL}/api/jsonws/depot.depotentrygrouprel/get-depot-entry-group-rels \
				-u test@liferay.com:test \
				-d groupId=${groupId} \
				-d "start=-1" \
				-d "end=-1"
		''';

		var depotEntryGroupRelId = JSONCurlUtil.post("${curl}", "$.[?(@['groupId'] == '${groupId}')]['depotEntryGroupRelId']");

		if ("${depotEntryGroupRelId}" == "") {
			fail("FAIL. Cannot find group.");
		}

		return "${depotEntryGroupRelId}";
	}

	@summary = "Get the depotId from any existing depot by using depotName"
	macro _getDepotIdByName {
		Variables.assertDefined(parameterList = "${depotName}");

		var companyId = JSONCompany.getCompanyId();

		var portalURL = JSONCompany.getPortalURL();

		if (!(isSet(defaultLocale))) {
			var defaultLocale = "en_US";
		}
		else {
			var defaultLocale = "${defaultLocale}";
		}

		var locale = '''default-locale=\"${defaultLocale}\"''';

		var curl = '''
			${portalURL}/api/jsonws/group/get-groups/company-id/${companyId}/parent-group-id/0/site/false \
				-u test@liferay.com:test
		''';

		var depotId = JSONCurlUtil.get("${curl}", "$.[?(@['nameCurrentValue'] == '${depotName}' && @['name'] contains '${locale}')]['classPK']");

		if ("${depotId}" == "") {
			fail("FAIL. Cannot find group.");
		}

		return "${depotId}";
	}

	@summary = "Get the grandParentGroupId from any existing site by using groupName"
	macro _getGrandParentGroupIdByName {
		Variables.assertDefined(parameterList = "${groupName}");

		var companyId = JSONCompany.getCompanyId();

		var portalURL = JSONCompany.getPortalURL();

		if (!(isSet(site))) {
			var site = "true";
		}

		var curl = '''
			${portalURL}/api/jsonws/group/get-groups \
				-u test@liferay.com:test \
				-d companyId=${companyId} \
				-d parentGroupId=0 \
				-d site=${site}
		''';

		var groupId = JSONCurlUtil.post("${curl}", "$.[?(@['nameCurrentValue'] == '${groupName}')]['groupId']");

		if ("${groupId}" == "") {
			fail("FAIL. Cannot find group.");
		}

		return "${groupId}";
	}

	@summary = "Get the groupId from any existing group by using groupKey"
	macro _getGroupIdByGroupKey {
		Variables.assertDefined(parameterList = "${groupKey},${site}");

		var companyId = JSONCompany.getCompanyId();

		var parentGroupId = JSONGroupSetter.setParentGroupId(parentGroupName = "${parentGroupName}", grandParentGroupName = "${grandParentGroupName}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/group/get-groups/company-id/${companyId}/parent-group-id/${parentGroupId}/site/${site} \
				-u test@liferay.com:test
		''';

		var groupId = JSONCurlUtil.get("${curl}", "$.[?(@['groupKey'] == '${groupKey}')]['groupId']");

		if ("${groupId}" == "") {
			fail("FAIL. Cannot find group.");
		}

		return "${groupId}";
	}

	@summary = "Get the groupId from any existing site by using groupName"
	macro _getGroupIdByName {
		Variables.assertDefined(parameterList = "${groupName},${site}");

		if (!(isSet(portalURL))) {
			var portalURL = JSONCompany.getPortalURL();
		}

		var companyId = JSONCompany.getCompanyId(portalURL = "${portalURL}");

		var parentGroupId = JSONGroupSetter.setParentGroupId(parentGroupName = "${parentGroupName}", grandParentGroupName = "${grandParentGroupName}");

		var curl = '''
			${portalURL}/api/jsonws/group/get-groups/company-id/${companyId}/parent-group-id/${parentGroupId}/site/${site} \
				-u test@liferay.com:test
		''';

		var groupId = JSONCurlUtil.get("${curl}", "$.[?(@['nameCurrentValue'] == '${groupName}')]['groupId']");

		if ("${groupId}" == "") {
			fail("FAIL. Cannot find group.");
		}

		echo("## * GroupId: ${groupId}");

		return "${groupId}";
	}

	@summary = "Get the groupName from any group by using groupId"
	macro _getGroupName {
		Variables.assertDefined(parameterList = "${groupId}");

		var companyId = JSONCompany.getCompanyId();

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/group/get-group/group-id/${groupId} \
				-u test@liferay.com:test
		''';

		var groupName = JSONCurlUtil.get("${curl}", "$['nameCurrentValue']");

		return "${groupNam}";
	}

	@summary = "Get the parentGroupId from any existing site by using groupName"
	macro _getParentGroupIdByName {
		Variables.assertDefined(parameterList = "${groupName}");

		var companyId = JSONCompany.getCompanyId();

		var grandParentGroupId = JSONGroupSetter.setGrandParentGroupId(grandParentGroupName = "${grandParentGroupName}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/group/get-groups/company-id/${companyId}/parent-group-id/${grandParentGroupId}/site/true \
				-u test@liferay.com:test
		''';

		var groupId = JSONCurlUtil.get("${curl}", "$.[?(@['nameCurrentValue'] == '${groupName}')]['groupId']");

		if ("${groupId}" == "") {
			fail("FAIL. Cannot find group.");
		}

		return "${groupId}";
	}

	@summary = "Get the groupId from any existing parent or child site by using groupName"
	macro _getSiteIdByGroupKey {
		Variables.assertDefined(parameterList = "${groupName}");

		if (!(isSet(portalURL))) {
			var portalURL = JSONCompany.getPortalURL();
		}

		var companyId = JSONCompany.getCompanyId(portalURL = "${portalURL}");

		var curl = '''
			${portalURL}/api/jsonws/group/get-group \
				-u test@liferay.com:test \
				-d companyId=${companyId} \
				-d groupKey=${groupName}
		''';

		var groupId = JSONCurlUtil.post("${curl}", "$.[?(@['groupKey'] == '${groupName}')]['groupId']");

		if ("${groupId}" == "") {
			fail("FAIL. Cannot find group.");
		}

		return "${groupId}";
	}

}