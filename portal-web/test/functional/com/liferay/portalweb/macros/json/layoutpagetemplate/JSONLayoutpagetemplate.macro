definition {

	@summary = "Add a displayPageTemplateEntry to an existing site"
	macro addDisplayPageTemplateEntry {
		Variables.assertDefined(parameterList = "${contentType},${displayPageTemplateEntryName},${groupName}");

		var groupId = JSONLayoutpagetemplateSetter.setGroupId(groupKey = "${groupName}", parentGroupName = "${parentGroupName}", grandParentGroupName = "${grandParentGroupName}", site = "${site}");

		var classNameId = JSONLayoutpagetemplateSetter.setClassNameId(contentType = "${contentType}");

		if ("${subType}" == "Basic Document" || "${contentType}" == "Blogs Entry" || "${contentType}" == "Category") {
			var classTypeId = "0";
		}
		else {
			if ("${subType}" == "Basic Web Content") {
				var globalGroupId = JSONGroupAPI._getGroupIdByName(
					groupName = "Global",
					site = "true");

				var classTypeId = JSONLayoutpagetemplateSetter.setClassTypeId(
					classNameId = "${classNameId}",
					groupId = "${globalGroupId}",
					structureName = "${subType}");
			}
			else if ("${subType}" == "Google Drive Shortcut") {
				var globalGroupId = JSONGroupAPI._getGroupIdByName(
					groupName = "Global",
					site = "true");

				var classTypeId = JSONDLfileentrytype._getFileEntryTypeId(
					fileEntryTypeName = "${subType}",
					groupId = "${globalGroupId}");
			}
			else {
				if (isSet(depotName)) {
					var depotId = JSONLayoutpagetemplateSetter.setGroupId(groupKey = "${depotName}",site = "false");

					if (isSet(depotStructure)) {
						var classTypeId = JSONLayoutpagetemplateSetter.setClassTypeId(
							classNameId = "${classNameId}",
							groupId = "${depotId}",
							structureName = "${subType}");
					}
					else if (isSet(depotDocumentType)) {
						var classTypeId = JSONDLfileentrytype._getFileEntryTypeId(
							fileEntryTypeName = "${subType}",
							groupId = "${depotId}");
					}
				}
				else if (isSet(globalStructure)) {
					var globalGroupId = JSONGroupAPI._getGroupIdByName(
						groupName = "Global",
						site = "true");

					var classTypeId = JSONLayoutpagetemplateSetter.setClassTypeId(
						classNameId = "${classNameId}",
						groupId = "${globalGroupId}",
						structureName = "${subType}");
				}
				else if (isSet(globalDocumentType)) {
					var globalGroupId = JSONGroupAPI._getGroupIdByName(
						groupName = "Global",
						site = "true");

					var classTypeId = JSONDLfileentrytype._getFileEntryTypeId(
						fileEntryTypeName = "${subType}",
						groupId = "${globalGroupId}");
				}
				else {
					var classTypeId = JSONLayoutpagetemplateSetter.setClassTypeId(
						classNameId = "${classNameId}",
						groupId = "${groupId}",
						structureName = "${subType}");
				}
			}
		}

		if (isSet(masterLayoutEntryName)) {
			var masterLayoutPlid = JSONLayoutpagetemplateSetter.setMasterLayoutPlid(
				groupId = "${groupId}",
				masterLayoutEntryName = "${masterLayoutEntryName}");
		}
		else {
			var masterLayoutPlid = "0";
		}

		var serviceContext = JSONLayoutpagetemplateSetter.setServiceContext(
			addGuestPermissions = "true",
			assetCategoryIds = "${assetCategoryIds}",
			assetTagNames = "${assetTagNames}",
			serviceContext = "${serviceContext}",
			workflowAction = "${workflowAction}");

		JSONLayoutpagetemplateAPI._addDisplayPageTemplateEntry(
			classNameId = "${classNameId}",
			classTypeId = "${classTypeId}",
			displayPageTemplateEntryName = "${displayPageTemplateEntryName}",
			groupId = "${groupId}",
			masterLayoutPlid = "${masterLayoutPlid}",
			serviceContext = "${serviceContext}");
	}

	@summary = "Add a PageTemplateEntry to the Global site"
	macro addGlobalPageTemplateEntry {
		Variables.assertDefined(parameterList = "${pageTemplateEntryActive},${pageTemplateEntryName}");

		var nameMap = JSONLayoutpagetemplateSetter.setNameMap(name = "${pageTemplateEntryName}");

		var descriptionMap = JSONLayoutpagetemplateSetter.setDescriptionMap(description = "${pageTemplateEntryDescription}");

		var serviceContext = JSONLayoutpagetemplateSetter.setServiceContext(
			addGuestPermissions = "false",
			assetCategoryIds = "${assetCategoryIds}",
			assetTagNames = "${assetTagNames}",
			serviceContext = "${serviceContext}",
			workflowAction = "${workflowAction}");

		JSONLayoutpagetemplateAPI._addGlobalPageTemplateEntry(
			active = "${pageTemplateEntryActive}",
			descriptionMap = "${descriptionMap}",
			nameMap = "${nameMap}",
			serviceContext = "${serviceContext}");
	}

	@summary = "Add a layoutPageTemplateCollection to an existing site"
	macro addLayoutPageTemplateCollection {
		Variables.assertDefined(parameterList = "${groupName},${layoutPageTemplateCollectionName}");

		var groupId = JSONLayoutpagetemplateSetter.setGroupId(groupKey = "${groupName}", parentGroupName = "${parentGroupName}", grandParentGroupName = "${grandParentGroupName}", site = "${site}");

		if (isSet(description)) {
			var description = "${description}";
		}
		else {
			var description = "";
		}

		var serviceContext = JSONLayoutpagetemplateSetter.setServiceContext(
			addGuestPermissions = "true",
			assetCategoryIds = "${assetCategoryIds}",
			assetTagNames = "${assetTagNames}",
			serviceContext = "${serviceContext}",
			workflowAction = "${workflowAction}");

		JSONLayoutpagetemplateAPI._addLayoutPageTemplateCollection(
			description = "${description}",
			groupId = "${groupId}",
			layoutPageTemplateCollectionName = "${layoutPageTemplateCollectionName}",
			serviceContext = "${serviceContext}");
	}

	@summary = "Add a layoutPageTemplateEntry to an existing site"
	macro addLayoutPageTemplateEntry {
		Variables.assertDefined(parameterList = "${groupName},${layoutPageTemplateEntryName},${layoutPageTemplateType},${layoutPageTemplateStatus}");

		var groupId = JSONLayoutpagetemplateSetter.setGroupId(groupKey = "${groupName}", parentGroupName = "${parentGroupName}", grandParentGroupName = "${grandParentGroupName}", site = "${site}");

		if (isSet(layoutPageTemplateCollectionName)) {
			var layoutPageTemplateCollectionId = JSONLayoutpagetemplateSetter.setLayoutPageTemplateCollectionId(
				groupId = "${groupId}",
				layoutPageTemplateCollectionName = "${layoutPageTemplateCollectionName}");
		}
		else {
			var layoutPageTemplateCollectionId = "0";
		}

		if (isSet(masterLayoutEntryName)) {
			var masterLayoutPlid = JSONLayoutpagetemplateSetter.setMasterLayoutPlid(
				groupId = "${groupId}",
				masterLayoutEntryName = "${masterLayoutEntryName}");
		}
		else {
			var masterLayoutPlid = "0";
		}

		var serviceContext = JSONLayoutpagetemplateSetter.setServiceContext(
			addGuestPermissions = "true",
			assetCategoryIds = "${assetCategoryIds}",
			assetTagNames = "${assetTagNames}",
			serviceContext = "${serviceContext}",
			workflowAction = "${workflowAction}");

		var status = JSONLayoutpagetemplateUtil._getStatus(layoutPageTemplateStatus = "${layoutPageTemplateStatus}");

		var type = JSONLayoutpagetemplateUtil._getType(layoutPageTemplateType = "${layoutPageTemplateType}");

		JSONLayoutpagetemplateAPI._addLayoutPageTemplateEntry(
			groupId = "${groupId}",
			layoutPageTemplateCollectionId = "${layoutPageTemplateCollectionId}",
			layoutPageTemplateEntryName = "${layoutPageTemplateEntryName}",
			masterLayoutPlid = "${masterLayoutPlid}",
			serviceContext = "${serviceContext}",
			status = "${status}",
			type = "${type}");
	}

	@summary = "Add a masterPageTemplateEntry to an existing site"
	macro addMasterPageTemplateEntry {
		Variables.assertDefined(parameterList = "${groupName},${masterPageTemplateEntryName}");

		var groupId = JSONLayoutpagetemplateSetter.setGroupId(groupKey = "${groupName}", parentGroupName = "${parentGroupName}", grandParentGroupName = "${grandParentGroupName}", site = "${site}");

		var serviceContext = JSONLayoutpagetemplateSetter.setServiceContext(
			addGuestPermissions = "true",
			assetCategoryIds = "${assetCategoryIds}",
			assetTagNames = "${assetTagNames}",
			serviceContext = "${serviceContext}",
			workflowAction = "${workflowAction}");

		JSONLayoutpagetemplateAPI._addMasterPageTemplateEntry(
			groupId = "${groupId}",
			masterPageTemplateEntryName = "${masterPageTemplateEntryName}",
			serviceContext = "${serviceContext}");
	}

	@summary = "Delete a layoutPageTemplateEntry under an existing site"
	macro deleteLayoutPageTemplateEntry {
		Variables.assertDefined(parameterList = "${groupName},${layoutPageTemplateEntryName},${type}");

		var groupId = JSONLayoutpagetemplateSetter.setGroupId(groupKey = "${groupName}",site = "${site}");

		var layoutPageTemplateEntryId = JSONLayoutpagetemplateSetter.setLayoutPageTemplateEntryId(
			groupId = "${groupId}",
			layoutPageTemplateEntryName = "${layoutPageTemplateEntryName}",
			type = "${type}");

		JSONLayoutpagetemplateAPI._deleteLayoutPageTemplateEntry(layoutPageTemplateEntryId = "${layoutPageTemplateEntryId}");
	}

}