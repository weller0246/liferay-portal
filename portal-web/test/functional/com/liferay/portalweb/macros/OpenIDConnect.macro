definition {

	macro acceptConditions {
		if (IsElementPresent.pauseIsElementPresent(locator1 = "GoogleLogin#ALLOW")) {
			Click(locator1 = "GoogleLogin#ALLOW");
		}

		if (IsElementPresent(locator1 = "Button#I_AGREE")) {
			SignIn.agreeToTermsOfUse();
		}

		if (IsElementPresent.pauseIsElementPresent(locator1 = "TextInput#ANSWER")) {
			Type(
				locator1 = "TextInput#ANSWER",
				value1 = "test");

			KeyPress(
				locator1 = "TextInput#ANSWER",
				value1 = "\RETURN");
		}
	}

	macro accountSignIn {
		if (contains("${specificURL}", "{specificURL}")) {
			Navigator.openURL();
		}
		else {
			Navigator.openSpecificURL(url = "${specificURL}");
		}

		AssertClick(
			locator1 = "UserBar#USER_SIGN_IN",
			value1 = "Sign In");

		Click(locator1 = "Icon#OPENID_CONNECT");

		Click(locator1 = "Button#SIGN_IN");

		Type(
			locator1 = "OpenIDConnect#LOGIN_USERNAME_FIELD",
			value1 = "${userEmailAddress}");

		Type(
			locator1 = "OpenIDConnect#LOGIN_PASSWORD_FIELD",
			value1 = "${userPassword}");

		if (IsElementPresent(locator1 = "OpenIDConnect#LOGIN_SIGN_IN_BUTTON")) {
			Click(locator1 = "OpenIDConnect#LOGIN_SIGN_IN_BUTTON");
		}
		else {
			Click(locator1 = "GoogleLogin#LOGIN_NEXT_BUTTON");
		}
	}

	macro addProvider {
		Button.clickAdd();

		FormFields.editTextMultiline(
			fieldName = "providerName",
			fieldValue = "${providerName}");

		FormFields.editTextMultiline(
			fieldName = "openIdConnectClientId",
			fieldValue = "${openIDConnectClientID}");

		FormFields.editTextMultiline(
			fieldName = "openIdConnectClientSecret",
			fieldValue = "${openIDConnectClientSecret}");

		FormFields.editTextMultiline(
			fieldName = "discoveryEndPoint",
			fieldValue = "https://accounts.google.com/.well-known/openid-configuration");

		PortletEntry.save();
	}

	macro getOpenIDAccessTokenValue {
		var mysqlStatement = "SELECT accessToken FROM lportal.OpenIdConnectSession";

		var sqlResults = SQL.executeMySQLStatement(
			mysqlStatement = "${mysqlStatement}");

		var accessToken = StringUtil.extractDigits(StringUtil.regexReplaceAll("${sqlResults}", "[\r\n]", ""));

		// 1. idot kiszedni es osszehasonlitani az elozoevel frissites utan 2. mcvvVersiont megnezni hogy nott-e 1-el. 3. accessTokent is ellenorizni hogy valtozott-e

		return "${accessToken}";
	}

	macro getOpenIDModifiedDate {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");
    	var outputFile = "mysqltemp.txt";
		var mysqlStatement = "SELECT DATE_FORMAT (modifiedDate, '%Y-%c-%e %T') FROM keycloak.OpenIdConnectSession;";

		var sqlResults = SQL.executeMySQLStatement(
			mysqlStatement = "${mysqlStatement}");

		var modifiedDate = Files.readAllLines("${liferayHome}/${outputFile}").get(1);

		echo("## * Modified date is: ${modifiedDate}");

		return "${modifiedDate}";
	}

	macro getOpenIDMvccVersionValue {

		var mysqlStatement = "SELECT mvccVersion FROM keycloak.OpenIdConnectSession";

		SQL.executeMySQLStatement(mysqlStatement = "${mysqlStatement}");

		//var mvccVersion = Files.readAllLines("${liferayHome}/${outputFile}").get(2);

		echo("## mvcc Version  is: ${mysqlStatement}");

		return "${mysqlStatement}";
	}

	macro viewProvider {
		AssertClick(
			locator1 = "UserBar#USER_SIGN_IN",
			value1 = "Sign In");

		AssertElementPresent(locator1 = "Icon#OPENID_CONNECT");

		Click(locator1 = "Icon#OPENID_CONNECT");

		AssertElementPresent(locator1 = "OpenIDConnectLogin#OPENID_CONNECT_PROVIDER_NAME_LABEL");

		Click(locator1 = "OpenIDConnectLogin#OPENID_CONNECT_DROPDOWN_MENU");

		AssertElementPresent(
			key_providerNname = "Google",
			locator1 = "OpenIDConnectLogin#OPENID_CONNECT_DROPDOWN_OPTION");
	}

	macro waitForNewAccessTokenValue {
		var isChanged = "false";
		var first = "${firstAccessToken}";
		var second = "";

		while ("${isChanged}" == "false") {
			second = OpenIDConnect.getOpenIDAccessTokenValue();

			if ("${first}" == "${second}") {
				Pause(locator1 = "10000");
			}
			else {
				isChanged = "true";
			}
		}
		return "${second}";
	}

}