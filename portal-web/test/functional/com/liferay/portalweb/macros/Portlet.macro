definition {

	macro _clickAddPortlet {
		Click.clickNoWaitForVisible(
			key_portletName = "${portletName}",
			locator1 = "ControlMenuAddPanel#ADD_PORTLET_LINK");
	}

	macro addDuplicatePG {
		var portletTypeKey = "PORTLET";

		if ("${portletName}" == "Map") {
			var portletName = "Where are the Liferay members?";
		}
		else if ("${portletName}" == "Requests") {
			var portletTypeKey = "PORTLET_BORDERLESS";
		}

		if (!(isSet(portletCount))) {
			var portletCount = "1";
		}

		var i = "0";

		while ("${i}" != "${portletCount}") {
			var i = ${i} + 1;

			Refresh();

			Portlet.addPGCmd(portletName = "${portletName}");
		}

		var key_portletName = "${portletName}";

		AssertElementPresent(locator1 = "Home#${portletTypeKey}");
	}

	@summary = "Add a '${portletName}' portlet"
	macro addPG {
		if ("${portletName}" == "Map") {
			var portletName = "Where are the Liferay members?";
		}

		Portlet.addPGCmd(portletName = "${portletName}");

		var i = "1";
		var key_portletName = "${portletName}";

		while (!((IsElementPresent(locator1 = "Home#PORTLET")) || ("${i}" == "3"))) {
			var i = ${i} + 1;

			echo("The PORTLET could not be found. Refreshing the page. Attempt number ${i}...");

			Refresh();

			Portlet.addPGCmd(portletName = "${portletName}");
		}

		Click.clickAt(locator1 = "ControlMenuAddPanel#CLOSE_ADD_PANEL");

		AssertElementPresent(locator1 = "Home#PORTLET");
	}

	macro addPGCmd {
		if ("${portletName}" == "Where are the Liferay members?") {
			var portletName = "Map";
		}

		if (IsNotVisible(locator1 = "ControlMenuAddPanel#CLOSE_ADD_PANEL")) {
			var browserType = PropsUtil.get("browser.type");

			if ("${browserType}" == "safari") {
				Click.clickNoMouseOver(locator1 = "ControlMenu#ADD");
			}
			else {
				Click.clickAt(locator1 = "ControlMenu#ADD");
			}
		}

		AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

		Navigator.gotoNavTab(navTab = "Widgets");

		Pause(locator1 = "3000");

		Type(
			locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
			value1 = "${portletName}");

		Portlet._clickAddPortlet(portletName = "${portletName}");

		var key_portletName = "${portletName}";

		LiferayEvent.waitForPortletReady();

		AssertElementPresent(locator1 = "Portlet#LOADED");
	}

	macro assertPortletHeader {
		var key_portletTitleName = "${portletName}";

		AssertVisible(locator1 = "Home#PORTLET_HEADER");
	}

	macro assertServerShutdown {
		var shutdownPauseCount = "0";

		while ((IsElementPresent(locator1 = "//body")) && ("${shutdownPauseCount}" != "12")) {
			Refresh();

			Pause(locator1 = "10000");

			var shutdownPauseCount = ${shutdownPauseCount} + 1;

			echo("Shutdown pause count: ${shutdownPauseCount}");
		}
	}

	macro assertServerStartup {
		var startupPauseCount = "0";

		while ((!(IsElementPresent(locator1 = "UserBar#USER_SIGN_IN"))) && ("${startupPauseCount}" != "12")) {
			Refresh();

			Pause(locator1 = "10000");

			var startupPauseCount = ${startupPauseCount} + 1;

			echo("Startup pause count: ${startupPauseCount}");
		}
	}

	macro changeDisplayStyle {
		if (IsElementNotPresent(locator1 = "Icon#DISPLAY_STYLE_ACTIVE", key_displayStyle = StringUtil.toLowerCase("${displayStyle}"))) {
			Click(
				key_displayStyle = StringUtil.toLowerCase("${displayStyle}"),
				locator1 = "Icon#DISPLAY_STYLE");
		}

		AssertElementPresent(
			key_displayStyle = StringUtil.toLowerCase("${displayStyle}"),
			locator1 = "Icon#DISPLAY_STYLE_ACTIVE");
	}

	macro clickPortletPlusIconPG {
		var browserType = PropsUtil.get("browser.type");
		var key_portletName = "${portletName}";

		if ("${browserType}" == "safari") {
			Click.javaScriptClick(locator1 = "Portlet#ICON_PLUS_SIGN");

			AssertVisible(locator1 = "Portlet#ICON_PLUS_SIGN");
		}

		else {
			MouseOver.mouseOverNotVisible(
				key_portletName = "${portletName}",
				locator1 = "Portlet#ICON_PLUS_SIGN");

			Click(
				key_portletName = "${portletName}",
				locator1 = "Portlet#ICON_PLUS_SIGN");
		}
	}

	macro configureApplicationDecoratorViaLookandfeelPG {
		Navigator.gotoNavTab(navTab = "General");

		Select(
			locator1 = "Portlet#APPLICATION_DECORATOR_SELECT",
			value1 = "${applicationDecorator}");
	}

	macro configureCustomBorderStylesViaLookandfeelPG {
		Navigator.gotoNavTab(navTab = "Border Styles");

		if (isSet(sameForAllFieldsetLabelList)) {
			for (var sameForAllFieldsetLabel : list "${sameForAllFieldsetLabelList}") {
				Check.checkToggleSwitch(
					key_fieldLabel = "Same for All",
					key_fieldsetLabel = "${sameForAllFieldsetLabel}",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH_IN_FIELDSET");
			}
		}

		if (isSet(borderWidthAttributeList)) {
			for (var borderWidthAttribute : list "${borderWidthAttributeList}") {
				var fieldLabel = StringUtil.extractFirst("${borderWidthAttribute}", "-");

				var value = StringUtil.extractLast("${borderWidthAttribute}", "-");

				Type(
					inputFieldId = "${fieldLabel}",
					locator1 = "TextInput#INPUT_ID",
					value1 = "${value}");
			}
		}

		if (isSet(borderWidthUnitList)) {
			for (var borderWidthUnit : list "${borderWidthUnitList}") {
				var fieldLabel = StringUtil.extractFirst("${borderWidthUnit}", "-");

				var value = StringUtil.extractLast("${borderWidthUnit}", "-");

				Select(
					locator1 = "Select#SELECT_ID",
					selectFieldId = "${fieldLabel}",
					value1 = "${value}");
			}
		}

		if (isSet(borderStyleAttributeList)) {
			for (var borderStyleAttribute : list "${borderStyleAttributeList}") {
				var fieldLabel = StringUtil.extractFirst("${borderStyleAttribute}", "-");

				var value = StringUtil.extractLast("${borderStyleAttribute}", "-");

				Select(
					locator1 = "Select#SELECT_ID",
					selectFieldId = "${fieldLabel}",
					value1 = "${value}");
			}
		}

		if (isSet(borderColorAttributeList)) {
			for (var borderColorAttribute : list "${borderColorAttributeList}") {
				var fieldLabel = StringUtil.extractFirst("${borderColorAttribute}", "-");

				var value = StringUtil.extractLast("${borderColorAttribute}", "-");

				PageEditor.selectColorSwatchItem(
					colorSwatchItem = "${value}",
					fieldLabel = "${fieldLabel}");
			}
		}

		PortletEntry.save();
	}

	macro configureCustomStylesViaLookandfeelPG {
		Navigator.gotoNavTab(navTab = "Text Styles");

		Select(
			locator1 = "Portlet#TEXT_FONT_SELECT",
			value1 = "Verdana");

		Select(
			locator1 = "Portlet#TEXT_FONT_SIZE_SELECT",
			value1 = "2em");

		Navigator.gotoNavTab(navTab = "Border Styles");

		Type(
			locator1 = "Portlet#BORDER_WIDTH_TOP_INPUT",
			value1 = "20");
	}

	macro configureCustomTitlePG {
		var key_portletTitleName = "${portletTitleName}";

		AssertElementPresent(locator1 = "Portlet#SPECIFIC_TITLE");

		Click(locator1 = "Portlet#SPECIFIC_TITLE");

		Type.typePause(
			locator1 = "TextInput#PORTLET_TITLE",
			value1 = "${portletTitleName} Custom");

		Click.mouseDownMouseUp(locator1 = "Icon#OK");
	}

	macro configureCustomTitleViaLookandfeelPG {
		IFrame.selectConfigurationFrame();

		Navigator.gotoNavTab(navTab = "General");

		Check.checkToggleSwitch(locator1 = "ToggleSwitch#USE_CUSTOM_TITLE");

		Type(
			locator1 = "TextInput#CUSTOM_TITLE",
			value1 = "${portletName} Custom");
	}

	macro deletePG {
		var key_portletName = "${portletName}";

		MouseOver.mouseOverNotVisible(locator1 = "Portlet#SPECIFIC_ELLIPSIS_ICON");

		Click(locator1 = "Portlet#SPECIFIC_ELLIPSIS_ICON");

		MenuItem.clickNoError(menuItem = "Remove");

		AssertConfirm(value1 = "Are you sure you want to remove this component?");
	}

	@summary = "Drag and drop the '${portletName}' portlet from column ${columnNumberFrom} to column ${columnNumberTo}"
	macro dragAndDropPortletToColumnPG {
		var key_portletTitleName = "${portletName}";

		AssertTextEquals(
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_${columnNumberFrom}_PORTLET_TITLE",
			value1 = "${portletName}");

		DragAndDrop.dragAndDropPortletToObject(
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_${columnNumberFrom}_PORTLET_HEADER",
			locator2 = "Home#PAGE_COLUMN_${columnNumberTo}",
			value1 = "${portletName}");

		AssertTextEquals(
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_${columnNumberTo}_PORTLET_TITLE",
			value1 = "${portletName}");
	}

	macro expandTree {
		WaitForVisible(locator1 = "Treeview#NODE_LIST");

		while (IsElementPresent(locator1 = "Treeview#NODE_COLLAPSED")) {
			Click(locator1 = "Treeview#NODE_COLLAPSED");
		}

		AssertElementNotPresent(locator1 = "Treeview#NODE_COLLAPSED");
	}

	macro gotoPortletOptions {
		if (isSet(portletName)) {
			var key_portletName = "${portletName}";
			var browserType = PropsUtil.get("browser.type");

			if ("${browserType}" == "safari") {
				Click.javaScriptClick(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

				AssertVisible(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
			}

			else if ("${siteTemplate}" == "true") {
				MouseOver.mouseOverNotVisible(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

				Click(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
			}

			else {
				MouseOver.mouseOverInvisible(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

				if (IsNotVisible(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON")) {
					Click.javaScriptClick(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
				}

				else {
					Click.waitForMenuToggleJSClick(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
				}
			}
		}

		else {
			MouseOver.mouseOverNotVisible(locator1 = "Portlet#OPTIONS_ICON");

			Click.waitForMenuToggleJSClick(locator1 = "Portlet#OPTIONS_ICON");
		}

		if (isSet(portletOption)) {
			MenuItem.click(menuItem = "${portletOption}");
		}
	}

	macro mouseOverPortletTitle {
		var key_portletTitleName = "${portletTitleName}";

		MouseOver(locator1 = "Portlet#SPECIFIC_TITLE");
	}

	macro saveAndCloseConfig {
		Button.clickSave();

		Alert.viewSuccessMessage();

		SelectFrameTop();

		Click.mouseDownMouseUp(locator1 = "Modal#CLOSE_BUTTON");

		WaitForElementNotPresent(locator1 = "IFrame#MODAL_BODY");
	}

	macro selectApplicationDecorator {
		Select(
			locator1 = "Select#APPLICATION_DECORATORS",
			value1 = "${decorator}");
	}

	macro selectScope {
		Navigator.gotoNavTab(navTab = "Scope");

		Select(
			locator1 = "Select#SCOPE",
			value1 = "regexp:.*${scope}.*");

		Portlet.saveAndCloseConfig();
	}

	macro selectScopePG {
		WaitForLiferayEvent.initializeLiferayEventLog();

		Portlet.gotoPortletOptions(
			portletName = "${portletName}",
			portletOption = "Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.selectScope(scope = "${scope}");
	}

	macro selectTreeNode {
		if (IsElementPresent(locator1 = "Treeview#NODE_UNSELECTED", key_nodeName = "${nodeName}")) {
			AssertClick.assertPartialTextClickAt(
				key_nodeName = "${nodeName}",
				locator1 = "Treeview#NODE_UNSELECTED",
				value1 = "${nodeName}");
		}

		AssertElementPresent(
			key_nodeName = "${nodeName}",
			locator1 = "Treeview#NODE_SELECTED");
	}

	@summary = "Shutdown the current Liferay Portal instance."
	macro shutdownServer {
		AntCommand(
			locator1 = "build-test.xml",
			value1 = "stop-app-server");
	}

	@summary = "Start the current Liferay Portal instance."
	macro startServer {
		var appServerType = PropsUtil.get("app.server.type");

		if ("${deleteLiferayHome}" == "false") {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "start-app-server -Ddelete.liferay.home=false");
		}
		else if ("${keepCachedAppServerData}" == "true") {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "start-app-server -Dkeep.cached.app.server.data=true");
		}
		else if ("${keepOSGiState}" == "true") {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "start-app-server -Dkeep.osgi.state=true");
		}
		else if ("${noLicense}" == "true") {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "start-app-server -Dlicense.not.present=true -Ddelete.liferay.home=false");
		}
		else {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "start-app-server");
		}

		if (!(isSet(userEmailAddress))) {
			var userEmailAddress = "test@liferay.com";
		}

		if (!(isSet(password))) {
			var password = "test";
		}

		if (("${appServerType}" == "jboss") || ("${appServerType}" == "wildfly")) {
			User.loginPG(
				password = "${password}",
				userEmailAddress = "${userEmailAddress}");
		}
	}

	macro viewApplicationDecorator {
		if (isSet(portletName)) {
			key_decorator = StringUtil.lowerCase("${decorator}");
			var key_portletTitleName = "${portletName}";

			AssertElementPresent(locator1 = "Portlet#SPECIFIC_PORTLET_BORDER_DECORATOR");
		}
		else {
			AssertElementPresent(
				key_decorator = StringUtil.lowerCase("${decorator}"),
				locator1 = "Portlet#PORTLET_BORDER_DECORATOR");
		}
	}

	@summary = "Assert that the ${portletName} portlet body has the text '${portletBody}'"
	macro viewBody {
		var key_portletName = "${portletName}";

		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#BODY",
			value1 = "${portletBody}");
	}

	macro viewCannotAddPG {
		if (IsNotVisible(locator1 = "ControlMenuAddPanel#CLOSE_ADD_PANEL")) {
			Click.clickAt(locator1 = "ControlMenu#ADD");
		}

		AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

		Navigator.gotoNavTab(navTab = "Widgets");

		Pause(locator1 = "5000");

		Type(
			locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
			value1 = "${portletName}");

		AssertElementNotPresent(
			key_portletName = "${portletName}",
			locator1 = "ControlMenuAddPanel#ADD_PORTLET_LINK");
	}

	macro viewCannotEdit {
		AssertElementNotPresent(locator1 = "Button#EDIT");
	}

	macro viewCannotPublish {
		AssertElementNotPresent(locator1 = "Button#PUBLISH");
	}

	macro viewCannotSaveAsDraft {
		AssertElementNotPresent(locator1 = "Button#SAVE_AS_DRAFT");
	}

	macro viewCustomStylesViaLookandfeelPG {
		SikuliClick(locator1 = "Portlet#SIGN_IN_CUSTOM_LOOK_AND_FEEL");
	}

	macro viewDuplicatePG {
		var i = "0";

		while ("${i}" != "${totalPortletCount}") {
			var i = ${i} + 1;

			AssertElementPresent(locator1 = "xpath=(//h2[contains(.,'${portletName}')])[${i}]");
		}
	}

	macro viewEmptyMessage {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "${message}");
	}

	macro viewNoPermissionPG {
		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "You do not have the roles required to access this portlet.");
	}

	macro viewNoPortletsPresentCP {
		ApplicationsMenuHelper.openApplicationsMenu();

		Navigator.gotoNavTab(navTab = "${panel}");

		AssertElementNotPresent(
			key_category = "${category}",
			key_portlet = "${portlet}",
			locator1 = "ApplicationsMenu#PORTLET",
			value1 = "${portlet}");
	}

	macro viewNoPortletsPresentPG {
		AssertElementNotPresent(locator1 = "Portlet#PORTLET_CONTENT");
	}

	macro viewNoSpecificPG {
		AssertElementNotPresent(
			key_portletTitleName = "${portletName}",
			locator1 = "Portlet#SPECIFIC_TITLE");
	}

	macro viewPG {
		Portlet.viewTitle(portletName = "${portletName}");

		if (isSet(portletBody)) {
			Portlet.viewBody(
				portletBody = "${portletBody}",
				portletName = "${portletName}");
		}
	}

	macro viewPortletBodyNotPresent {
		AssertElementNotPresent(
			key_portletName = "${portletName}",
			locator1 = "Portlet#BODY");
	}

	macro viewPortletCouldNotBeFoundInfo {
		AssertTextEquals(
			locator1 = "Message#INFO_MAIN_CONTENT",
			value1 = "This portlet could not be found. Please redeploy it or remove it from the page.");
	}

	macro viewPortletOptions {
		MouseOver.mouseOverNotVisible(locator1 = "Portlet#OPTIONS_ICON");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		AssertTextEquals(
			key_menuItem = "${OptionsName}",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "${OptionsName}");
	}

	macro viewPortletOptionsMenulist {
		MouseOver.mouseOverNotVisible(locator1 = "Portlet#OPTIONS_ICON");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		AssertTextEquals(
			key_menuItem = "Look and Feel Configuration",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Look and Feel Configuration");

		AssertTextEquals(
			key_menuItem = "Configuration",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Configuration");

		AssertTextEquals(
			key_menuItem = "Configuration Templates",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Configuration Templates");

		AssertTextEquals(
			key_menuItem = "Export / Import",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Export / Import");

		AssertTextEquals(
			key_menuItem = "Permissions",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Permissions");

		AssertTextEquals(
			key_menuItem = "Remove",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Remove");
	}

	macro viewPortletPresentPG {
		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#PORTLET_CONTENT",
			value1 = "${portletContent}");
	}

	macro viewSpecificPG {
		var key_portletTitleName = "${portletName}";

		AssertTextEquals(
			locator1 = "Portlet#SPECIFIC_TITLE",
			value1 = "${portletName}");
	}

	@summary = "Assert that the ${portletName} portlet title has the text '${portletName}'"
	macro viewTitle {
		var key_portletName = "${portletName}";

		AssertTextEquals(
			locator1 = "Portlet#TITLE",
			value1 = "${portletName}");
	}

	macro viewUndeployMessage {
		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#PORTLET_CONTENT",
			value1 = "This portlet could not be found. Please redeploy it or remove it from the page.");
	}

	macro waitForForm {
		AssertElementNotPresent(locator1 = "//fieldset[@disabled]");
	}

	macro waitForHomePage {
		WaitForElementPresent(
			key_pageName = "${pageName}",
			locator1 = "Home#PAGE");
	}
}