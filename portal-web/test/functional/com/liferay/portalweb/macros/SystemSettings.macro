definition {

	macro configureDisplayStyle {
		Click(locator1 = "Dropdown#TRIGGER");

		DropdownMenuItem.click(menuItem = "${displayStyle}");

		AssertTextEquals(
			locator1 = "Dropdown#SELECTED_VALUE",
			value1 = "${displayStyle}");

		SystemSettings.saveConfiguration();
	}

	macro configureDynamicExportLimit {
		Type(
			locator1 = "SystemSettings#ASSETS_DYNAMIC_EXPORT_LIMIT",
			value1 = "${exportLimitNumber}");

		SystemSettings.saveConfiguration();
	}

	macro configureSystemSetting {
		var key_settingFieldName = "${settingFieldName}";

		if ("${enableSetting}" == "true") {
			Check.toggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			if (isSet(settingValue)) {
				SystemSettings.editTextAreaSetting(
					settingName = "${settingName}",
					settingValue = "${settingValue}");
			}

			SystemSettings.saveConfiguration();

			AssertChecked.assertCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
		else if ("${enableSetting}" == "false") {
			Uncheck.uncheckToggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.saveConfiguration();

			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
	}

	macro configureSystemSettingWithRefresh {
		var key_settingFieldName = "${settingFieldName}";

		if ("${enableSetting}" == "true") {
			Check.toggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.saveConfiguration();

			Refresh();

			AssertChecked.assertCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
		else if ("${enableSetting}" == "false") {
			Uncheck.uncheckToggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.saveConfiguration();

			Refresh();

			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
	}

	macro deleteConfiguration {
		Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();
	}

	macro editSecurityCredential {
		Type(
			locator1 = "SystemSettings#SECURITY_CREDENTIAL_FIELD",
			value1 = "${securityCredential}");

		var key_fieldName = "securityPrincipal";

		Type(
			locator1 = "FormFields#TEXT_MULTILINE_FIELD",
			value1 = "test");

		AssertElementPresent(locator1 = "SystemSettings#SECURITY_CREDENTIAL_FIELD");

		SikuliAssertElementPresent(locator1 = "SystemSettings#SECURITY_CREDENTIAL_HIDDEN_IMAGE");
	}

	macro editTextAreaSetting {
		Type(
			key_label = "${settingName}",
			locator1 = "TextArea#ANY_LABELED",
			value1 = "${settingValue}");
	}

	macro editTextAreaSettingMultiLines {
		for (var settingValue : list "${settingValues}") {
			Type.sendKeys(
				key_label = "${settingName}",
				locator1 = "TextArea#ANY_LABELED",
				value1 = "${settingValue}");

			KeyPress(
				key_label = "${settingName}",
				locator1 = "TextArea#ANY_LABELED",
				value1 = "\RETURN");
		}
	}

	macro editTextSetting {
		Type(
			key_fieldLabel = "${settingName}",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${settingValue}");
	}

	macro exitEditConfiguration {
		Click(locator1 = "Icon#ANGLE_LEFT_BACK");
	}

	macro exportConfiguration {
		Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Export");

		DownloadTempFile();
	}

	macro gotoConfiguration {
		Click(
			key_itemName = "${configurationCategory}",
			locator1 = "ListGroupItem#ITEM_TEXT");

		var browserType = PropsUtil.get("browser.type");

		if ("${browserType}" == "chrome") {
			Pause(locator1 = "3000");
		}

		Click(
			key_configurationName = "${configurationName}",
			key_configurationScope = "${configurationScope}",
			locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");

		AssertElementPresent(
			key_title = "${configurationName}",
			locator1 = "Header#H2_TITLE");
	}

	macro gotoConfigurationEntry {
		Click(
			key_configurationEntry = "${configurationEntry}",
			locator1 = "SystemSettings#CONFIGURATION_ENTRY");
	}

	macro openSystemSettingsAdmin {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet");
	}

	macro openToConfigInSystemSettings {
		var baseURL = "${baseURL}";

		if (contains("${baseURL}", "{baseURL}")) {
			var baseURL = PropsUtil.get("portal.url");
		}

		if ("${portlet}" == "Applications Menu") {
			var portletId = "com.liferay.product.navigation.applications.menu.configuration.ApplicationsMenuInstanceConfiguration";
		}

		Open(locator1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=${portletId}&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	macro resetConfiguration {
		Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Reset Default Values");

		Alert.viewSuccessMessage();
	}

	macro saveConfiguration {
		if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
		else {
			Button.clickUpdate();

			Alert.viewSuccessMessage();
		}
	}

	macro selectOptionSetting {
		Click(
			key_fieldLabel = "${fieldName}",
			locator1 = "SystemSettings#DROPDOWN_MENU");

		Click(
			key_selectOption = "${selectOption}",
			locator1 = "SystemSettings#DROPDOWN_MENU_OPTION");
	}

	macro viewSettingsText {
		AssertTextEquals.assertPartialText(
			key_settingsText = "${settingsText}",
			locator1 = "SystemSettings#SETTINGS_TEXT",
			value1 = "${settingsText}");
	}

	macro viewTextareaPartialText {
		AssertTextEquals.assertPartialText(
			key_label = "${settingName}",
			locator1 = "TextArea#ANY_LABELED",
			value1 = "${settingValue}");
	}

	macro viewTextareaValue {
		if (isSet(repeatableFieldNumber)) {
			AssertTextEquals.assertValue(
				key_fieldName = "${fieldName}",
				key_repeatableFieldNumber = "${repeatableFieldNumber}",
				locator1 = "FormFields#REPEATABLE_TEXT_MULTILINE_FIELD",
				value1 = "${fieldValue}");
		}
		else {
			AssertTextEquals.assertValue(
				key_fieldName = "${fieldName}",
				locator1 = "FormFields#TEXT_MULTILINE_FIELD",
				value1 = "${fieldValue}");
		}
	}

	macro viewTextLabel {
		AssertTextEquals.assertText(
			key_fieldLabel = "${fieldLabel}",
			locator1 = "SystemSettings#LABEL",
			value1 = "${fieldLabel}");
	}

}