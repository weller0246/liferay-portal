definition {

	macro addReportDefinition {
		Click(locator1 = "Button#PLUS");

		PortletEntry.inputName(name = "${reportsDefinitionName}");

		PortletEntry.inputDescription(description = "${reportsDefinitionDescription}");

		Select(
			locator1 = "ReportsAdminEditReportDefinition#DATA_SOURCE_NAME_SELECT",
			value1 = "${dataSource}");

		UploadCommonFile(
			locator1 = "ReportsAdminEditReportDefinition#TEMPLATE_FILE_UPLOAD",
			value1 = "${templateFile}");

		PortletEntry.save();
	}

	macro addReportEntry {
		var key_reportsDefinitionName = "${reportsDefinitionName}";

		LexiconEntry.openEntryMenu(rowEntry = "${reportsDefinitionName}");

		MenuItem.click(menuItem = "Add Report");

		Select(
			locator1 = "Select#REPORT_FORMAT",
			value1 = "${reportFormat}");

		if (isSet(reportName)) {
			Type(
				locator1 = "ReportsAdminEditReportEntry#REPORT_NAME_FIELD",
				value1 = "${reportName}");
		}

		Type(
			locator1 = "TextInput#EMAIL_NOTIFICATIONS",
			value1 = "${emailNotificationsAddress}");

		Type(
			locator1 = "TextInput#EMAIL_RECIPIENT",
			value1 = "${emailRecipientAddress}");

		AssertClick(
			locator1 = "ReportsAdminEditReportEntry#GENERATE_BUTTON",
			value1 = "Generate");

		Alert.viewSuccessMessage();

		Pause(locator1 = "5000");
	}

	macro addScheduleEntry {
		var key_reportsDefinitionName = "${reportsDefinitionName}";

		LexiconEntry.openEntryMenu(rowEntry = "${reportsDefinitionName}");

		MenuItem.click(menuItem = "Add Schedule");

		AssertElementPresent(locator1 = "ReportsAdminEditScheduleEntry#START_DATE_TIME_FIELD");

		var time = selenium.getElementValue("//span[contains(@class,'lfr-input-time')]/input");
		var ampm = RegexUtil.replace("${time}", "([0-9]*):([0-9]*) ([A-Z]*)", "3");
		var hours = RegexUtil.replace("${time}", "([0-9]*):([0-9]*) ([A-Z]*)", "1");
		var minutes = RegexUtil.replace("${time}", "([0-9]*):([0-9]*) ([A-Z]*)", "2");

		if ("${minutes}" == "58") {
			var minutesIncremented2 = "00";

			if ("{hours}" == "12") {
				var hours = "01";
			}
		}
		else if ("${minutes}" == "59") {
			var minutesIncremented2 = "01";

			if ("{hours}" == "12") {
				var hours = "01";
			}
		}
		else {
			var minutesIncremented2 = ${minutes} + 2;
		}

		Type(
			locator1 = "ReportsAdminEditScheduleEntry#START_DATE_TIME_FIELD",
			value1 = "${hours}:${minutesIncremented2} ${ampm}");

		Select(
			locator1 = "Select#REPORT_FORMAT",
			value1 = "${reportFormat}");

		Type(
			locator1 = "TextInput#EMAIL_NOTIFICATIONS",
			value1 = "${emailNotificationsAddress}");

		Type(
			locator1 = "TextInput#EMAIL_RECIPIENT",
			value1 = "${emailRecipientAddress}");

		AssertClick(
			locator1 = "ReportsAdminEditScheduleEntry#SCHEDULE_BUTTON",
			value1 = "Schedule");

		Alert.viewSuccessMessage();

		Pause(locator1 = "5000");
	}

	macro addSource {
		Click(locator1 = "Button#PLUS");

		Type(
			locator1 = "ReportsAdminEditSource#DATA_SOURCE_NAME_FIELD",
			value1 = "${reportsDataSourceName}");

		Type(
			locator1 = "ReportsAdminEditSource#JDBC_DRIVER_CLASS_NAME_FIELD",
			value1 = "${reportsDataSourceClass}");

		Type(
			locator1 = "ReportsAdminEditSource#JDBC_URL_FIELD",
			value1 = "${reportsDataSourceURL}");

		Type(
			locator1 = "ReportsAdminEditSource#JDBC_USER_NAME_FIELD",
			value1 = "${reportsDataSourceUser}");

		if (isSet(reportsDataSourcePassword)) {
			Type(
				locator1 = "ReportsAdminEditSource#JDBC_PASSWORD_FIELD",
				value1 = "${reportsDataSourcePassword}");
		}
	}

	macro assertReportEntryPresent {
		var key_reportsDefinitionName = "${reportsDefinitionName}";

		AssertElementPresent(
			locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_DEFINITION_NAME",
			value1 = "${reportsDefinitionName}");
	}

	macro configureDeliveryEmail {
		AssertClick(
			locator1 = "ReportsAdminConfiguration#NAVIGATION_DELIVERY_EMAIL",
			value1 = "Delivery Email");

		Type(
			locator1 = "TextInput#SUBJECT",
			value1 = "${deliverySubject}");

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON");

		Type.typeCodeMirrorEditorNoError(
			locator1 = "CKEditor#BODY_FIELD_SOURCE_ON",
			value1 = "${deliveryBody}");

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON");

		PortletEntry.save();
	}

	macro configureEmailFrom {
		Navigator.gotoNavTab(navTab = "Email From");

		Type(
			locator1 = "TextInput#EMAIL_FROM_NAME",
			value1 = "${emailFromName}");

		Type(
			locator1 = "TextInput#EMAIL_FROM_ADDRESS",
			value1 = "${emailFromAddress}");

		PortletEntry.save();
	}

	macro configureNotificationsEmail {
		AssertClick(
			locator1 = "ReportsAdminConfiguration#NAVIGATION_NOTIFICATIONS_EMAIL",
			value1 = "Notifications Email");

		Type(
			locator1 = "ReportsAdminConfiguration#NOTIFICATIONS_EMAIL_SUBJECT_FIELD",
			value1 = "${notificationSubject}");

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON_2");

		Type.typeCodeMirrorEditorNoError(
			locator1 = "CKEditor#BODY_FIELD_SOURCE_ON",
			value1 = "${notificationBody}");

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON_2");

		PortletEntry.save();
	}

	macro deleteReportEntryFile {
		var key_reportsFileName = "${reportsFileName}";

		AssertTextEquals(
			locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE",
			value1 = "${reportsFileName}");

		LexiconEntry.openEntryMenu(rowEntry = "${reportsFileName}");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE");
	}

	macro deliverReportEntryFile {
		var key_reportsFileName = "${reportsFileName}";

		AssertTextEquals(
			locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE",
			value1 = "${reportsFileName}");

		LexiconEntry.openEntryMenu(rowEntry = "${reportsFileName}");

		AssertClick(
			locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_MENULIST_DELIVER_REPORT",
			value1 = "Deliver Report");

		AssertTextEquals(
			locator1 = "ReportsAdminDeliverReport#REPORT_NAME",
			value1 = "Report Name ${reportsFileName}");

		Type(
			locator1 = "ReportsAdminDeliverReport#EMAIL_RECIPIENT_FIELD",
			value1 = "${emailRecipientAddress}");

		AssertClick(
			locator1 = "ReportsAdminDeliverReport#DELIVER_BUTTON",
			value1 = "Deliver");

		Alert.viewSuccessMessage();
	}

	macro downloadReportEntryFile {
		var key_reportsFileName = "${reportsFileName}";

		AssertElementPresent(locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE");

		AssertTextEquals(
			locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE",
			value1 = "${reportsFileName}");

		LexiconEntry.openEntryMenu(rowEntry = "${reportsFileName}");

		AssertClick(
			locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_MENULIST_DOWNLOAD",
			value1 = "Download");

		Pause(locator1 = "2000");

		takeScreenshot();

		if ("${reportFormat}" == "pdf") {
			if ("${reportsFileName}" == "reports_admin_template_source_sample_list_type.pdf") {
				SikuliAssertElementPresent(locator1 = "ReportsAdmin#REPORT_PDF_LIST_TYPE_PNG");
			}
			else {
				SikuliAssertElementPresent(locator1 = "ReportsAdmin#REPORT_PDF_CLASS_NAME_PNG");
			}
		}
	}

	macro gotoConfiguration {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");
	}

	macro gotoDefinitions {
		AssertClick(
			locator1 = "ReportsAdmin#NAVIGATION_DEFINITIONS",
			value1 = "Definitions");
	}

	macro gotoSources {
		AssertClick(
			locator1 = "ReportsAdmin#NAVIGATION_SOURCES",
			value1 = "Sources");
	}

	macro tearDownConfiguration {
		ReportsAdmin.gotoConfiguration();

		Navigator.gotoNavTab(navTab = "Email From");

		Type(
			locator1 = "TextInput#EMAIL_FROM_NAME",
			value1 = "Joe Bloggs");

		Type(
			locator1 = "TextInput#EMAIL_FROM_ADDRESS",
			value1 = "test@liferay.com");

		PortletEntry.save();

		IFrame.closeFrame();

		ReportsAdmin.gotoConfiguration();

		AssertClick(
			locator1 = "ReportsAdminConfiguration#NAVIGATION_DELIVERY_EMAIL",
			value1 = "Delivery Email");

		var deliverySubject = '''New Report: [$REPORT_NAME$]''';

		Type(
			locator1 = "TextInput#SUBJECT",
			value1 = "${deliverySubject}");

		var deliveryBody = '''
Dear [$TO_NAME$],<br /><br />

Please review the attached report.<br /><br />

Sincerely,<br />
[$FROM_NAME$]<br />
[$FROM_ADDRESS$]		<br />''';

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON");

		Type.typeCodeMirrorEditorNoError(
			locator1 = "CKEditor#BODY_FIELD_SOURCE_ON",
			value1 = "${deliveryBody}");

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON");

		PortletEntry.save();

		IFrame.closeFrame();

		ReportsAdmin.gotoConfiguration();

		AssertClick(
			locator1 = "ReportsAdminConfiguration#NAVIGATION_NOTIFICATIONS_EMAIL",
			value1 = "Notifications Email");

		var notificationSubject = '''New Report: [$REPORT_NAME$]''';

		Type(
			locator1 = "ReportsAdminConfiguration#NOTIFICATIONS_EMAIL_SUBJECT_FIELD",
			value1 = "${notificationSubject}");

		var notificationBody = '''
Dear [$TO_NAME$],<br /><br />

You have a new <a href="[$PAGE_URL$]">report</a>.<br /><br />

Sincerely,<br />
[$FROM_NAME$]<br />
[$FROM_ADDRESS$]		<br />''';

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON_2");

		Type.typeCodeMirrorEditorNoError(
			locator1 = "CKEditor#BODY_FIELD_SOURCE_ON",
			value1 = "${notificationBody}");

		Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON_2");

		PortletEntry.save();
	}

	macro tearDownDefinitions {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Reports Admin");

		ReportsAdmin.gotoDefinitions();

		while (IsElementPresent(locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_ACTIONS_1")) {
			Click(locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_ACTIONS_1");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}

		AssertTextEquals(
			locator1 = "ReportsAdmin#EMPTY_TABLE",
			value1 = "There are no definitions.");
	}

	macro tearDownReports {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Reports Admin");

		while (IsElementPresent(locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_ACTIONS_1")) {
			Click(locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_ACTIONS_1");

			AssertClickNoError(
				key_menuItem = "Delete",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}

		AssertTextEquals(
			locator1 = "ReportsAdmin#EMPTY_TABLE",
			value1 = "There are no reports.");
	}

	macro tearDownSources {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Reports Admin");

		ReportsAdmin.gotoSources();

		while (IsElementPresent(locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_ACTIONS_1")) {
			Click(locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_ACTIONS_1");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}

		AssertTextEquals(
			locator1 = "ReportsAdmin#EMPTY_TABLE",
			value1 = "There are no sources.");
	}

	macro testDatabaseConnection {
		AssertClick(
			locator1 = "ReportsAdminEditSource#TEST_DATABASE_CONNECTION_BUTTON",
			value1 = "Test Database Connection");

		AssertTextEquals(
			locator1 = "ReportsAdminEditSource#TEST_DATABASE_CONNECTION_SUCCESS_MESSAGE",
			value1 = "You have successfully connected to the database.");

		AssertClick(
			locator1 = "Button#CLOSE",
			value1 = "Close");
	}

	macro viewDefinitionParameterFields {
		AssertElementPresent(locator1 = "ReportsAdminEditReportDefinition#REPORT_DEFINITION_PARAMETERS_KEY");

		AssertElementPresent(locator1 = "ReportsAdminEditReportDefinition#REPORT_DEFINITION_PARAMETERS_VALUE");

		AssertElementPresent(locator1 = "ReportsAdminEditReportDefinition#REPORT_DEFINITION_PARAMETERS_TYPE");
	}

	macro viewNoReportEntryFile {
		var key_reportsFileName = "${reportsFileName}";

		AssertElementNotPresent(locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE");
	}

	macro viewReportEntry {
		var key_reportsDefinitionName = "${reportsDefinitionName}";

		AssertClick(
			locator1 = "ReportsAdmin#REPORTS_ENTRY_TABLE_DEFINITION_NAME",
			value1 = "${reportsDefinitionName}");
	}

	macro viewReportEntryFields {
		var key_reportsDefinitionName = "${reportsDefinitionName}";

		AssertTextEquals(
			locator1 = "ReportsAdminViewReportEntry#DEFINITION_NAME_FIELD",
			value1 = "Definition Name ${reportsDefinitionName}");

		var key_reportsDefinitionDescription = "${reportsDefinitionDescription}";

		AssertTextEquals(
			locator1 = "ReportsAdminViewReportEntry#DESCRIPTION_FIELD",
			value1 = "Description ${reportsDefinitionDescription}");

		var key_dataSource = "${dataSource}";

		AssertTextEquals(
			locator1 = "ReportsAdminViewReportEntry#DATA_SOURCE_NAME_FIELD",
			value1 = "Data Source Name ${dataSource}");

		if (isSet(reportParameters)) {
			AssertTextEquals(
				locator1 = "ReportsAdminViewReportEntry#REPORT_PARAMETERS_FIELD",
				value1 = "Report Parameters [${reportParameterse}]");
		}
		else {
			AssertTextEquals(
				locator1 = "Panel#ENTRY_REPORT_PARAMETERS",
				value1 = "Report Parameters");
		}

		var key_userName = "${userName}";

		AssertTextEquals(
			locator1 = "ReportsAdminViewReportEntry#REQUESTED_BY_FIELD",
			value1 = "Requested By ${userName}");

		var key_reportsFileName = "${reportsFileName}";

		if ("${scheduled}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE",
				value1 = "${reportsFileName}");
		}
		else {
			AssertTextEquals(
				locator1 = "ReportsAdminViewReportEntry#ENTRY_FILE_TABLE_FILE",
				value1 = "${reportsFileName}");
		}
	}

}