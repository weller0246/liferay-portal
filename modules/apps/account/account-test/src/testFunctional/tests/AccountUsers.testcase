@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Accounts";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test adds an account user via Account Users portlet"
	@priority = "5"
	test CanAddAccountUser {
		property portal.acceptance = "true";

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@description = "This test adds a new user via the Users tab of an Account"
	@priority = "4"
	test CanAddAccountUserViaAssignUser {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Add account user via assign user.",
			accountName = "Assign Account User");

		Accounts.addNewUserToBusinessAccount(
			accountName = "Assign Account User",
			assigneeName = "userfn",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Assign Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn");
	}

	@description = "This test assigns an existing user to account through the Users tab"
	@priority = "4"
	test CanAssignExistingUserToAccount {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an account with user.",
			accountName = "Account Name");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "This is a test for adding user to account.",
			accountName = "Account with Exist User",
			domainNames = "liferay.com");

		Accounts.assignUsers(
			accountName = "Account with Exist User",
			assigneeName = "userfn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Exist User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn");
	}

	@description = "This test deactivates an active user"
	@priority = "4"
	test CanDeactivateUser {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		AccountUsers.deactivateUser(userFirstName = "userfn");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryStatus(
			rowEntry = "userfn",
			rowStatus = "Inactive");
	}

	@description = "This test edits a user via Account Users portlet"
	@priority = "5"
	test CanEditAccountUser {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.editUser(
			accountUser = "userfn userln",
			editEmailAddress = "edituserfn@liferay.com",
			editFirstName = "edituserfn",
			password = "test");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "edituserfn userln");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "edituserfn@liferay.com");

		Accounts.viewAssignee(assigneeName = "edituserfn");
	}

	@description = "This is a use case for LPS-107598 and LPS-129713"
	@priority = "3"
	test CanFilterAccountUserInTheUsersAdminPortlet {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		LexiconEntry.viewEntryName(rowEntry = "userac userac");

		ManagementBar.setFilterAndOrder(filterBy = "Company Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		LexiconEntry.viewNoEntry(rowEntry = "userac userac");

		ManagementBar.setFilterAndOrder(filterBy = "Account Users");

		LexiconEntry.viewEntryName(rowEntry = "userac userac");

		LexiconEntry.viewNoEntry(rowEntry = "userfn userln");
	}

	@description = "This filters users by accounts, choosing a specific account to view"
	@priority = "3"
	test CanFilterByAccounts {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a Business Account.",
			accountName = "Business Account");

		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Business Account",
			userEmailAddress = "businessuser@liferay.com",
			userFirstName = "business",
			userLastName = "user",
			userScreenName = "businessuser");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Business Account",
			userEmailAddress = "userbusiness@liferay.com",
			userFirstName = "user",
			userLastName = "business",
			userScreenName = "userbusiness");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Person Account",
			userEmailAddress = "personuser@liferay.com",
			userFirstName = "person",
			userLastName = "user",
			userScreenName = "personuser");

		AccountUsers.openAccountUsersAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Accounts");

		AccountUsers.selectAccounts(accountName = "Person Account");

		LexiconEntry.viewEntryName(rowEntry = "person user");

		LexiconEntry.viewNoEntry(rowEntry = "user business");

		LexiconEntry.viewNoEntry(rowEntry = "business user");

		ManagementBar.setFilterAndOrder(filterBy = "Accounts");

		AccountUsers.selectAccounts(accountName = "Business Account");

		LexiconEntry.viewEntryName(rowEntry = "business user");

		LexiconEntry.viewEntryName(rowEntry = "user business");

		LexiconEntry.viewNoEntry(rowEntry = "person user");
	}

	@description = "This filters users that do not have any assigned account"
	@priority = "3"
	test CanFilterByNoAssignedAccount {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Account with User",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.removeAccount(
			accountName = "Account with User",
			accountUser = "userfn1 userln1");

		AccountUsers.openAccountUsersAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "No Assigned Account");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewNoEntry(rowEntry = "userfn2 userln2");

		ManagementBar.setFilterAndOrder(filterBy = "All");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");
	}

	@description = "This filters users by status: active and inactive"
	@priority = "3"
	test CanFilterByStatus {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Filter AccountUser in Account By Navigation.",
			accountName = "Filter Account User");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Filter Account User",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.deactivateUser(userFirstName = "userfn2");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Filter Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		ManagementBar.setFilterAndOrder(filterBy = "Active");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");
	}

	@description = "This test impersonates an account user via Account Users portlet"
	@priority = "4"
	test CanImpersonateUser {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		User.impersonateCP(
			siteName = "${siteName}",
			userName = "userfn");
	}

	@description = "This test removes a user from account via Users tab"
	@priority = "5"
	test CanRemoveUserFromAccount {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a test to remove account user.",
			accountName = "Remove Account User");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Remove Account User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.removeAssignee(
			assigneeName = "userfn",
			assigneeType = "Users");

		Accounts.openAccountsAdmin();

		Accounts.viewNoAssignee(
			accountName = "Remove Account User",
			assigneeType = "Users");
	}

}