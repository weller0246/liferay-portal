@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test deletes an account group."
	@priority = "4"
	test CanDeleteAnAccountGroup {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Groups");

		AccountGroups.addCP(
			accountGroupDescription = "This is an Account Group to make search field works.",
			accountGroupName = "Search AG");

		Navigator.gotoBack();

		AccountGroups.addCP(
			accountGroupDescription = "This is an Account Group for delete testing.",
			accountGroupName = "Delete AG");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "Delete AG");

		LexiconEntry.delete(rowEntry = "Delete AG");

		Search.searchCP(searchTerm = "Delete");

		AccountGroups.viewDefault(tabName = "Account Groups");
	}

	@description = "This test edit an account group name and description."
	@priority = "4"
	test CanEditAnAccountGroup {
		AccountGroups.openAccountGroupsAdmin();

		AccountGroups.addCP(
			accountGroupDescription = "Account Group Description",
			accountGroupName = "Account Group Name");

		AccountGroups.editCP(
			accountGroupDescriptionEdit = "Edited Description",
			accountGroupName = "Account Group Name",
			accountGroupNameEdit = "Edited Account Group Name");

		AccountGroups.openAccountGroupsAdmin();

		AccountGroups.viewEntry(
			accountGroupDescription = "Edited Description",
			accountGroupName = "Edited Account Group Name");
	}

	@description = "This test assigns an account to Account Group"
	@priority = "4"
	test CanManuallyAssignAccountToGroup {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account for Account Group",
			accountEntryType = "Business");

		AccountGroups.openAccountGroupsAdmin();

		AccountGroups.addCP(
			accountGroupDescription = "This is an Account Group.",
			accountGroupName = "Test Account Group");

		Navigator.gotoBack();

		LexiconEntry.gotoEntry(rowEntry = "Test Account Group");

		AccountGroups.viewDefault(tabName = "Accounts");

		AccountGroups.addAssignee(
			accountGroupName = "Test Account Group",
			assigneeNames = "Account for Account Group",
			assigneeType = "Accounts");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Test Account Group");

		AccountGroups.viewAssignee(assigneeName = "Account for Account Group");
	}

	@description = "This is a use case for LPS-122414. It asserts the number of accounts in Accounts Group view is accurate."
	@priority = "4"
	test CanManuallyAssignMultipleAccountsToGroup {
		for (var accountNumber : list "1,2,3,4,5") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts ${accountNumber} for AG",
				accountEntryType = "Business");
		}

		AccountGroups.openAccountGroupsAdmin();

		AccountGroups.addCP(
			accountGroupDescription = "This is an Account Group with multiple accounts.",
			accountGroupName = "Multiple Accounts AG");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Multiple Accounts AG");

		AccountGroups.viewDefault(tabName = "Accounts");

		AccountGroups.addAssignee(
			accountGroupName = "Multiple Accounts AG",
			assigneeNames = "Accounts 1 for AG",
			assigneeType = "Accounts");

		AccountGroups.openAccountGroupsAdmin();

		AccountGroups.viewEntry(
			accountGroupAccount = "1",
			accountGroupDescription = "This is an Account Group with multiple accounts.",
			accountGroupName = "Multiple Accounts AG");

		LexiconEntry.gotoEntry(rowEntry = "Multiple Accounts AG");

		AccountGroups.addAssignee(
			accountGroupName = "Multiple Accounts AG",
			assigneeAll = "true",
			assigneeNames = "Accounts ${accountNumber} for AG",
			assigneeType = "Accounts");

		AccountGroups.openAccountGroupsAdmin();

		AccountGroups.viewEntry(
			accountGroupAccount = "5",
			accountGroupDescription = "This is an Account Group with multiple accounts.",
			accountGroupName = "Multiple Accounts AG");
	}

	@description = "This test removes an account from Account Group."
	@priority = "4"
	test CanRemoveAccountFromGroup {
		for (var accountNumber : list "1,2,3") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Delete Accounts ${accountNumber} from AG",
				accountEntryType = "Business");
		}

		AccountGroups.openAccountGroupsAdmin();

		AccountGroups.addCP(
			accountGroupDescription = "This is an Account Group to test remove account.",
			accountGroupName = "Remove Account AG");

		Navigator.gotoBack();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account AG");

		AccountGroups.addAssignee(
			accountGroupName = "Remove Account AG",
			assigneeAll = "All",
			assigneeNames = "Delete Accounts 1 from AG,Delete Accounts 2 from AG,Delete Accounts 3 from AG",
			assigneeType = "Accounts");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account AG");

		AccountGroups.removeAccount(accountGroupName = "Delete Accounts 1 from AG");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts 1 from AG");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account AG");

		AccountGroups.removeAccount(
			accountGroupName = "Delete Accounts 2 from AG",
			removeType = "Toolbar Remove Icon");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts 2 from AG");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account AG");

		AccountGroups.removeAccount(
			accountGroupName = "Delete Accounts 3 from AG",
			removeType = "Management Toolbar");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts 3 from AG");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account AG");

		AccountGroups.viewDefault(tabName = "Accounts");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		for (var accountNumber : list "1,2,3") {
			LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts ${accountNumber} from AG");
		}

		Accounts.openAccountsAdmin();

		for (var rowEntry : list "Delete Accounts 1 from AG,Delete Accounts 2 from AG,Delete Accounts 3 from AG") {
			LexiconEntry.viewEntryName(rowEntry = "${rowEntry}");
		}
	}

}