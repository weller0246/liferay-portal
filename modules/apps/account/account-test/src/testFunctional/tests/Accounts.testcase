@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Accounts";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-101893. It asserts all accounts display properly across pages."
	@priority = "4"
	test AccountsDisplayWhenChangingPagination {
		for (var accountNum : list "1,2,3,4,5,6") {
			Accounts.openAccountsAdmin();

			Accounts.addBusinessAccount(accountName = "Accounts Name ${accountNum}");
		}

		Accounts.openAccountsAdmin();

		Pagination.changePagination(itemsPerPage = "4");

		for (var accountNum : list "1,2,3,4") {
			LexiconEntry.viewEntryName(rowEntry = "Accounts Name ${accountNum}");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		for (var accountNum : list "5,6") {
			LexiconEntry.viewEntryName(rowEntry = "Accounts Name ${accountNum}");
		}

		Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
	}

	@description = "This test makes sure that only one user can be assigned to a Person Account. When you add another person to a Person Account with assigned user, it will only replace the existing user and not add another one."
	@priority = "4"
	test AddingSecondUserToPersonAccountWillReplaceFirstUser {
		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account");

		Accounts.addNewUserToPersonAccount(
			accountName = "Person Account",
			accountUserName = "userfn1",
			userEmailAddress = "userfn1@liferay.com",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Accounts.addNewUserToPersonAccount(
			accountName = "Person Account",
			accountUserName = "userfn2",
			userEmailAddress = "userfn2@liferay.com",
			userLastName = "userln2",
			userScreenName = "usersn2");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.viewEntryAccounts(
			accountName = "Person Account",
			accountUserName = "userfn2");

		AccountUsers.viewEntryAccounts(
			accountName = "No Assigned Account",
			accountUserName = "userfn1");
	}

	@description = "This test adds a Person Account by changing the type in the dropdown upon creation."
	@priority = "4"
	test CanAddAPersonAccount {
		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Person Account");

		Accounts.viewAccountDetails(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account",
			accountType = "Person");
	}

	@description = "This test asserts that users can add more than one domain to a business account."
	@priority = "4"
	test CanAddMultipleDomainsToAccount {
		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "Account with Multi Domains",
			domainNames = "liferay.com,Google.com,si-na.com,9teen.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Multi Domains");

		for (var domainName : list "liferay.com,Google.com,si-na.com,9teen.com") {
			AssertElementPresent(
				key_domainName = "${domainName}",
				locator1 = "Account#DOMAIN_TABLE_NAME");
		}
	}

	@description = "This test adds an organization as an assignee of a business account."
	@priority = "4"
	test CanAssignOrganizationToAccount {
		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a test for adding organization to account.",
			accountName = "Account with Organization");

		Accounts.assignOrganizations(
			accountName = "Account with Organization",
			assigneeName = "Organization for Account");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Organization");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.viewAssignee(assigneeName = "Organization for Account");
	}

	@description = "This test asserts that address type can be changed from Billing to Shipping and vice versa."
	@priority = "5"
	test CanChangeAddressType {
		property portal.acceptance = "true";

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a test of changing account address type.",
			accountName = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressDescription = "Address of DL office.",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "1005 High-Tech Zone",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");

		for (var rowAny : list "537 Huangpu Road Taide Building,Dalian,Liaoning Sheng,116023,Billing and Shipping") {
			LexiconEntry.viewEntryContent(
				rowAny = "${rowAny}",
				rowEntry = "Liferay Dalian Software Co., Ltd.");
		}

		Accounts.editAddress(
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressType = "Shipping");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		for (var rowAny : list "537 Huangpu Road Taide Building,Dalian,Liaoning Sheng,116023,Shipping") {
			LexiconEntry.viewEntryContent(
				rowAny = "${rowAny}",
				rowEntry = "Liferay Dalian Software Co., Ltd.");
		}

		Accounts.editAddress(
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressType = "Billing");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		for (var rowAny : list "537 Huangpu Road Taide Building,Dalian,Liaoning Sheng,116023,Billing") {
			LexiconEntry.viewEntryContent(
				rowAny = "${rowAny}",
				rowEntry = "Liferay Dalian Software Co., Ltd.");
		}
	}

	@description = "This test deactivates an active account and asserts account displays in correct filter."
	@priority = "4"
	test CanDeactivateAccount {
		for (var accountNumber : list "1,2,3") {
			Accounts.openAccountsAdmin();

			Accounts.addBusinessAccount(
				accountDescription = "Accounts Name ${accountNumber} Description",
				accountName = "Accounts Name ${accountNumber} for Test");
		}

		Accounts.openAccountsAdmin();

		Accounts.deactivateAccount(accountName = "Accounts Name 1 for Test");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 1 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deactivateAccount(
			accountName = "Accounts Name 2 for Test",
			deactivateType = "Hide Icon");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 2 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deactivateAccount(
			accountName = "Accounts Name 3 for Test",
			deactivateType = "Management Toolbar");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 3 for Test");
	}

	@description = "This test asserts an account can be deleted successfully via management toolbar and menu item."
	@priority = "5"
	test CanDeleteAccount {
		property portal.acceptance = "true";

		for (var accountNumber : list "1,2,3") {
			Accounts.openAccountsAdmin();

			Accounts.addBusinessAccount(
				accountDescription = "Accounts Name ${accountNumber} Description",
				accountName = "Delete Accounts Name ${accountNumber} for Test");
		}

		Accounts.openAccountsAdmin();

		Accounts.deleteAccount(accountName = "Delete Accounts Name 1 for Test");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 1 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deleteAccount(
			accountName = "Delete Accounts Name 2 for Test",
			deleteType = "Delete Icon");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 2 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deleteAccount(
			accountName = "Delete Accounts Name 3 for Test",
			deleteType = "Management Toolbar");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 3 for Test");

		Accounts.openAccountsAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		for (var accountNumber : list "1,2,3") {
			LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name ${accountNumber} for Test");
		}
	}

	@description = "This test asserts address deletes successfully."
	@priority = "3"
	test CanDeleteAddress {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Delete address for account.",
			accountName = "Account Delete Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressDescription = "Address of DL office.",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Delete Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");

		LexiconEntry.delete(
			menuItem = "Delete",
			rowEntry = "Liferay Dalian Software Co., Ltd.");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Delete Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewNoEntry(rowEntry = "Liferay Dalian Software Co., Ltd.");
	}

	@description = "This is a use case for LPS-101315. Deleting an inactive account will navigate you back to inactive filter."
	@priority = "3"
	test CanDeleteAnInactiveAccount {
		Accounts.openAccountsAdmin();

		Accounts.addInactiveBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		Accounts.openAccountsAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		Accounts.deleteAccount(accountName = "Accounts Name for Test");

		ManagementBar.viewFilterAndOrder(menuItem = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");
	}

	@description = "This test adds a custom field for an account entry and asserts field can be updated."
	@priority = "4"
	test CanEditAccountCustomField {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Custom Fields");

		CustomFields.addCP(
			customFieldName = "Text Field",
			customFieldType = "Input Field",
			customInputDataType = "Text",
			resourceName = "Account Entry");

		JSONAccountEntry.addAccountEntry(
			accountEntryDescription = "This is a test try to update the custom field of Account.",
			accountEntryName = "Accounts Name with Custom Field",
			accountEntryStatus = "Active",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		Accounts.editCP(
			accountName = "Accounts Name with Custom Field",
			accountNameEdit = "Edit with Custom Field",
			customFieldText = "Custom Field for Account");

		Accounts.openAccountsAdmin();

		Accounts.viewAccountDetails(
			accountName = "Edit with Custom Field",
			customFieldText = "Custom Field for Account");
	}

	@description = "This is a use case for LPS-101221. It updates an inactive account by clicking on its link and asserts user stays on the Inactive filter when you go back to Accounts list."
	@priority = "4"
	test CanEditInactiveAccount {
		Accounts.openAccountsAdmin();

		Accounts.addInactiveBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		Navigator.gotoBack();

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Accounts Name for Test",
			rowStatus = "Inactive");

		LexiconEntry.gotoEntry(rowEntry = "Accounts Name for Test");

		PortletEntry.inputName(name = "Update Accounts Name via Name Link");

		Button.clickSave();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Edit Update Accounts Name via Name Link");

		Navigator.gotoBack();

		ManagementBar.viewFilterAndOrder(menuItem = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name via Name Link");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Update Accounts Name via Name Link",
			rowStatus = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");
	}

	@description = "This test updates an account's name and description and asserts change saves successfully."
	@priority = "5"
	test CanEditNameAndDescription {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		AssertElementPresent(locator1 = "Icon#BACK");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Accounts Name for Test");

		Accounts.editCP(
			accountDescriptionEdit = "Update Accounts Name Description for Test",
			accountName = "Accounts Name for Test",
			accountNameEdit = "Update Accounts Name for Test",
			accountStatusEdit = "Inactive");

		Accounts.openAccountsAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Update Accounts Name for Test",
			rowStatus = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.gotoEntry(rowEntry = "Update Accounts Name for Test");

		PortletEntry.inputName(name = "Update Accounts Name via Name Link");

		Check.checkToggleSwitch(locator1 = "ToggleSwitch#ACCOUNT_STATUS");

		Button.clickSave();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Edit Update Accounts Name via Name Link");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name via Name Link");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Update Accounts Name via Name Link",
			rowStatus = "Active");

		LexiconEntry.viewNoEntry(rowEntry = "Update Accounts Name for Test");
	}

	@description = "This test asserts accounts are filtered by All Accounts by default. Changing filter to Business and Person shows accurate results."
	@priority = "3"
	test CanFilterAccountsByType {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a Business Account.",
			accountName = "Business Account");

		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account");

		Accounts.openAccountsAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Business");

		LexiconEntry.viewEntryName(rowEntry = "Business Account");

		LexiconEntry.viewNoEntry(rowEntry = "Person Account");

		ManagementBar.setFilterAndOrder(filterBy = "Person");

		LexiconEntry.viewEntryName(rowEntry = "Person Account");

		LexiconEntry.viewNoEntry(rowEntry = "Business Account");

		ManagementBar.setFilterAndOrder(filterBy = "All");

		LexiconEntry.viewEntryName(rowEntry = "Business Account");

		LexiconEntry.viewEntryName(rowEntry = "Person Account");
	}

	@description = "This test adds an address, sets it as default, and removes it as default"
	@priority = "3"
	test CanRemoveAddressAsDefault {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Remove address for account.",
			accountName = "Account Remove Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressDescription = "Address of DL office.",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Remove Address");

		for (var addressDataType : list "shipping,billing") {
			Accounts.setDefaultAddress(
				addressDataType = "${addressDataType}",
				addressName = "Liferay Dalian Software Co., Ltd.");

			Accounts.viewAddress(
				addressCity = "Dalian",
				addressCountry = "China",
				addressDataType = "${addressDataType}",
				addressName = "Liferay Dalian Software Co., Ltd.",
				addressPostalCode = "116023",
				addressRegion = "Liaoning Sheng",
				addressStreet1 = "537 Huangpu Road Taide Building,",
				addressStreet2 = "High-Tech Zone",
				addressStreet3 = "1005",
				phoneNumber = "+86 (0)411 88120855");
		}

		Accounts.removeAddress(
			accountName = "Account Remove Address",
			addressDataType = "billing");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Remove Address");

		Accounts.removeAddress(
			accountName = "Account Remove Address",
			addressDataType = "shipping");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Remove Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");
	}

	@description = "This test removes domain set to an account."
	@priority = "3"
	test CanRemoveDomainFromAccount {
		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "Remove Domain from the Account",
			accountName = "Remove Account Domain",
			domainNames = "liferay.com,Google.com");

		Accounts.openAccountsAdmin();

		Accounts.removeDomain(
			accountName = "Remove Account Domain",
			domainName = "Google.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account Domain");

		AssertElementPresent(
			key_domainName = "liferay.com",
			locator1 = "Account#DOMAIN_TABLE_NAME");

		AssertElementNotPresent(
			key_domainName = "Google.com",
			locator1 = "Account#DOMAIN_TABLE_NAME");
	}

	@description = "This test removes a blocked domain in Instance Settings."
	@priority = "4"
	test CanRemoveDomainFromBlacklist {
		AccountConfiguration.addBlockedEmailDomain(settingValues = "yahoo.com,blocked.com,google.com");

		for (var settingValue : list "yahoo.com,blocked.com,google.com") {
			SystemSettings.viewTextareaPartialText(
				settingName = "Blocked Email Domains",
				settingValue = "${settingValue}");
		}

		SystemSettings.editTextAreaSetting(
			settingName = "Blocked Email Domains",
			settingValue = "blocked.com");

		SystemSettings.saveConfiguration();

		SystemSettings.viewTextareaValue(
			fieldName = "blockedEmailDomains",
			fieldValue = "blocked.com");
	}

	@description = "This test removes an organization as an assignee of a business account."
	@priority = "5"
	test CanRemoveOrganizationFromBusinessAccount {
		property portal.acceptance = "true";

		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a test for unassign organization from account.",
			accountName = "Unassign Organization from Account");

		Accounts.assignOrganizations(
			accountName = "Unassign Organization from Account",
			assigneeName = "Organization for Account");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Unassign Organization from Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.removeAssignee(
			assigneeName = "Organization for Account",
			assigneeType = "Organizations");

		Accounts.openAccountsAdmin();

		Accounts.viewNoAssignee(
			accountName = "Unassign Organization from Account",
			assigneeType = "Organizations");
	}

	@description = "This test sets default shipping and default billing addresses for an account."
	@priority = "3"
	test CanSetDefaultAddresses {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Set default address for account.",
			accountName = "Account with Default Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressDescription = "Address of DL office.",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.addAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressDescription = "Address of Los Angeles (Global HQ) office.",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.addAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressDescription = "Address of Japan office.",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Shipping",
			phoneNumber = "+81 3-5456-5796");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Default Address");

		Accounts.setDefaultAddress(
			addressDataType = "shipping",
			addressName = "Liferay Japan K. K.");

		Accounts.viewAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressDataType = "shipping",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			phoneNumber = "+81 3-5456-5796");

		Accounts.setDefaultAddress(
			addressDataType = "billing",
			addressName = "Liferay, Inc.");

		Accounts.viewAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressDataType = "billing",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.setDefaultAddress(
			addressDataType = "shipping",
			addressName = "Liferay Dalian Software Co., Ltd.");

		Accounts.setDefaultAddress(
			addressDataType = "billing",
			addressName = "Liferay Dalian Software Co., Ltd.");

		for (var addressDataType : list "shipping,billing") {
			Accounts.viewAddress(
				addressCity = "Dalian",
				addressCountry = "China",
				addressDataType = "${addressDataType}",
				addressName = "Liferay Dalian Software Co., Ltd.",
				addressPostalCode = "116023",
				addressRegion = "Liaoning Sheng",
				addressStreet1 = "537 Huangpu Road Taide Building,",
				addressStreet2 = "High-Tech Zone",
				addressStreet3 = "1005",
				phoneNumber = "+86 (0)411 88120855");
		}
	}

	@description = "This tests canceling account creation will not save it."
	@priority = "3"
	test ClickingCancelOrBackWillNotSaveAccount {
		Accounts.openAccountsAdmin();

		LexiconEntry.gotoAdd();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Add Account");

		PortletEntry.inputName(name = "Cancel Accounts Name");

		Button.clickCancel();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Accounts");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Cancel Accounts Name");

		LexiconEntry.viewNoEntry(rowEntry = "Cancel Accounts Name");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoAdd();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Add Account");

		PortletEntry.inputName(name = "Back Icon Account");

		Navigator.gotoBack();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Accounts");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Back Icon Account");

		LexiconEntry.viewNoEntry(rowEntry = "Back Icon Account");
	}

	@description = "This is a use case for LPS-117171. It asserts that Filter By Navigation does not display when assigning a user to a Person Account since domains are not applicable for this type of account."
	@priority = "3"
	test NoFilterByNavigationForPersonAccount {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a Business Account.",
			accountName = "Business Account");

		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Business Account",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		Accounts.openAccountsAdmin();

		Accounts.gotoEdit(accountName = "Person Account");

		AssertClick(
			locator1 = "Account#USER_SELECT",
			value1 = "Select");

		SelectFrame(locator1 = "IFrame#ASSIGN_USER");

		ManagementBar.viewNoSubheaderInFilterAndOrder(subheaderItem = "Filter by Navigation");
	}

	@description = "This test sets a valid domain for a business account. It adds a user with a same domain and asserts no warning displays."
	@priority = "3"
	test NoWarningDisplaysWhenAddingAUserWithValidDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "AM Account",
			domainNames = "liferay.com,Google.com,9teen.com");

		AccountConfiguration.addAccountManager(
			accountName = "AM Account",
			orgName = "AM Organization",
			orgRoleTitle = "Account Manager",
			userEmailAddress = "useramea@liferay.com",
			userFirstName = "useramfn",
			userLastName = "useramln",
			userScreenName = "useramsn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "useramea@liferay.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.addNewUserWithSameDomain(
			accountName = "AM Account",
			assigneeName = "userfn",
			emailDomainName = "9teen.com",
			userEmailAddress = "userea@9teen.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn",
			validDomainNames = "liferay.com,Google.com,9teen.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@description = "This test replaces user in Person Account with another existing user. It asserts that first user was replaced by the second user and isn't assigned to the account anymore."
	@priority = "5"
	test SelectingUserWillReplaceExistingUserInPersonAccount {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is a Business Account.",
			accountName = "Business Account");

		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Business Account",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		Accounts.gotoEdit(accountName = "Person Account");

		for (var navTab : list "Details,Organizations,Roles") {
			Accounts.viewAssigneeTab(navTab = "${navTab}");
		}

		Accounts.viewNoAssigneeTab(navTab = "Users");

		Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn1");

		Accounts.openAccountsAdmin();

		Accounts.gotoEdit(accountName = "Person Account");

		Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn2");

		AssertElementNotPresent(
			key_userName = "userfn1",
			locator1 = "Account#USER_TABLE_NAME");
	}

	@priority = "5"
	test Smoke {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addBusinessAccount(
			accountName = "Accounts Name for Test",
			accountTaxID = "Z9870654786390342199899Y");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Accounts Name for Test");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Accounts Name for Test",
			rowStatus = "Active");

		Accounts.viewAccountDetails(
			accountName = "Accounts Name for Test",
			accountTaxID = "Z9870654786390342199899Y");
	}

	@description = "This test assigns a user to an account with valid domain set. Manager can filter valid domain users and all users when assigning."
	@priority = "3"
	test UsersWithValidAndInvalidDomainsAreFilteredWhenAssigningUsers {
		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "This is an account with domain",
			accountName = "Account with Domain",
			domainNames = "liferay.com");

		Navigator.gotoBack();

		Accounts.addBusinessAccount(
			accountDescription = "This is an account without domain",
			accountName = "Account no Domain");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account no Domain",
			userEmailAddress = "userea1@different.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account no Domain",
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account no Domain");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		for (var assigneeName : list "userfn1,userfn2") {
			Accounts.viewAssignee(assigneeName = "${assigneeName}");
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Domain");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.gotoAdd();

		Pause(locator1 = "3000");

		SelectFrame(
			key_title = "Assign Users to Account with Domain",
			locator1 = "IFrame#MODAL_ANY");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		LexiconEntry.viewNoEntry(rowEntry = "userfn1 userln1");

		ManagementBar.setFilterAndOrder(filterBy = "All Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		PortletEntry.selectAll();

		SelectFrameTop();

		Button.click(button = "Assign");

		Alert.viewSuccessMessage();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Domain");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");
	}

	@description = "This test sets a valid domain for a business account. It adds a user with a different domain and asserts that warning displays when a user attempts to do so."
	@priority = "3"
	test WarningDisplaysWhenAddingAUserWithInvalidDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "AM Account",
			domainNames = "liferay.com,Google.com,9teen.com");

		AccountConfiguration.addAccountManager(
			accountName = "AM Account",
			orgName = "AM Organization",
			orgRoleTitle = "Account Manager",
			userEmailAddress = "useramea@liferay.com",
			userFirstName = "useramfn",
			userLastName = "useramln",
			userScreenName = "useramsn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "useramea@liferay.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.addNewUserWithInvalidDomain(
			accountName = "AM Account",
			assigneeName = "userfn",
			emailDomainName = "nodomain.com",
			userEmailAddress = "userea@nodomain.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@description = "This test adds a blocked domain in instance settings. Warning will display when adding a user with blocked domain."
	@priority = "4"
	test WarningDisplaysWhenAddingUserWithBlockedEmailDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		AccountConfiguration.enableAccountEmailDomain();

		AccountConfiguration.addBlockedEmailDomain(settingValues = "yahoo.com,blocked.com");

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "AM Account",
			domainNames = "liferay.com,Google.com");

		AccountConfiguration.addAccountManager(
			accountName = "AM Account",
			orgName = "AM Organization",
			orgRoleTitle = "Account Manager",
			userEmailAddress = "useramea@liferay.com",
			userFirstName = "useramfn",
			userLastName = "useramln",
			userScreenName = "useramsn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "useramea@liferay.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.addNewUserWithBlockedDomain(
			accountName = "AM Account",
			assigneeName = "userfn",
			emailDomainName = "blocked.com",
			userEmailAddress = "userea@blocked.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

}