definition {

	macro addFieldByDoubleClick {
		var key_fieldLabel = "${fieldType}";

		var iterator = "0";
		var maxRetryNumber = "3";

		while ((IsElementNotPresent(locator1 = "FormViewBuilder#SIDEBAR_BASIC_TAB")) && ("${iterator}" != "${maxRetryNumber}")) {
			DoubleClick(locator1 = "FormViewBuilder#SIDEBAR_FIELD_LABEL");

			Pause(locator1 = "1000");

			if ("${iterator}" == "${maxRetryNumber}") {
				echo("Couldn't add the field by double-click action, maximum retries number reached: ${iterator}");
			}

			var iterator = MathUtil.sum("${iterator}", "1");
		}

		AssertElementPresent(locator1 = "FormViewBuilder#SIDEBAR_BASIC_TAB");
	}

	macro addFieldByDoubleClickFromObjectSidebar {
		var key_fieldLabel = "${fieldLabel}";

		DoubleClick(locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL");

		FormViewBuilder.validateFieldLabel(fieldLabel = "${fieldLabel}");
	}

	macro addFieldByDragAndDrop {
		Pause(locator1 = "10000");

		var key_fieldLabel = "${fieldType}";

		DragAndDrop.javaScriptDragAndDropToObject(
			locator1 = "FormViewBuilder#SIDEBAR_FIELD_LABEL",
			locator2 = "Form#ADD_FIELD_POSITION",
			value1 = "${fieldType}");

		AssertElementPresent(locator1 = "FormViewBuilder#SIDEBAR_BASIC_TAB");
	}

	macro addFieldSetByDragAndDrop {
		Pause(locator1 = "10000");

		var key_fieldLabel = "${fieldType}";

		DragAndDrop.dragAndDropToObject(
			locator1 = "FormViewBuilder#SIDEBAR_FIELD_LABEL",
			locator2 = "FormViewBuilder#EMPTY_FORM_FIELD",
			value1 = "${fieldType}");
	}

	macro addFieldToObject {
		Click(locator1 = "FormViewBuilder#OBJECT_FIELD_PLUS");

		DoubleClick(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		FormViewBuilder.validateFieldInObject(fieldLabel = "${fieldName}");
	}

	macro addFormView {
		while ( IsElementNotPresent(locator1 = "AppBuilder#NAVBAR") || IsElementNotPresent(locator1 = "FormViewBuilder#SIDEBAR_FIELDS_TAB") ) {
			Pause(locator1 = "1000");
		}

		if (IsElementPresent(locator1 = "AppBuilder#NAVBAR")) {
			FormViewBuilder.switchToFormViewTab();
			AppBuilderAdmin.add();
		}

		FormViewBuilder.addFieldByDoubleClick(fieldType = "${fieldType}");

		FormViewBuilder.setName(formViewName = "${formViewName}");

		FormViewBuilder.save();
	}

	macro addFormViewAndValidateFieldLabel {
		FormViewBuilder.addFormView(
			fieldType = "${fieldType}",
			formViewName = "${formViewName}");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "${formViewName}");

		AppBuilderAdmin.openItem(itemName = "${formViewName}");

		FormViewBuilder.validateFieldLabel(fieldLabel = "${fieldType}");

		AppBuilderAdmin.gotoBack();
	}

	macro addFormViewSameFields {
		if (IsElementPresent(locator1 = "AppBuilder#NAVBAR")) {
			FormViewBuilder.switchToFormViewTab();
			AppBuilderAdmin.add();
		}

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "${fieldLabel}");

		FormViewBuilder.setName(formViewName = "${formViewName}");

		FormViewBuilder.save();
	}

	macro addObjectByDragAndDrop {
		Pause(locator1 = "10000");

		var key_fieldLabel = "${fieldType}";

		DragAndDrop.javaScriptDragAndDropToObject(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL",
			locator2 = "FormViewBuilder#EMPTY_FORM_FIELD",
			value1 = "${fieldType}");
	}

	macro addRule {
		Click(locator1 = "FormViewBuilder#RULE_ADD_BUTTON");
	}

	macro addSelectTypeFieldOptions {
		var key_rowNumber = "${rowNumber}";

		Type(
			locator1 = "FormViewBuilder#OPTIONS_OPTION_VALUE_FIELD",
			value1 = "${optionValue}");
	}

	macro assertFieldIsNotPresentInFormBuilder {
		AssertElementNotPresent(
			locator1 = "FormViewBuilder#FIELD_IN_FORM_BUILDER",
			value1 = "${key_fieldLabel}");
	}

	macro assertHelpTextPresent {
		AssertTextEquals(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#HELP_TEXT_AT_APP_DEPLOYED",
			value1 = "${fieldValue}");
	}

	macro assertOptionIsPresentInFormBuilder {
		AssertElementPresent(
			locator1 = "FormViewBuilder#OPTIONS_PLACED_IN_FORM_BUILDER",
			value1 = "${key_optionLabel}");
	}

	macro assertPlaceholderTextAtSidebar {
		AssertTextEquals(
			locator1 = "FormViewBuilder#SIDEBAR_BASIC_PLACEHOLDER",
			value1 = "${placeHolder}");
	}

	macro assertPlaceholderTextFormField {
		AssertElementPresent(
			key_fieldLabel = "${key_fieldLabel}",
			key_placeHolder = "${placeHolder}",
			locator1 = "FormViewBuilder#FIELD_PLACEHOLDER_TEXT");
	}

	macro assertPredefinedDateValuePresent {
		AssertElementPresent(
			key_fieldName = "${fieldLabel}",
			key_fieldValue = "${fieldValue}",
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM_DATE_FIELD");
	}

	macro assertPredefinedValueAtSidebar {
		AssertTextEquals(
			locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_DATE",
			value1 = "${predefinedValue}");
	}

	macro assertRuleSaveButtonIsDisabled {
		AssertElementPresent(locator1 = "FormViewBuilder#RULE_BUILDER_SAVE_BUTTON_DISABLED");
	}

	macro assertTextPresent {
		AssertTextEquals(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#TEXT_FIELD",
			value1 = "${fieldValue}");
	}

	macro cancelButtonInDeleteFromObject {
		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_CANCEL_BUTTON");
	}

	macro cancelFieldSet {
		Click(locator1 = "FormViewBuilder#RULE_OR_FIELD_SET_BUILDER_CANCEL_BUTTON");
	}

	macro cancelRule {
		Click(locator1 = "FormViewBuilder#RULE_OR_FIELD_SET_BUILDER_CANCEL_BUTTON");
	}

	macro changeAppLanguageTo {
		Click(locator1 = "FormViewBuilder#SELECT_LANGUAGE_AT_APP_DEPLOYED");
	}

	macro checkSwitch {
		Check.checkToggleSwitch(
			key_switchOption = "${propertyName}",
			locator1 = "FormViewBuilder#SWITCH_OPTION");
	}

	macro clickActionMenuFieldset {
		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS");
	}

	macro clickActionMenuFieldsetEdit {
		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION_FIELDSET");
	}

	macro clickFieldLabel {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${fieldLabel}");
	}

	macro clickFieldLabelActionMenu {
		Click.javaScriptClick(locator1 = "FormViewBuilder#FIELD_LABEL_ACTION_MENU");
	}

	macro clickFieldLabelFromFieldset {
		Click(
			locator1 = "FormViewBuilder#FIELD_FROM_FIELDSET",
			value1 = "${key_fieldLabel}");
	}

	macro clickFieldLabelScope {
		var key_fieldLabelScope = "${fieldLabelScope}";

		Click(locator1 = "FormViewBuilder#FIELD_LABEL_SET_SCOPE");
	}

	macro clickInline {
		Click(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_INLINE");
	}

	macro clickLocalizableAppButton {
		Click(locator1 = "FormViewBuilder#LOCALIZABLE_APP_BUTTON");
	}

	macro clickRequiredEllipses {
		Click(locator1 = "FormViewBuilder#FORM_FIELD_REQUIRED_ELLIPSES");
	}

	macro clickRuleSidebar {
		Click(locator1 = "FormViewBuilder#EDIT_RULE_COLLAPSE");
	}

	macro clickShowAsSwitch {
		Click(locator1 = "FormViewBuilder#SIDEBAR_BASIC_SHOW_AS_SWITCH");
	}

	macro clickShowLabel {
		Click.javaScriptClick(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_SHOW_LABEL");
	}

	macro clickSingleSelectionFieldWithoutLabel {
		Click(locator1 = "FormViewBuilder#SINGLE_SELECTION_FIELD_WITHOUT_LABEL");
	}

	macro closeSidebar() {
		Click(locator1 = "FormViewBuilder#CLOSE_SIDEBAR");
	}

	macro confirmDeleteFromObject {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${key_fieldLabel}");

		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS");

		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
	}

	macro createFirstRule {
		Click(locator1 = "FormViewBuilder#CREATE_NEW_RULE_BUTTON");
	}

	macro deleteButtonInDeleteFromObject {
		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
	}

	macro deleteDisabledFieldSetEntry {
		var key_RowNumber = "${rowNumber}";

		Click(locator1 = "FormViewBuilder#FIELD_SET_DISABLED_ELLIPSIS_ACTION");

		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");

		AssertElementNotPresent(locator1 = "FormViewBuilder#FIELD_SET_DISABLED_ELLIPSIS_ACTION");
	}

	macro deleteFieldSetEntry {
		var key_RowNumber = "${rowNumber}";

		Click(locator1 = "FormViewBuilder#FIELD_SET_ELLIPSIS_ACTION");

		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");

		AssertElementNotPresent(locator1 = "FormViewBuilder#FIELD_SET_ELLIPSIS_ACTION");
	}

	macro deleteFromObjectViaX {
		MouseOver(
			key_fieldLabel = "${fieldName}",
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL");

		Click(
			fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#DELETE_FROM_OBJECT_X_BUTTON");
	}

	macro deleteObjectSidebarField {
		FormViewBuilder.deleteFromObjectViaX(fieldName = "${fieldLabel}");

		while (IsElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_OBJECT_MESSAGE")) {
			Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
		}

		while (IsElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_USED_OBJECT_MESSAGE")) {
			Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
		}

		FormViewBuilder.validateNoFieldLabel();

		FormViewBuilder.validateNoObjectFieldName();
	}

	macro deselectSelectWithMultipleOptions {
		for (var selectOption : list "${selectOptionsList}") {
			FormViewBuilder.disableCheckbox(
				fieldName = "${fieldName}",
				fieldValue = "${selectOption}");
		}
	}

	macro disableCheckbox {
		var key_fieldName = "${fieldName}";
		var key_fieldValue = "${fieldValue}";

		if (IsChecked(locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY")) {
			Click(locator1 = "FormViewBuilder#CHECKBOX_LABEL");
		}

		FormViewBuilder.viewCheckboxNotChecked(
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}");
	}

	macro dragAndDropFieldSet {
		DragAndDrop.javaScriptDragAndDropToObject(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			locator2 = "FormViewBuilder#FORM_FIELD_FIRST_ROW",
			value1 = "${fieldLabel}");
	}

	macro duplicateField {
		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");
	}

	macro editAutoComplete {
		AssertClick(
			locator1 = "FormViewBuilder#SIDEBAR_AUTOCOMPLETE_TAB",
			value1 = "Autocomplete");

		Form.enableAutocompleteConfiguration();

		FormFields.viewRadioValue(
			fieldName = "dataSourceType",
			fieldValue = "${key_optionValue}");
	}

	macro editColor {
		Type(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#COLOR_FIELD",
			value1 = "${fieldValue}");
	}

	macro editDate {
		Type(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#DATE_FIELD",
			value1 = "${fieldValue}");
	}

	macro editDisabledFieldSetEntry {
		var key_RowNumber = "${rowNumber}";

		Click(locator1 = "FormViewBuilder#FIELD_SET_DISABLED_ELLIPSIS_ACTION");

		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");
	}

	macro editFieldInObject {
		Click(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_RESULT");

		FormViewBuilder.setFieldLabel(fieldLabel = "${fieldLabel}");
	}

	macro editFieldLabel {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${fieldLabel}");

		Type(
			locator1 = "FormViewBuilder#SIDEBAR_BASIC_LABEL",
			value1 = "${label}");
	}

	macro editFieldSetEntry {
		var key_RowNumber = "${rowNumber}";

		Click(locator1 = "FormViewBuilder#FIELD_SET_ELLIPSIS_ACTION");

		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");
	}

	macro editFieldSetName {
		Type(
			locator1 = "FormViewBuilder#FIELD_SET_NAME",
			value1 = "${fieldSetName}");
	}

	macro editOptionsRow {
		var key_rowNumber = "${rowNumber}";

		Type.typeNotVisibleNoMouseOver(
			locator1 = "FormViewBuilder#OPTIONS_OPTION_VALUE_FIELD",
			value1 = "${optionValue}");

		AssertElementPresent(locator1 = "FormViewBuilder#OPTIONS_OPTION_NAME_FIELD");
	}

	macro editRuleName {
		Type(
			locator1 = "FormViewBuilder#RULE_BUILDER_NAME",
			value1 = "${ruleName}");
	}

	macro editRules {
		Click(locator1 = "FormViewBuilder#EDIT_RULE_COLLAPSE");
		AssertElementPresent(locator1 = "FormViewBuilder#EDIT_RULE_EXPANDED");
		Click(locator1 = "FormViewBuilder#EDIT_RULE");
	}

	macro editRulesDefault {
		Click(locator1 = "FormViewBuilder#RULE_BUILDER_DEFAULT_EDIT");
		Click(locator1 = "FormViewBuilder#RULE_BUILDER_EDIT");
	}

	macro editText {
		Type(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#TEXT_FIELD",
			value1 = "${fieldValue}");
	}

	macro enableCheckbox {
		var key_fieldName = "${fieldName}";
		var key_fieldValue = "${fieldValue}";

		if (IsNotChecked.isNotCheckedNotVisible(locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY")) {
			Click(locator1 = "FormViewBuilder#CHECKBOX_LABEL");
		}

		FormViewBuilder.viewCheckboxChecked(
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}");
	}

	macro enableCheckboxPredefined {
		var key_fieldName = "${fieldName}";

		if (IsNotChecked.isNotCheckedNotVisible(locator1 = "FormViewBuilder#CHECKBOX_PREDEFINED")) {
			Click(locator1 = "FormViewBuilder#CHECKBOX_PREDEFINED_LIST");
		}

		FormViewBuilder.viewCheckboxCheckedAtPredefinedValue(fieldName = "${fieldName}");
	}

	macro fieldEllipsisAction {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${key_fieldLabel}");

		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS");

		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		AssertElementNotPresent(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${key_fieldLabel}");
	}

	macro fieldEllipsisActionFieldset {
		Click(
			locator1 = "FormViewBuilder#FIELD_FROM_FIELDSET",
			value1 = "${key_fieldLabel}");

		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS_FIELDSET");

		Click(
			key_selectAction = "${selectAction}",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION_FIELDSET");

		AssertElementNotPresent(
			locator1 = "FormViewBuilder#FIELD_FROM_FIELDSET",
			value1 = "${key_fieldLabel}");
	}

	macro fieldEllipsisDelete {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${key_fieldLabel}");

		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS");

		Click(
			key_selectAction = "Delete from Object",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");
	}

	macro fieldLabelOptionsIsShown {
		AssertElementPresent(locator1 = "FormViewBuilder#FIELD_LABEL_ACTION_MENU");
	}

	macro gotoFields {
		Click(locator1 = "FormViewBuilder#FIELDS_TAB");
	}

	macro goToFieldsetsTab {
		Click(locator1 = "FormViewBuilder#FIELD_SETS_TAB");
	}

	macro gotoFirstFieldset {
		var key_fieldLabel = "${fieldLabel}";

		Click(
			locator1 = "FormViewBuilder#FORM_FIELD_FIRST_ITEM",
			value1 = "${fieldLabel}");
	}

	macro gotoRules {
		Click(locator1 = "FormViewBuilder#RULES_TAB");
	}

	macro openFormView {
		AppBuilderAdmin.openItem(itemName = "${formViewName}");
	}

	macro openFormViewFromFormList {
		Click(
			key_itemName = "${formViewName}",
			locator1 = "AppBuilder#ITEM_ON_THE_TABLE_CLICK");
	}

	macro openSidebar() {
		Click(locator1 = "FormViewBuilder#OPEN_SIDEBAR");
	}

	macro propagateChange {
		Click(locator1 = "FormViewBuilder#PROPAGATE_CHANGES");
	}

	macro ruleSave {
		Click(locator1 = "FormViewBuilder#RULE_BUILDER_SAVE_BUTTON");
	}

	macro save {
		AppBuilderAdmin.save();
	}

	macro saveButtonFieldset {
		Click(locator1 = "FormViewBuilder#FIELD_SET_SAVE_BUTTON");
	}

	macro searchObjectField {
		Click(locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_BUTTON");

		Type(
			locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_BOX",
			value1 = "${fieldValue}");
	}

	macro selectRadioOption {
		Click.clickNoMouseOverNoWaitForVisible(
			key_fieldName = "${fieldName}",
			key_radioOption = "${radioOption}",
			locator1 = "FormViewBuilder#RADIO_OPTION_LABEL");
	}

	macro selectRequiredRadioOption {
		Click.clickNoMouseOverNoWaitForVisible(
			key_optionLabel = "${optionLabel}",
			locator1 = "FormViewBuilder#OPTIONS_PLACED_IN_FORM_BUILDER_REQUIRED");
	}

	macro selectSelectOption {
		var key_fieldName = "${fieldName}";
		var key_selectOption = "${selectOption}";

		Click(
			locator1 = "FormViewBuilder#SELECT_FIELD",
			value1 = "${selectOption}");

		Click(
			locator1 = "FormViewBuilder#SELECT_FIELD_OPTIONS_LIST",
			value1 = "${selectOption}");
	}

	macro selectSelectOptionPredefined {
		var key_selectOption = "${selectOption}";

		Click(
			locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_SELECT_FROM_LIST",
			value1 = "${selectOption}");

		Click(
			locator1 = "FormViewBuilder#SELECT_FIELD_OPTIONS_LIST",
			value1 = "${selectOption}");
	}

	macro selectSelectWithMultipleOptions {
		for (var selectOption : list "${selectOptionsList}") {
			FormViewBuilder.enableCheckbox(
				fieldName = "${fieldName}",
				fieldValue = "${selectOption}");
		}
	}

	macro selectSelectWithMultipleOptionsPredefined {
		var key_fieldName = "${fieldName}";

		Click(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_SELECT_FROM_LIST");

		for (var selectOption : list "${selectOptionsList}") {
			FormViewBuilder.enableCheckboxPredefined(fieldName = "${selectOption}");

			Pause(locator1 = "500");
		}
	}

	macro setFieldHelpText {
		var key_fieldType = "tip";
		Type(
			locator1 = "FormViewBuilder#FIELD_LABEL_AT_SIDEBAR",
			value1 = "${fieldLabel}");

		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_VALUE",
			value1 = "${fieldLabel}");
	}

	macro setFieldLabel {
		var key_fieldType = "label";
		Type(
			locator1 = "FormViewBuilder#FIELD_LABEL_AT_SIDEBAR",
			value1 = "${fieldLabel}");

		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_VALUE",
			value1 = "${fieldLabel}");
	}

	macro setFieldLabelWithNoAssertion {
		var key_fieldType = "label";
		Type(
			locator1 = "FormViewBuilder#FIELD_LABEL_AT_SIDEBAR",
			value1 = "${fieldLabel}");
	}

	macro setFieldPredefinedDate {
		Type(
			locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_DATE",
			value1 = "${fieldValue}");
	}

	macro setFieldPredefinedText {
		Type(
			locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_TEXT",
			value1 = "${fieldValue}");
	}

	macro setFieldRepeatable {
		FormViewBuilder.checkSwitch(propertyName = "repeatable");
	}

	macro setFieldRequired {
		FormViewBuilder.checkSwitch(propertyName = "required");
	}

	macro setName {
		AppBuilderAdmin.setName(title = "${formViewName}");
	}

	macro setPlaceholder {
		Type(
			locator1 = "FormViewBuilder#SIDEBAR_BASIC_PLACEHOLDER",
			value1 = "${fieldValue}");
	}

	macro setRuleName {
		Type(
			locator1 = "FormViewBuilder#RULE_NAME_TEXT_FIELD",
			value1 = "${ruleName}");
	}

	macro setUpFieldSet {
		var key_fieldType = "${fieldType}";
		var key_fieldSetName = "${fieldSetName}";
		var key_fieldLabel = "${fieldLabel}";

		Click(locator1 = "FormViewBuilder#FIELD_SETS_TAB");

		Click(locator1 = "FormViewBuilder#CREATE_NEW_FIELD_SETS");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "${fieldType}");

		FormViewBuilder.setFieldLabel(fieldLabel = "${fieldLabel}");

		Type(
			locator1 = "FormViewBuilder#FIELD_SET_NAME",
			value1 = "${fieldSetName}");

		Click(locator1 = "FormViewBuilder#SIDEBAR_GO_BACK");

		Click(locator1 = "FormViewBuilder#FIELD_SET_SAVE_BUTTON");
	}

	macro setUpFieldSetOptions {
		var key_fieldType = "${fieldType}";
		var key_fieldSetName = "${fieldSetName}";

		Click(locator1 = "FormViewBuilder#FIELD_SETS_TAB");

		Click(locator1 = "FormViewBuilder#CREATE_NEW_FIELD_SETS");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "${fieldType1}");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Single${number}",
				optionValue = "Single ${number}",
				rowNumber = "${number}");
		}

		Type(
			locator1 = "FormViewBuilder#FIELD_SET_NAME",
			value1 = "${fieldSetName}");

		Click(locator1 = "FormViewBuilder#SIDEBAR_GO_BACK");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "${fieldType2}");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Option${number}",
				optionValue = "Option ${number}",
				rowNumber = "${number}");
		}

		Click(locator1 = "FormViewBuilder#SIDEBAR_GO_BACK");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "${fieldType3}");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Option${number}",
				optionValue = "Option ${number}",
				rowNumber = "${number}");
		}

		Click(locator1 = "FormViewBuilder#FIELD_SET_SAVE_BUTTON");
	}

	macro setUpTwoFieldSets {
		var key_fieldSetName = "${fieldSetName}";

		Click(locator1 = "FormViewBuilder#FIELD_SETS_TAB");

		Click(locator1 = "FormViewBuilder#CREATE_NEW_FIELD_SETS");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "${fieldType1}");

		Type(
			locator1 = "FormViewBuilder#FIELD_SET_NAME",
			value1 = "${fieldSetName}");

		Click(locator1 = "FormViewBuilder#SIDEBAR_GO_BACK");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "${fieldType2}");

		Click(locator1 = "FormViewBuilder#FIELD_SET_SAVE_BUTTON");
	}

	macro switchLocalization {
		Click(
			key_symbolName = "${symbolName}",
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION");

		Click(
			key_localizationList = "${localizationName}",
			locator1 = "FormViewBuilder#LOCALIZATION_LIST");
	}

	macro switchLocalizationForFieldSets {
		Click(
			key_symbolName = "${symbolName}",
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION_FIELD_SET");

		AssertElementPresent(
			key_localizationName = "${localizationName}",
			key_statusName = "${statusName}",
			locator1 = "FormViewBuilder#TRANSLATED_LIST_FIELD_SET");

		Click(
			key_localizationList = "${localizationName}",
			locator1 = "FormViewBuilder#LOCALIZATION_LIST_FIELD_SET");
	}

	macro switchToAdvancedTab {
		Click(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_TAB");
	}

	macro switchToBacisTab {
		Click(locator1 = "FormViewBuilder#SIDEBAR_BASIC_TAB");
	}

	macro switchToFormViewTab {
		AppBuilderAdmin.switchTab(tabName = "Form Views");
	}

	macro switchToRulesTab {
		Click(locator1 = "FormViewBuilder#RULES_TAB");
	}

	macro validateDeleteObjectMessage {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_OBJECT_MESSAGE");
	}

	macro validateDeleteUsedObjectMessage {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_USED_OBJECT_MESSAGE");
	}

	macro validateFieldInObject {
		var key_fieldLabel = "${fieldLabel}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL",
			value1 = "${fieldLabel}");
	}

	macro validateFieldLabel {
		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${fieldLabel}");
	}

	macro validateFieldLabelAtSidebar {
		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_LABEL_UPDATED_AT_SIDEBAR",
			value1 = "${fieldLabel}");
	}

	macro validateFieldLabelIsNotShown {
		AssertElementNotPresent(locator1 = "FormViewBuilder#FIELD_LABEL");
	}

	macro validateFieldLabelRequired {
		AssertElementPresent(
			fieldLabel = "${fieldLabel}",
			locator1 = "FormViewBuilder#FIELD_LABEL_REQUIRED");
	}

	macro validateFormMultipleSelectionField {
		var key_fieldType = "${fieldLabel}";

		FormViewBuilder.validateFieldLabel(fieldLabel = "${fieldName}");

		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION",
			value1 = "${fieldLabel}");
	}

	macro validateInlineOptionIsSetOFF {
		IsNotChecked(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_INLINE");
	}

	macro validateInlineOptionIsSetOn {
		IsChecked(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_INLINE");
	}

	macro validateLabelScopeOptionsIsShown {
		AssertElementPresent(locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");
	}

	macro validateLocalization {
		AssertElementPresent(
			key_symbolName = "${symbolName}",
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION");
	}

	macro validateLocalizationForFieldSet {
		AssertElementPresent(
			key_symbolName = "${symbolName}",
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION_FIELD_SET");
	}

	macro validateNoFieldLabel {
		AssertElementNotPresent(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = "${fieldLabel}");
	}

	macro validateNoObjectFieldName {
		AssertElementNotPresent(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL",
			value1 = "${fieldName}");
	}

	macro validateObjectFieldName {
		var key_fieldLabel = "${fieldName}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL",
			value1 = "${fieldName}");
	}

	macro validateObjectLabelOptionTextIsShown {
		AssertTextEquals(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL_TEXT",
			value1 = "${text}");
	}

	macro validatePredefinedDate {
		var key_fieldName = "${fieldName}";
		var key_fieldValue = "${fieldValue}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM_DATE_FIELD",
			value1 = "${fieldValue}");
	}

	macro validatePredefinedMultipleSelection {
		for (var selectOption : list "${selectOptionsList}") {
			FormViewBuilder.viewCheckboxChecked(
				fieldName = "${fieldName}",
				fieldValue = "${selectOption}");
		}
	}

	macro validatePredefinedSelectFromList {
		var key_fieldName = "${fieldName}";
		var key_fieldValue = "${fieldValue}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM_SELECTLIST",
			value1 = "${fieldValue}");
	}

	macro validatePredefinedSingleSelection {
		FormViewBuilder.viewSingleSelectionChecked(
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}");
	}

	macro validatePredefinedText {
		var key_fieldName = "${fieldName}";
		var key_fieldValue = "${fieldValue}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM",
			value1 = "${fieldValue}");
	}

	macro validateRuleName {
		AssertTextEquals(
			locator1 = "FormViewBuilder#RULE_LABEL",
			value1 = "${ruleLabel}");
	}

	macro validateRuleSummary {
		var key_firstField = "${firstField}";
		var key_secondField = "${secondField}";
		var key_condition = "${condition}";
		var key_action = "${action}";
		AssertElementPresent(
			firstField = "${firstField}",
			locator1 = "FormViewBuilder#RULE_BUILDER_FIRST_FIELD");
		AssertElementPresent(
			locator1 = "FormViewBuilder#RULE_BUILDER_SECOND_FIELD",
			secondField = "${secondField}");
		AssertElementPresent(
			condition = "${condition}",
			locator1 = "FormViewBuilder#RULE_BUILDER_CONDITION");
		AssertElementPresent(
			action = "${action}",
			locator1 = "FormViewBuilder#RULE_BUILDER_ACTION");
	}

	macro validateSearchResult {
		var key_fieldName = "${fieldLabel}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_RESULT",
			value1 = "${fieldLabel}");
	}

	macro validateSelectFromListField {
		var key_rowNumber = "${rowNumber}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#OPTIONS_OPTION_VALUE_FIELD",
			value1 = "${optionValue}");
	}

	macro validateShowAsSwitchIsOFF {
		IsNotChecked(locator1 = "FormViewBuilder#SIDEBAR_BASIC_SHOW_AS_SWITCH");
	}

	macro validateShowAsSwitchIsON {
		IsChecked(locator1 = "FormViewBuilder#SIDEBAR_BASIC_SHOW_AS_SWITCH");
	}

	macro validateShowLabelIsOff {
		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_SHOW_LABEL");
	}

	macro validateShowLabelIsOn {
		IsChecked(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_SHOW_LABEL");
	}

	macro validateTranslatedField {
		var key_fieldLabel = "${fieldLabel}";

		AssertTextEquals(
			locator1 = "FormViewBuilder#FORM_FIELD_FIRST_ITEM",
			value1 = "${fieldLabel}");
	}

	macro validateTranslatedLocalization {
		Click(
			key_symbolName = "${symbolName}",
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION_FIELD_SET");

		AssertElementPresent(
			key_localizationName = "${localizationName}",
			key_statusName = "${statusName}",
			locator1 = "FormViewBuilder#TRANSLATED_LIST_FIELD_SET");
	}

	macro validateUsedFormView {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_USED_FORM_VIEW");
	}

	macro validateUsedTableView {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_USED_TABLE_VIEW");
	}

	macro viewCheckboxChecked {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = "${fieldName}",
			key_fieldValue = "${fieldValue}",
			locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY");
	}

	macro viewCheckboxCheckedAtPredefinedValue {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = "${fieldName}",
			locator1 = "FormViewBuilder#CHECKBOX_PREDEFINED");
	}

	macro viewCheckboxNotChecked {
		AssertNotChecked.assertNotCheckedNotVisible(
			key_fieldName = "${fieldName}",
			key_fieldValue = "${fieldValue}",
			locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY");
	}

	macro viewEntriesTitle {
		AssertElementPresent(
			key_text = "${key_entriesTitle}",
			locator1 = "FormViewBuilder#ENTRIES_TITLE_CONTENT");
	}

	macro viewMultipleSelectionInline {
		for (var selectOption : list "${selectOptionsList}") {
			AssertElementPresent(
				locator1 = "FormViewBuilder#OPTIONS_PLACED_INLINE",
				optionLabel = "${selectOption}");
		}
	}

	macro viewMultipleSelectionNotInline {
		for (var selectOption : list "${selectOptionsList}") {
			AssertElementNotPresent(
				locator1 = "FormViewBuilder#OPTIONS_PLACED_INLINE",
				optionLabel = "${selectOption}");
		}
	}

	macro viewSelectChecked {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = "${fieldName}",
			key_fieldValue = "${fieldValue}",
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM");
	}

	macro viewSingleSelectionChecked {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = "${fieldName}",
			key_fieldValue = "${fieldValue}",
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM_SINGLE_SELECTION");
	}

	macro viewSummaryEntry {
		AssertElementPresent(
			key_card = "${key_card}",
			locator1 = "Card#CARD_TITLE");

		AssertElementPresent(
			key_entryNumber = "${key_entryNumber}",
			locator1 = "FormViewBuilder#ENTRY_NUMBER");

		AssertElementPresent(
			key_entryName = "${key_entryName}",
			locator1 = "FormViewBuilder#ENTRY_NAME");
	}

	macro viewSummaryEntryNumeric {
		AssertElementPresent(
			key_type = "Sum",
			key_value = "${key_sumValue}",
			locator1 = "FormViewBuilder#ENTRY_NUMERIC");

		AssertElementPresent(
			key_type = "Average",
			key_value = "${key_averageValue}",
			locator1 = "FormViewBuilder#ENTRY_NUMERIC");

		AssertElementPresent(
			key_type = "Min",
			key_value = "${key_minValue}",
			locator1 = "FormViewBuilder#ENTRY_NUMERIC");

		AssertElementPresent(
			key_type = "Max",
			key_value = "${key_maxValue}",
			locator1 = "FormViewBuilder#ENTRY_NUMERIC");
	}

	macro viewTranslationLanguage {
		AssertElementPresent(
			changeAppLanguageTo = "${symbolName}",
			locator1 = "FormViewBuilder#SELECT_LANGUAGE_AT_APP_DEPLOYED");
	}

}