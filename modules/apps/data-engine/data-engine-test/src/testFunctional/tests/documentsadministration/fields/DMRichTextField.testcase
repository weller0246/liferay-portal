@component-name = "data-engine"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "DM Document Type");

		DataEngine.addField(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-98076. Verify if the user can write a text on the Rich Text Field (when uploading a Document Type)"
	@priority = "5"
	test InsertTextOnRichTextOnUpload {
		property portal.acceptance = "false";

		PortletEntry.save();

		Navigator.gotoNavTab(navTab = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		DMDocument.editCmd(dmDocumentTitleEdit = "DM Document Type Name");

		CKEditor.addContentInWebContent(
			content = "Inserting a new Text",
			fieldLabel = "Rich Text");

		Button.clickPublish();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type");

		SelectFrame.selectFrameNoLoading(
			key_fieldLabel = "Rich Text",
			locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertTextEquals(
			locator1 = "CKEditor#BODY",
			value1 = "Inserting a new Text");
	}

	@description = "This is a test for LPS-98076. Verify that a user Can localize the field data"
	@priority = "4"
	test LocalizationOfRichTextPersists {
		property portal.acceptance = "false";

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text");

		PortletEntry.changeLocale(locale = "pt_BR");

		PortletEntry.inputName(name = "DM Tipo de Documento");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "Rich Text",
			label = "Texto Rico");

		DataEngine.editFieldTip(
			fieldFieldLabel = "Texto Rico",
			fieldHelp = "Texto Ajuda");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		PortletEntry.changeLocale(locale = "pt_BR");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "DM Tipo de Documento");

		DataEngine.viewField(
			fieldFieldLabel = "Texto Rico",
			fieldHelp = "Texto Ajuda",
			fieldName = "Rich Text");
	}

	@description = "This is a test for LPS-98076. Verify that a user Can repeat the field when it was set as 'repeatable' (when uploading a Document Type)"
	@priority = "5"
	test RepeatRichTextOnUpload {
		property portal.acceptance = "false";

		DataEngine.toggleFieldRepeatable(fieldFieldLabel = "Rich Text");

		DDLDataDefinition.save();

		Navigator.gotoNavItem(navItem = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		PortletEntry.inputTitle(title = "DM Document Type");

		DataEngine.addRepeatableField(fieldLabel = "Rich Text");

		PortletEntry.publish();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type");

		DataEngine.assertFieldRepeated(
			fieldName = "RichText",
			index = "2");
	}

	@description = "This is a test for LPS-98076. Verify that a user Can set the field name (Field Reference) with valid and invalid characters"
	@priority = "4"
	test SetFieldReferenceOfRichTextWithValidAndInvalidCharacters {
		property portal.acceptance = "false";

		DataEngine.editFieldReference(
			assertFieldReference = "TestValidReference",
			fieldFieldLabel = "Rich Text",
			fieldReference = "TestValidReference");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DEBuilder.assertFieldReference(
			fieldLabel = "Rich Text",
			fieldReference = "TestValidReference");

		DataEngine.editFieldReference(
			assertFieldReference = "TestInvalidReference",
			fieldFieldLabel = "Rich Text",
			fieldReference = "Test!Invalid@#Reference");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DEBuilder.assertFieldReference(
			fieldLabel = "Rich Text",
			fieldReference = "TestInvalidReference");
	}

	@description = "This is a test for LPS-98076. Verify that a user Can define a Field Label and a Tip (Help Text)"
	@priority = "5"
	test SetLabelTextOfRichTextAndHelpText {
		property portal.acceptance = "false";

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text");

		PortletEntry.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewField(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text",
			fieldName = "Rich Text");
	}

	@description = "This is a test for LPS-98076. Verify that a user can set Searchable as Disabled and as Text"
	@priority = "4"
	test SetRichTextSearchableByTextAndDisable {
		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Disable");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Disable");

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Text");
	}

	@description = "This is a test for LPS-98076. Verify that a user can hide/show the field label"
	@priority = "3"
	test ShowAndHideRichTextLabel {
		DataEngine.toggleShowLabel(fieldLabel = "Rich Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Rich Text",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		DataEngine.toggleShowLabel();

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		AssertVisible(
			key_fieldFieldLabel = "Rich Text",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98076. Verify the Field set as 'Required' and that a user can upload a Document Type with rich text as a required field"
	@priority = "4"
	test UploadWithRequiredRichText {
		property portal.acceptance = "false";

		DataEngine.editFieldRequired(fieldFieldLabel = "Rich Text");

		DDLDataDefinition.save();

		Navigator.gotoNavItem(navItem = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		PortletEntry.inputTitle(title = "DM Document Type Name");

		Button.clickPublish();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "This field is required.");

		CKEditor.addContentInWebContent(
			content = "Hello",
			fieldLabel = "Rich Text");

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for LPS-98076. Verify that a user can see the Help Text on the Upload"
	@priority = "4"
	test VerifyRichFieldHelpTextOnUpload {
		property portal.upstream = "quarantine";

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text");

		DDLDataDefinition.save();

		Navigator.gotoNavItem(navItem = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		AssertTextEquals(
			locator1 = "FormFields#HELP_TEXT",
			value1 = "Help Text");
	}

}