@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Translation Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that the user can export multiple available languages of default experience for translation."
	@priority = "5"
	test CanExportWithMultipleLanguages {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Translation Content Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Translation Content Page",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Paragraph");

		PageEditor.clickPublish();

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "Translation Content Page");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Arabic (Saudi Arabia),Chinese (China),Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "Translation Content Page");
	}

	@description = "This ensures that the user can export a single available language of default experience for translation."
	@priority = "5"
	test CanExportWithSingleLanguage {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Translation Content Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Translation Content Page",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.clickPublish();

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "Translation Content Page");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "Translation Content Page");
	}

	@description = "This ensures that the user can import the exported content page xliff file with 1.2 version."
	@priority = "5"
	test CanImportExportedCustomizeXliffFile {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			exportFileFormat = "XLIFF 1.2",
			languageList = "Japanese (Japan)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "utf8",
			fragmentContent = "Heading",
			fragmentContentTranslation = "タイトル",
			pageName = "TranslationContentPage",
			pageNameTranslation = "翻訳ページ",
			translationFileName = "TranslationContentPage-en_US-ja_JP",
			translationZipFileName = "TranslationContentPage-en_US.zip");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-ja_JP.xlf",
			pageName = "TranslationContentPage");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "ja-JP",
			status = "Approved",
			title = "Translation of TranslationContentPage to ja-JP");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "ja-JP");

		PageEditor.viewFragmentEditableText(
			editableText = "タイトル",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		AssertTextEquals(
			key_fragmentName = "heading",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "Heading");

		Navigator.ensureLocaleURL(locale = "ja");

		Page.viewCurrentPage(pageName = "翻訳ページ");

		AssertTextEquals(
			key_fragmentName = "heading",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "タイトル");
	}

	@description = "This ensures that the user can import the exported content page xliff file with default version."
	@priority = "5"
	test CanImportExportedDefaultXliffFile {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US.zip");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "Titulo",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		AssertTextEquals(
			key_fragmentName = "heading",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "Heading");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		AssertTextEquals(
			key_fragmentName = "heading",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "Titulo");
	}

	@description = "This ensures that the user can not import an invalid translation file."
	@priority = "4"
	test CannotImportAnInvalidFile {
		for (var num : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${num}",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${num}");
		}

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage1");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "unzip-temp-file -DfileName=TranslationContentPage1-en_US.zip");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage1-en_US-es_ES.xlf",
			pageName = "TranslationContentPage2",
			validateInvalidFile = "true");

		Alert.viewErrorMessage(errorMessage = "The translation file does not correspond to this page.");

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			pageName = "TranslationContentPage2",
			uploadInvalidFile = "Document_1.doc",
			validateInvalidFile = "true");

		Alert.viewErrorMessage(errorMessage = "The file is an invalid XLIFF file.");
	}

	@description = "This ensures that the user can import the translated content page file with Button fragment."
	@priority = "5"
	test CanTranslateAndImportButtonFragment {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.editFragmentText(
			fragmentName = "Button",
			id = "link",
			text = "Title");

		PageEditor.clickPublish();

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Title",
			fragmentContentTranslation = "Titulo",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US.zip");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			pageName = "TranslationContentPage");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "es-ES",
			status = "Approved",
			title = "Translation of TranslationContentPage to es-ES");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "Titulo",
			fragmentName = "Button",
			id = "link");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		AssertTextEquals(
			key_fragmentName = "button",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "Title");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		AssertTextEquals(
			key_fragmentName = "button",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "Titulo");
	}

	@description = "This ensures that the user can import the translated content page file with HTML fragment."
	@priority = "5"
	test CanTranslateAndImportHTMLFragment {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "HTML");

		PageEditor.editFragmentHTML(
			content = "HTMLTitle",
			editableId = "element-html",
			fragmentName = "HTML");

		PageEditor.clickPublish();

		SitePages.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "HTMLTitle",
			fragmentContentTranslation = "HTMLTitulo",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US.zip");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "HTMLTitulo",
			fragmentName = "HTML",
			id = "element-html");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		AssertTextEquals(
			key_fragmentName = "html",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "HTMLTitle");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		AssertTextEquals(
			key_fragmentName = "html",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "HTMLTitulo");
	}

}