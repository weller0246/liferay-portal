/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.custom.elements.model.impl;

import com.liferay.custom.elements.model.CustomElementsSource;
import com.liferay.custom.elements.model.CustomElementsSourceModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CustomElementsSource service. Represents a row in the &quot;CustomElementsSource&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomElementsSourceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomElementsSourceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomElementsSourceImpl
 * @generated
 */
public class CustomElementsSourceModelImpl
	extends BaseModelImpl<CustomElementsSource>
	implements CustomElementsSourceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom elements source model instance should use the <code>CustomElementsSource</code> interface instead.
	 */
	public static final String TABLE_NAME = "CustomElementsSource";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"customElementsSourceId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"htmlElementName", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"urls", Types.CLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customElementsSourceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("htmlElementName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("urls", Types.CLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CustomElementsSource (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,customElementsSourceId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,htmlElementName VARCHAR(75) null,name VARCHAR(75) null,urls TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table CustomElementsSource";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customElementsSource.customElementsSourceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CustomElementsSource.customElementsSourceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HTMLELEMENTNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CUSTOMELEMENTSSOURCEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CustomElementsSourceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customElementsSourceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomElementsSourceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customElementsSourceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustomElementsSource.class;
	}

	@Override
	public String getModelClassName() {
		return CustomElementsSource.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CustomElementsSource, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CustomElementsSource, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomElementsSource, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CustomElementsSource)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CustomElementsSource, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CustomElementsSource, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CustomElementsSource)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CustomElementsSource, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CustomElementsSource, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CustomElementsSource>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CustomElementsSource.class.getClassLoader(),
			CustomElementsSource.class, ModelWrapper.class);

		try {
			Constructor<CustomElementsSource> constructor =
				(Constructor<CustomElementsSource>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CustomElementsSource, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CustomElementsSource, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CustomElementsSource, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CustomElementsSource, Object>>();
		Map<String, BiConsumer<CustomElementsSource, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CustomElementsSource, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", CustomElementsSource::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CustomElementsSource, Long>)
				CustomElementsSource::setMvccVersion);
		attributeGetterFunctions.put("uuid", CustomElementsSource::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CustomElementsSource, String>)
				CustomElementsSource::setUuid);
		attributeGetterFunctions.put(
			"customElementsSourceId",
			CustomElementsSource::getCustomElementsSourceId);
		attributeSetterBiConsumers.put(
			"customElementsSourceId",
			(BiConsumer<CustomElementsSource, Long>)
				CustomElementsSource::setCustomElementsSourceId);
		attributeGetterFunctions.put(
			"companyId", CustomElementsSource::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CustomElementsSource, Long>)
				CustomElementsSource::setCompanyId);
		attributeGetterFunctions.put("userId", CustomElementsSource::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CustomElementsSource, Long>)
				CustomElementsSource::setUserId);
		attributeGetterFunctions.put(
			"userName", CustomElementsSource::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CustomElementsSource, String>)
				CustomElementsSource::setUserName);
		attributeGetterFunctions.put(
			"createDate", CustomElementsSource::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CustomElementsSource, Date>)
				CustomElementsSource::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CustomElementsSource::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CustomElementsSource, Date>)
				CustomElementsSource::setModifiedDate);
		attributeGetterFunctions.put(
			"htmlElementName", CustomElementsSource::getHTMLElementName);
		attributeSetterBiConsumers.put(
			"htmlElementName",
			(BiConsumer<CustomElementsSource, String>)
				CustomElementsSource::setHTMLElementName);
		attributeGetterFunctions.put("name", CustomElementsSource::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<CustomElementsSource, String>)
				CustomElementsSource::setName);
		attributeGetterFunctions.put("urls", CustomElementsSource::getURLs);
		attributeSetterBiConsumers.put(
			"urls",
			(BiConsumer<CustomElementsSource, String>)
				CustomElementsSource::setURLs);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getCustomElementsSourceId() {
		return _customElementsSourceId;
	}

	@Override
	public void setCustomElementsSourceId(long customElementsSourceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customElementsSourceId = customElementsSourceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getHTMLElementName() {
		if (_htmlElementName == null) {
			return "";
		}
		else {
			return _htmlElementName;
		}
	}

	@Override
	public void setHTMLElementName(String htmlElementName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_htmlElementName = htmlElementName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalHTMLElementName() {
		return getColumnOriginalValue("htmlElementName");
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getURLs() {
		if (_urls == null) {
			return "";
		}
		else {
			return _urls;
		}
	}

	@Override
	public void setURLs(String urls) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_urls = urls;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CustomElementsSource.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CustomElementsSource.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CustomElementsSource toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CustomElementsSource>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomElementsSourceImpl customElementsSourceImpl =
			new CustomElementsSourceImpl();

		customElementsSourceImpl.setMvccVersion(getMvccVersion());
		customElementsSourceImpl.setUuid(getUuid());
		customElementsSourceImpl.setCustomElementsSourceId(
			getCustomElementsSourceId());
		customElementsSourceImpl.setCompanyId(getCompanyId());
		customElementsSourceImpl.setUserId(getUserId());
		customElementsSourceImpl.setUserName(getUserName());
		customElementsSourceImpl.setCreateDate(getCreateDate());
		customElementsSourceImpl.setModifiedDate(getModifiedDate());
		customElementsSourceImpl.setHTMLElementName(getHTMLElementName());
		customElementsSourceImpl.setName(getName());
		customElementsSourceImpl.setURLs(getURLs());

		customElementsSourceImpl.resetOriginalValues();

		return customElementsSourceImpl;
	}

	@Override
	public CustomElementsSource cloneWithOriginalValues() {
		CustomElementsSourceImpl customElementsSourceImpl =
			new CustomElementsSourceImpl();

		customElementsSourceImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		customElementsSourceImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		customElementsSourceImpl.setCustomElementsSourceId(
			this.<Long>getColumnOriginalValue("customElementsSourceId"));
		customElementsSourceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		customElementsSourceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		customElementsSourceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		customElementsSourceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		customElementsSourceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		customElementsSourceImpl.setHTMLElementName(
			this.<String>getColumnOriginalValue("htmlElementName"));
		customElementsSourceImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		customElementsSourceImpl.setURLs(
			this.<String>getColumnOriginalValue("urls"));

		return customElementsSourceImpl;
	}

	@Override
	public int compareTo(CustomElementsSource customElementsSource) {
		long primaryKey = customElementsSource.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CustomElementsSource)) {
			return false;
		}

		CustomElementsSource customElementsSource =
			(CustomElementsSource)object;

		long primaryKey = customElementsSource.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CustomElementsSource> toCacheModel() {
		CustomElementsSourceCacheModel customElementsSourceCacheModel =
			new CustomElementsSourceCacheModel();

		customElementsSourceCacheModel.mvccVersion = getMvccVersion();

		customElementsSourceCacheModel.uuid = getUuid();

		String uuid = customElementsSourceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			customElementsSourceCacheModel.uuid = null;
		}

		customElementsSourceCacheModel.customElementsSourceId =
			getCustomElementsSourceId();

		customElementsSourceCacheModel.companyId = getCompanyId();

		customElementsSourceCacheModel.userId = getUserId();

		customElementsSourceCacheModel.userName = getUserName();

		String userName = customElementsSourceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			customElementsSourceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			customElementsSourceCacheModel.createDate = createDate.getTime();
		}
		else {
			customElementsSourceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customElementsSourceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			customElementsSourceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		customElementsSourceCacheModel.htmlElementName = getHTMLElementName();

		String htmlElementName = customElementsSourceCacheModel.htmlElementName;

		if ((htmlElementName != null) && (htmlElementName.length() == 0)) {
			customElementsSourceCacheModel.htmlElementName = null;
		}

		customElementsSourceCacheModel.name = getName();

		String name = customElementsSourceCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			customElementsSourceCacheModel.name = null;
		}

		customElementsSourceCacheModel.urls = getURLs();

		String urls = customElementsSourceCacheModel.urls;

		if ((urls != null) && (urls.length() == 0)) {
			customElementsSourceCacheModel.urls = null;
		}

		return customElementsSourceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CustomElementsSource, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CustomElementsSource, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomElementsSource, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CustomElementsSource)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CustomElementsSource, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CustomElementsSource, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomElementsSource, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((CustomElementsSource)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CustomElementsSource>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _mvccVersion;
	private String _uuid;
	private long _customElementsSourceId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _htmlElementName;
	private String _name;
	private String _urls;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CustomElementsSource, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CustomElementsSource)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"customElementsSourceId", _customElementsSourceId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("htmlElementName", _htmlElementName);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("urls", _urls);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("customElementsSourceId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("htmlElementName", 256L);

		columnBitmasks.put("name", 512L);

		columnBitmasks.put("urls", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CustomElementsSource _escapedModel;

}