/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.custom.elements.model.impl;

import com.liferay.custom.elements.model.CustomElementsPortletDescriptor;
import com.liferay.custom.elements.model.CustomElementsPortletDescriptorModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CustomElementsPortletDescriptor service. Represents a row in the &quot;CustomElementsPortletDesc&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomElementsPortletDescriptorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomElementsPortletDescriptorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomElementsPortletDescriptorImpl
 * @generated
 */
public class CustomElementsPortletDescriptorModelImpl
	extends BaseModelImpl<CustomElementsPortletDescriptor>
	implements CustomElementsPortletDescriptorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom elements portlet descriptor model instance should use the <code>CustomElementsPortletDescriptor</code> interface instead.
	 */
	public static final String TABLE_NAME = "CustomElementsPortletDesc";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"customElementsPortletDescId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"cssURLs", Types.CLOB},
		{"htmlElementName", Types.VARCHAR}, {"instanceable", Types.BOOLEAN},
		{"name", Types.VARCHAR}, {"properties", Types.CLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customElementsPortletDescId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("cssURLs", Types.CLOB);
		TABLE_COLUMNS_MAP.put("htmlElementName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instanceable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("properties", Types.CLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CustomElementsPortletDesc (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,customElementsPortletDescId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,cssURLs TEXT null,htmlElementName VARCHAR(75) null,instanceable BOOLEAN,name VARCHAR(75) null,properties TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table CustomElementsPortletDesc";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customElementsPortletDescriptor.customElementsPortletDescriptorId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CustomElementsPortletDesc.customElementsPortletDescId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CUSTOMELEMENTSPORTLETDESCRIPTORID_COLUMN_BITMASK =
		4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CustomElementsPortletDescriptorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customElementsPortletDescriptorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomElementsPortletDescriptorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customElementsPortletDescriptorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustomElementsPortletDescriptor.class;
	}

	@Override
	public String getModelClassName() {
		return CustomElementsPortletDescriptor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CustomElementsPortletDescriptor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CustomElementsPortletDescriptor, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomElementsPortletDescriptor, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CustomElementsPortletDescriptor)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CustomElementsPortletDescriptor, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CustomElementsPortletDescriptor, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CustomElementsPortletDescriptor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CustomElementsPortletDescriptor, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CustomElementsPortletDescriptor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CustomElementsPortletDescriptor>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CustomElementsPortletDescriptor.class.getClassLoader(),
			CustomElementsPortletDescriptor.class, ModelWrapper.class);

		try {
			Constructor<CustomElementsPortletDescriptor> constructor =
				(Constructor<CustomElementsPortletDescriptor>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<CustomElementsPortletDescriptor, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<CustomElementsPortletDescriptor, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<CustomElementsPortletDescriptor, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String,
					 Function<CustomElementsPortletDescriptor, Object>>();
		Map<String, BiConsumer<CustomElementsPortletDescriptor, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CustomElementsPortletDescriptor, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", CustomElementsPortletDescriptor::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CustomElementsPortletDescriptor, Long>)
				CustomElementsPortletDescriptor::setMvccVersion);
		attributeGetterFunctions.put(
			"uuid", CustomElementsPortletDescriptor::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CustomElementsPortletDescriptor, String>)
				CustomElementsPortletDescriptor::setUuid);
		attributeGetterFunctions.put(
			"customElementsPortletDescriptorId",
			CustomElementsPortletDescriptor::
				getCustomElementsPortletDescriptorId);
		attributeSetterBiConsumers.put(
			"customElementsPortletDescriptorId",
			(BiConsumer<CustomElementsPortletDescriptor, Long>)
				CustomElementsPortletDescriptor::
					setCustomElementsPortletDescriptorId);
		attributeGetterFunctions.put(
			"companyId", CustomElementsPortletDescriptor::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CustomElementsPortletDescriptor, Long>)
				CustomElementsPortletDescriptor::setCompanyId);
		attributeGetterFunctions.put(
			"userId", CustomElementsPortletDescriptor::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CustomElementsPortletDescriptor, Long>)
				CustomElementsPortletDescriptor::setUserId);
		attributeGetterFunctions.put(
			"userName", CustomElementsPortletDescriptor::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CustomElementsPortletDescriptor, String>)
				CustomElementsPortletDescriptor::setUserName);
		attributeGetterFunctions.put(
			"createDate", CustomElementsPortletDescriptor::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CustomElementsPortletDescriptor, Date>)
				CustomElementsPortletDescriptor::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CustomElementsPortletDescriptor::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CustomElementsPortletDescriptor, Date>)
				CustomElementsPortletDescriptor::setModifiedDate);
		attributeGetterFunctions.put(
			"cssURLs", CustomElementsPortletDescriptor::getCSSURLs);
		attributeSetterBiConsumers.put(
			"cssURLs",
			(BiConsumer<CustomElementsPortletDescriptor, String>)
				CustomElementsPortletDescriptor::setCSSURLs);
		attributeGetterFunctions.put(
			"htmlElementName",
			CustomElementsPortletDescriptor::getHTMLElementName);
		attributeSetterBiConsumers.put(
			"htmlElementName",
			(BiConsumer<CustomElementsPortletDescriptor, String>)
				CustomElementsPortletDescriptor::setHTMLElementName);
		attributeGetterFunctions.put(
			"instanceable", CustomElementsPortletDescriptor::getInstanceable);
		attributeSetterBiConsumers.put(
			"instanceable",
			(BiConsumer<CustomElementsPortletDescriptor, Boolean>)
				CustomElementsPortletDescriptor::setInstanceable);
		attributeGetterFunctions.put(
			"name", CustomElementsPortletDescriptor::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<CustomElementsPortletDescriptor, String>)
				CustomElementsPortletDescriptor::setName);
		attributeGetterFunctions.put(
			"properties", CustomElementsPortletDescriptor::getProperties);
		attributeSetterBiConsumers.put(
			"properties",
			(BiConsumer<CustomElementsPortletDescriptor, String>)
				CustomElementsPortletDescriptor::setProperties);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getCustomElementsPortletDescriptorId() {
		return _customElementsPortletDescriptorId;
	}

	@Override
	public void setCustomElementsPortletDescriptorId(
		long customElementsPortletDescriptorId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customElementsPortletDescriptorId = customElementsPortletDescriptorId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getCSSURLs() {
		if (_cssURLs == null) {
			return "";
		}
		else {
			return _cssURLs;
		}
	}

	@Override
	public void setCSSURLs(String cssURLs) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cssURLs = cssURLs;
	}

	@Override
	public String getHTMLElementName() {
		if (_htmlElementName == null) {
			return "";
		}
		else {
			return _htmlElementName;
		}
	}

	@Override
	public void setHTMLElementName(String htmlElementName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_htmlElementName = htmlElementName;
	}

	@Override
	public boolean getInstanceable() {
		return _instanceable;
	}

	@Override
	public boolean isInstanceable() {
		return _instanceable;
	}

	@Override
	public void setInstanceable(boolean instanceable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_instanceable = instanceable;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getProperties() {
		if (_properties == null) {
			return "";
		}
		else {
			return _properties;
		}
	}

	@Override
	public void setProperties(String properties) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_properties = properties;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CustomElementsPortletDescriptor.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CustomElementsPortletDescriptor.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CustomElementsPortletDescriptor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CustomElementsPortletDescriptor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomElementsPortletDescriptorImpl
			customElementsPortletDescriptorImpl =
				new CustomElementsPortletDescriptorImpl();

		customElementsPortletDescriptorImpl.setMvccVersion(getMvccVersion());
		customElementsPortletDescriptorImpl.setUuid(getUuid());
		customElementsPortletDescriptorImpl.
			setCustomElementsPortletDescriptorId(
				getCustomElementsPortletDescriptorId());
		customElementsPortletDescriptorImpl.setCompanyId(getCompanyId());
		customElementsPortletDescriptorImpl.setUserId(getUserId());
		customElementsPortletDescriptorImpl.setUserName(getUserName());
		customElementsPortletDescriptorImpl.setCreateDate(getCreateDate());
		customElementsPortletDescriptorImpl.setModifiedDate(getModifiedDate());
		customElementsPortletDescriptorImpl.setCSSURLs(getCSSURLs());
		customElementsPortletDescriptorImpl.setHTMLElementName(
			getHTMLElementName());
		customElementsPortletDescriptorImpl.setInstanceable(isInstanceable());
		customElementsPortletDescriptorImpl.setName(getName());
		customElementsPortletDescriptorImpl.setProperties(getProperties());

		customElementsPortletDescriptorImpl.resetOriginalValues();

		return customElementsPortletDescriptorImpl;
	}

	@Override
	public CustomElementsPortletDescriptor cloneWithOriginalValues() {
		CustomElementsPortletDescriptorImpl
			customElementsPortletDescriptorImpl =
				new CustomElementsPortletDescriptorImpl();

		customElementsPortletDescriptorImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		customElementsPortletDescriptorImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		customElementsPortletDescriptorImpl.
			setCustomElementsPortletDescriptorId(
				this.<Long>getColumnOriginalValue(
					"customElementsPortletDescId"));
		customElementsPortletDescriptorImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		customElementsPortletDescriptorImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		customElementsPortletDescriptorImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		customElementsPortletDescriptorImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		customElementsPortletDescriptorImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		customElementsPortletDescriptorImpl.setCSSURLs(
			this.<String>getColumnOriginalValue("cssURLs"));
		customElementsPortletDescriptorImpl.setHTMLElementName(
			this.<String>getColumnOriginalValue("htmlElementName"));
		customElementsPortletDescriptorImpl.setInstanceable(
			this.<Boolean>getColumnOriginalValue("instanceable"));
		customElementsPortletDescriptorImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		customElementsPortletDescriptorImpl.setProperties(
			this.<String>getColumnOriginalValue("properties"));

		return customElementsPortletDescriptorImpl;
	}

	@Override
	public int compareTo(
		CustomElementsPortletDescriptor customElementsPortletDescriptor) {

		long primaryKey = customElementsPortletDescriptor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CustomElementsPortletDescriptor)) {
			return false;
		}

		CustomElementsPortletDescriptor customElementsPortletDescriptor =
			(CustomElementsPortletDescriptor)object;

		long primaryKey = customElementsPortletDescriptor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CustomElementsPortletDescriptor> toCacheModel() {
		CustomElementsPortletDescriptorCacheModel
			customElementsPortletDescriptorCacheModel =
				new CustomElementsPortletDescriptorCacheModel();

		customElementsPortletDescriptorCacheModel.mvccVersion =
			getMvccVersion();

		customElementsPortletDescriptorCacheModel.uuid = getUuid();

		String uuid = customElementsPortletDescriptorCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			customElementsPortletDescriptorCacheModel.uuid = null;
		}

		customElementsPortletDescriptorCacheModel.
			customElementsPortletDescriptorId =
				getCustomElementsPortletDescriptorId();

		customElementsPortletDescriptorCacheModel.companyId = getCompanyId();

		customElementsPortletDescriptorCacheModel.userId = getUserId();

		customElementsPortletDescriptorCacheModel.userName = getUserName();

		String userName = customElementsPortletDescriptorCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			customElementsPortletDescriptorCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			customElementsPortletDescriptorCacheModel.createDate =
				createDate.getTime();
		}
		else {
			customElementsPortletDescriptorCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customElementsPortletDescriptorCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			customElementsPortletDescriptorCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		customElementsPortletDescriptorCacheModel.cssURLs = getCSSURLs();

		String cssURLs = customElementsPortletDescriptorCacheModel.cssURLs;

		if ((cssURLs != null) && (cssURLs.length() == 0)) {
			customElementsPortletDescriptorCacheModel.cssURLs = null;
		}

		customElementsPortletDescriptorCacheModel.htmlElementName =
			getHTMLElementName();

		String htmlElementName =
			customElementsPortletDescriptorCacheModel.htmlElementName;

		if ((htmlElementName != null) && (htmlElementName.length() == 0)) {
			customElementsPortletDescriptorCacheModel.htmlElementName = null;
		}

		customElementsPortletDescriptorCacheModel.instanceable =
			isInstanceable();

		customElementsPortletDescriptorCacheModel.name = getName();

		String name = customElementsPortletDescriptorCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			customElementsPortletDescriptorCacheModel.name = null;
		}

		customElementsPortletDescriptorCacheModel.properties = getProperties();

		String properties =
			customElementsPortletDescriptorCacheModel.properties;

		if ((properties != null) && (properties.length() == 0)) {
			customElementsPortletDescriptorCacheModel.properties = null;
		}

		return customElementsPortletDescriptorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CustomElementsPortletDescriptor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CustomElementsPortletDescriptor, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomElementsPortletDescriptor, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CustomElementsPortletDescriptor)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CustomElementsPortletDescriptor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry
				<String, Function<CustomElementsPortletDescriptor, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomElementsPortletDescriptor, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(CustomElementsPortletDescriptor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CustomElementsPortletDescriptor>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _mvccVersion;
	private String _uuid;
	private long _customElementsPortletDescriptorId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _cssURLs;
	private String _htmlElementName;
	private boolean _instanceable;
	private String _name;
	private String _properties;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CustomElementsPortletDescriptor, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CustomElementsPortletDescriptor)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"customElementsPortletDescId", _customElementsPortletDescriptorId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("cssURLs", _cssURLs);
		_columnOriginalValues.put("htmlElementName", _htmlElementName);
		_columnOriginalValues.put("instanceable", _instanceable);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("properties", _properties);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put(
			"customElementsPortletDescId", "customElementsPortletDescriptorId");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("customElementsPortletDescId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("cssURLs", 256L);

		columnBitmasks.put("htmlElementName", 512L);

		columnBitmasks.put("instanceable", 1024L);

		columnBitmasks.put("name", 2048L);

		columnBitmasks.put("properties", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CustomElementsPortletDescriptor _escapedModel;

}