definition {

	macro changeLocale {
		Click.clickNoMouseOver(
			key_fieldName = "${fieldName}",
			locator1 = "Button#LOCALIZATION_OPEN_GRAPH");

		Click(
			key_locale = StringUtil.replace("${locale}", "-", "_"),
			locator1 = "Translation#LOCALIZATION_NAME");
	}

	macro clearImage {
		Click(
			key_fieldLabel = "Image",
			key_text = "Clear",
			locator1 = "Button#ANY_WITH_LABEL");
	}

	macro configureOpenGraph {
		if (isSet(customTitle)) {
			var checkboxName = "Use Custom Title";

			if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
				Click(locator1 = "Checkbox#ANY_CHECKBOX");
			}

			Type(
				locator1 = "TextInput#OPEN_GRAPH_CUSTOM_TITLE",
				value1 = "${customTitle}");
		}

		if (isSet(customDescription)) {
			var checkboxName = "Use Custom Description";

			if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
				Click(locator1 = "Checkbox#ANY_CHECKBOX");
			}

			Type(
				key_text = "openGraphDescription",
				locator1 = "TextArea#ANY",
				value1 = "${customDescription}");
		}

		if (isSet(customImage)) {
			var key_uploadFileName = "${uploadFileName}";

			AssertElementPresent.pauseAssertVisible(
				key_fieldLabel = "Image",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");

			Click.pauseClickAt(
				key_fieldLabel = "Image",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "Open Graph Image");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertElementPresent(locator1 = "ItemSelector#SELECT_FILE_UPLOAD_IMAGE");

			if (isSet(depotName)) {
				ItemSelector.selectRepositoryImage(
					customImage = "${customImage}",
					depotName = "${depotName}",
					imageFileName = "${uploadFileName}");
			}
			else {
				UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
					locator1 = "TextInput#FILE",
					value1 = "${uploadFileName}");

				AssertElementPresent.pauseAssertVisible(
					locator1 = "ItemSelector#ADD_BUTTON",
					value1 = "Add");

				AssertClick(
					locator1 = "ItemSelector#ADD_BUTTON",
					value1 = "Add");

				SelectFrameTop(value1 = "relative=top");
			}

			if (isSet(altDescription)) {
				Type(
					locator1 = "TextInput#OPEN_GRAPH_IMAGE_ALT_DESCRIPTION",
					value1 = "${altDescription}");
			}
		}

		if (!(isSet(dontSave))) {
			Button.click(button = "Save");

			if (isSet(customImage)) {
				var uploadFileName = StringUtil.extractFirst("${uploadFileName}", ".");

				AssertElementPresent.assertVisible(
					key_dmDocumentURL = "${uploadFileName}",
					locator1 = "TextInput#OPEN_GRAPH_CUSTOM_IMAGE_INPUT");
			}
		}
	}

	macro disableOpenGraphAtSiteLevel {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage/-/site/settings?_com_liferay_site_admin_web_portlet_SiteSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fview_configuration_screen&_com_liferay_site_admin_web_portlet_SiteSettingsPortlet_configurationScreenKey=site-configuration-open-graph");

		if (IsChecked(locator1 = "Checkbox#ANY_CHECKBOX", checkboxName = "Enable Open Graph")) {
			Click(
				checkboxName = "Enable Open Graph",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		AssertElementPresent(locator1 = "Checkbox#OPEN_GRAPH_CHECKBOX_DISABLED");

		Button.click(button = "Save");
	}

	macro disableOpenGraphCustomSettings {
		if (isSet(customTitle)) {
			var checkboxName = "Use Custom Title";

			if (IsChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
				Click(locator1 = "Checkbox#ANY_CHECKBOX");
			}
		}

		if (isSet(customDescription)) {
			var checkboxName = "Use Custom Description";

			if (IsChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
				Click(locator1 = "Checkbox#ANY_CHECKBOX");
			}
		}
	}

	macro mapEditableTextToField {
		if ("${textType}" == "TextInput") {
			Type(
				key_text = "${mappedField}",
				locator1 = "TextInput#ANY",
				value1 = "${mappedFieldText}");
		}
		else if ("${textType}" == "TextArea") {
			Type(
				key_text = "${mappedField}",
				locator1 = "TextArea#ANY",
				value1 = "${mappedFieldText}");
		}

		Click(
			key_mappedField = "${mappedFieldName}",
			locator1 = "PageEditor#EDITABLE_FIELD_TOOLBAR_MAP_BUTTON_SPECIFIC");

		for (var field : list "${field}" ) {
			if ("${textType}" == "TextInput") {
				Type.sendKeys(
					key_text = "${mappedField}",
					locator1 = "TextInput#ANY",
					value1 = "${field}:");
			}
			else if ("${textType}" == "TextArea") {
				Type.sendKeys(
					key_text = "${mappedField}",
					locator1 = "TextArea#ANY",
					value1 = "${field}:");
			}

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "${field}");

			if ("${mappedFieldName}" == "Image") {
				Click(
					key_text = "Map Content",
					locator1 = "Button#ANY");
			}
			else {
				Click(
					key_text = "Add Field",
					locator1 = "Button#ANY");
			}
		}
	}

	macro openToConfigInSystemSettings {
		var baseURL = PropsUtil.get("portal.url");

		if ("${portlet}" == "SEO") {
			var portletId = "com.liferay.layout.seo.internal.configuration.LayoutSEOCompanyConfiguration";
		}

		Open(locator1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=${portletId}&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	macro viewDefaultConfiguration {
		task ("Assert open graph title") {
			AssertTextEquals(
				key_title = "Open Graph",
				locator1 = "Header#H2_TITLE",
				value1 = "Open Graph");
		}

		task ("Assert custom title configuration") {
			AssertTextEquals.assertPartialText(
				key_fieldName = "openGraphTitleEnabled",
				locator1 = "FormFields#CHECKBOX_LABEL",
				value1 = "Use Custom Title");

			AssertElementPresent(locator1 = "TextInput#OPEN_GRAPH_CUSTOM_TITLE");
		}

		task ("Assert custom description configuration") {
			AssertTextEquals.assertPartialText(
				key_fieldName = "openGraphDescriptionEnabled",
				locator1 = "FormFields#CHECKBOX_LABEL",
				value1 = "Use Custom Description");

			AssertElementPresent(
				key_text = "openGraphDescription",
				locator1 = "TextArea#ANY");
		}

		task ("Assert image configuration") {
			AssertTextEquals.assertPartialText(
				key_fieldLabel = "Image",
				locator1 = "FormFields#OPEN_GRAPH_LABEL",
				value1 = "Image");

			AssertTextEquals.assertPartialText(
				key_fieldLabel = "Image Alt Description",
				locator1 = "FormFields#OPEN_GRAPH_LABEL",
				value1 = "Image Alt Description");

			AssertElementPresent(
				key_fieldLabel = "Image",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");
		}
	}

	macro viewDefaultMappedField {
		if ("${portlet}" == "Open Graph") {
			AssertAttributeValue(
				attribute1 = "value",
				key_mappedField = "Title",
				locator1 = "TextInput#SEO_MAPPED_FIELD",
				value1 = "${title}");

			AssertTextEquals(
				key_mappedField = "Description",
				locator1 = "TextInput#SEO_MAPPED_FIELD",
				value1 = "${description}");

			AssertAttributeValue(
				attribute1 = "value",
				key_mappedField = "Image",
				locator1 = "TextInput#SEO_MAPPED_FIELD",
				value1 = "-- Unmapped --");

			AssertTextEquals(
				key_mappedField = "ImageAlt",
				locator1 = "TextInput#SEO_MAPPED_FIELD",
				value1 = "");
		}

		if ("${portlet}" == "SEO") {
			AssertElementPresent(
				key_mappedField = "title",
				locator1 = "TextInput#SEO_HTML_TITLE",
				mappedFieldValue = "title");

			AssertElementPresent(
				key_mappedField = "description",
				locator1 = "TextInput#SEO_MAPPED_FIELD",
				mappedFieldValue = "description");
		}
	}

	macro viewImageAltDescriptionDefault {
		AssertElementPresent(
			key_text = "openGraphImageAlt",
			locator1 = "TextInput#OPEN_GRAPH_IMAGE_ALT_DESCRIPTION_DISABLED");
	}

	macro viewImageFieldDefault {
		AssertElementPresent(locator1 = "TextInput#OPEN_GRAPH_CUSTOM_IMAGE_DEFAULT_VALUE");
	}

	macro viewMappedField {
		if (isSet(textType)) {
			AssertTextEquals(
				key_mappedField = "${mappedField}",
				locator1 = "TextInput#SEO_MAPPED_FIELD",
				value1 = "${mappedFieldValue}");
		}

		else {
			AssertAttributeValue(
				attribute1 = "value",
				key_mappedField = "${mappedField}",
				locator1 = "TextInput#SEO_MAPPED_FIELD",
				value1 = "${mappedFieldValue}");
		}
	}

	macro viewNoOpenGraphProperties {
		for (var ogProperty : list "${ogPropertyList}" ) {
			AssertHTMLSourceTextNotPresent(value1 = "${ogProperty}");
		}
	}

	macro viewNoPreviewDescription {
		AssertTextEquals(
			locator1 = "SitePagesEditPage#PREVIEW_DESCRIPTION",
			value1 = "");
	}

	macro viewNoPreviewImage {
		AssertElementNotPresent(
			key_imageName = "${imageName}",
			locator1 = "SitePagesEditPage#PREVIEW_IMAGE");
	}

	macro viewNoTab {
		AssertElementNotPresent(
			key_panel = "Open Graph",
			locator1 = "NavTab#TAB_LINK");
	}

	macro viewOpenGraphProperties {
		for (var ogProperty : list "${ogPropertyList}" ) {
			AssertHTMLSourceTextPresent(value1 = "${ogProperty}");
		}
	}

	macro viewPreviewImage {
		AssertVisible(
			key_imageName = "${imageName}",
			locator1 = "SitePagesEditPage#PREVIEW_IMAGE");
	}

}