@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test ensures that an asset library custom document entry can be displayed with the default display page template on a connected site."
	@priority = "5"
	test CanViewDepotDMUsingDepotType {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		JSONDepot.updateStructureState(
			groupName = "Test Site Name",
			structureState = "Available");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			depotDocumentType = "true",
			depotName = "Test Depot Name",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			composition = "true",
			fragmentName = "Banner Center");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Paragraph",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Text");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "Text");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureAddSiteScopes(depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		DMDocument.viewPGViaAP(
			contentList = "DM Document Title,Text",
			displayPageTemplate = "true",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test ensures that an asset library document entry created with a type stored in the global site can be displayed with the default display page template on the generic site."
	@priority = "5"
	test CanViewDepotDMUsingGlobalType {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "global");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			displayPageTemplateEntryName = "Display Page Name",
			globalDocumentType = "true",
			groupName = "Test Site Name",
			subType = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			composition = "true",
			fragmentName = "Banner Center");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Paragraph",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Text");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "Text");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureAddSiteScopes(depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		DMDocument.viewPGViaAP(
			contentList = "DM Document Title,Text",
			displayPageTemplate = "true",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test ensures that an asset library custom article can be displayed with the default display page template on a connected site."
	@priority = "5"
	test CanViewDepotWCUsingDepotStructure {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		JSONDepot.updateStructureState(
			groupName = "Test Site Name",
			structureState = "Available");

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			depotName = "Test Depot Name",
			depotStructure = "true",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "WC Structure Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			composition = "true",
			fragmentName = "Banner Center");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Paragraph",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Text");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentText = "WC WebContent Content",
			webContentTitle = "WC Webcontent Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureAddSiteScopes(depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		DisplayPageTemplatesAdmin.viewPGViaAP(
			contentList = "WC Webcontent Title,WC WebContent Content",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC Webcontent Title");
	}

	@description = "This test ensures that an asset library article created with a structure stored in the global site can be displayed with the default display page template on the generic site."
	@priority = "5"
	test CanViewDepotWCUsingGlobalStructure {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "global");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Name",
			globalStructure = "true",
			groupName = "Test Site Name",
			subType = "WC Structure Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			composition = "true",
			fragmentName = "Banner Center");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Paragraph",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Text");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentText = "WC WebContent Content",
			webContentTitle = "WC Webcontent Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureAddSiteScopes(depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		DisplayPageTemplatesAdmin.viewPGViaAP(
			contentList = "WC Webcontent Title,WC WebContent Content",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC Webcontent Title");
	}

	@description = "This test ensures that a site document entry created with a type stored in an asset library can be displayed with the default display page template on a connected site."
	@priority = "5"
	test CanViewSiteDMUsingDepotType {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		JSONDepot.updateStructureState(
			groupName = "Test Site Name",
			structureState = "Available");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			depotDocumentType = "true",
			depotName = "Test Depot Name",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			composition = "true",
			fragmentName = "Banner Center");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Paragraph",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Text");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "Text");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureAddSiteScopes(depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		DMDocument.viewPGViaAP(
			contentList = "DM Document Title,Text",
			displayPageTemplate = "true",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test ensures that a site article created with a structure stored in an asset library can be displayed with the default display page template on a connected site."
	@priority = "5"
	test CanViewSiteWCUsingDepotStructure {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		JSONDepot.updateStructureState(
			groupName = "Test Site Name",
			structureState = "Available");

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			depotName = "Test Depot Name",
			depotStructure = "true",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Test Site Name",
			subType = "WC Structure Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			composition = "true",
			fragmentName = "Banner Center");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Paragraph",
			id = "element-text");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Text");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentText = "WC WebContent Content",
			webContentTitle = "WC Webcontent Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		DisplayPageTemplatesAdmin.viewPGViaAP(
			contentList = "WC Webcontent Title,WC WebContent Content",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC Webcontent Title");
	}

	@description = "This test ensures that a user can map the display page with Open Graph when using the DM type from AL on a connect site."
	@priority = "5"
	@refactorneeded
	test MapDMWithOpenGraph {
		var portalURL = PropsUtil.get("portal.url");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Test Site Name",
			tableEntryText = "Yes");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Document",
			displayPageName = "Display Page Template Name",
			subType = "DM Document Type Name");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		Navigator.gotoNavNested(navNested = "Open Graph");

		OpenGraph.mapEditableTextToField(
			field = "File Name",
			mappedField = "Title",
			mappedFieldName = "Title",
			mappedFieldText = "Title is ",
			textType = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "MIME Type",
			mappedField = "Description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Author Name",
			mappedField = "ImageAlt",
			mappedFieldName = "Image Alt Description",
			mappedFieldText = "Image Alt is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Preview Image",
			mappedFieldName = "Image");

		Button.clickSave();

		OpenGraph.viewMappedField(
			mappedField = "Title",
			mappedFieldValue = "Title is File Name: ${fileName}");

		OpenGraph.viewMappedField(
			mappedField = "Description",
			mappedFieldValue = "Description is MIME Type: ${mimeType}");

		OpenGraph.viewMappedField(
			mappedField = "Image",
			mappedFieldValue = "Document: Preview Image");

		OpenGraph.viewMappedField(
			mappedField = "ImageAlt",
			mappedFieldValue = "Image Alt is Author Name: ${authorName}",
			textType = "TextArea");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "DM Document Text");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "Document_1.jpg",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		var dmFileEntryID = JSONDocument.getFileEntryId(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Site Name");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Test Site Name", site = "true");

		User.logoutPG();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/d/${dmFileEntryID}");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="Title is File Name: Document_1.jpg","og:description" content="Description is MIME Type: image/jpeg"''');

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:image:alt" content="Image Alt is Author Name: Test Test","og:image" content="${portalURL}/documents/${siteID}/0/Document_1.jpg''');
	}

	@description = "This test ensures that a user can map the display page with SEO when using the DM type from AL on a connect site."
	@priority = "5"
	@refactorneeded
	test MapDMWithSEO {
		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Test Site Name",
			tableEntryText = "Yes");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Document",
			displayPageName = "Display Page Template Name",
			subType = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		OpenGraph.mapEditableTextToField(
			field = "File Name",
			mappedField = "HTML Title",
			mappedFieldName = "HTML Title",
			mappedFieldText = "HTML Title is ",
			textType = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "MIME Type",
			mappedField = "description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textType = "TextArea");

		Button.clickSave();

		OpenGraph.viewMappedField(
			mappedField = "title",
			mappedFieldValue = "HTML Title is File Name: ${fileName}");

		OpenGraph.viewMappedField(
			mappedField = "description",
			mappedFieldValue = "Description is MIME Type: ${mimeType}",
			textType = "TextArea");
	}

	@description = "This test ensures that a user can map the display page with Open Graph when using the WC structure from AL on a connect site."
	@priority = "5"
	@refactorneeded
	test MapWCWithOpenGraph {
		var portalURL = PropsUtil.get("portal.url");

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		var textNumber = DataEngine.addField(
			textNumber = "true",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Depot Name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Test Site Name",
			tableEntryText = "Yes");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Web Content Article",
			displayPageName = "Display Page Template Name",
			subType = "WC Structure Name");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		Navigator.gotoNavNested(navNested = "Open Graph");

		OpenGraph.mapEditableTextToField(
			field = "Text",
			mappedField = "Title",
			mappedFieldName = "Title",
			mappedFieldText = "Title is ",
			textType = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "Text",
			mappedField = "Description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Text",
			mappedField = "ImageAlt",
			mappedFieldName = "Image Alt Description",
			mappedFieldText = "Image Alt is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Small Image",
			mappedFieldName = "Image");

		Button.clickSave();

		var mappedFieldValue = StringUtil.add("Title is Text: ${", "${textNumber}","");

		var mappedFieldValue = StringUtil.add("${mappedFieldValue}", "}","");

		OpenGraph.viewMappedField(
			mappedField = "Title",
			mappedFieldValue = "${mappedFieldValue}");

		var mappedFieldValue = StringUtil.add("Description is Text: ${", "${textNumber}","");

		var mappedFieldValue = StringUtil.add("${mappedFieldValue}", "}","");

		OpenGraph.viewMappedField(
			mappedField = "Description",
			mappedFieldValue = "${mappedFieldValue}");

		OpenGraph.viewMappedField(
			mappedField = "Image",
			mappedFieldValue = "WC Structure Name: Small Image");

		var mappedFieldValue = StringUtil.add("Image Alt is Text: ${", "${textNumber}","");

		var mappedFieldValue = StringUtil.add("${mappedFieldValue}", "}","");

		OpenGraph.viewMappedField(
			mappedField = "ImageAlt",
			mappedFieldValue = "${mappedFieldValue}",
			textType = "TextArea");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "Asset Library Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContentNavigator.openToEditWCInSite(
			groupName = "Test Site Name",
			siteURLKey = "test-site-name",
			webContentTitle = "Web Content Title");

		WebContent.editDisplayPage(pageName = "Display Page Template Name");

		WebContent.addFeaturedImageFromURL(imageSourceURL = "https://dummyimage.com/600x400/000/fff.jpg");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/web-content-title");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="Title is Text: Asset Library Text","og:description" content="Description is Text: Asset Library Text"''');

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:image:alt" content="Image Alt is Text: Asset Library Text","og:image" content="https://dummyimage.com/600x400/000/fff.jpg"''');
	}

	@description = "This test ensures that a user can map the display page with SEO when using the WC structure from AL on a connect site."
	@priority = "5"
	@refactorneeded
	test MapWCWithSEO {
		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		var textNumber = DataEngine.addField(
			textNumber = "true",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Depot Name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Test Site Name",
			tableEntryText = "Yes");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Web Content Article",
			displayPageName = "Display Page Template Name",
			subType = "WC Structure Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		OpenGraph.mapEditableTextToField(
			field = "Text",
			mappedField = "HTML Title",
			mappedFieldName = "HTML Title",
			mappedFieldText = "HTML Title is ",
			textType = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "Text",
			mappedField = "description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textType = "TextArea");

		Button.clickSave();

		var mappedFieldValue = StringUtil.add("HTML Title is Text: ${", "${textNumber}","");

		var mappedFieldValue = StringUtil.add("${mappedFieldValue}", "}","");

		OpenGraph.viewMappedField(
			mappedField = "title",
			mappedFieldValue = "${mappedFieldValue}");

		var mappedFieldValue = StringUtil.add("Description is Text: ${", "${textNumber}","");

		var mappedFieldValue = StringUtil.add("${mappedFieldValue}", "}","");

		OpenGraph.viewMappedField(
			mappedField = "description",
			mappedFieldValue = "${mappedFieldValue}",
			textType = "TextArea");
	}

	@description = "This test ensures that a user can view the image using display page template with DM type from AL on a connect site."
	@priority = "5"
	@refactorneeded
	test ViewImage {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Test Site Name",
			tableEntryText = "Yes");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Document",
			displayPageName = "Display Page Template Name",
			subType = "DM Document Type Name");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "DM Document Text");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "Document_1.jpg",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		var dmFileEntryID = JSONDocument.getFileEntryId(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Site Name");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/d/${dmFileEntryID}");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "PageEditor#ENTRY_COVER_IMAGE");
	}

	@description = "This test ensures that a user can view the web content using display page template with WC structure from AL on a connect site."
	@priority = "5"
	@refactorneeded
	test ViewWC {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Depot Name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Test Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Test Site Name",
			tableEntryText = "Yes");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Web Content Article",
			displayPageName = "Display Page Template Name",
			subType = "WC Structure Name");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "Asset Library Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Web Content",
			entryTitle = "Web Content Title",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/web-content-title");

		AssertTextEquals(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "Asset Library Text");
	}

}