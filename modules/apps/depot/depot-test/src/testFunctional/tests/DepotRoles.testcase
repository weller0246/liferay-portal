@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test covers LPS-113731. It ensures that roles and permissions from a library are removed after membership is revoked."
	@priority = "5"
	@refactorneeded
	test AccessALAfterRevokingMembership {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "Depot Regrole Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignUserAsMember(
			depotName = "Test Depot Name",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Depot.assignAssetLibraryRole(
			resourceName = "userfn userln",
			roleTitle = "Asset Library Administrator");

		Depot.removeMember(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoMemberships();

		AssertElementNotPresent(
			key_depotName = "Test Depot Name",
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_TABLE_NAME",
			value1 = "Test Depot Name");

		UserNavigator.gotoRoles();

		AssertElementNotPresent(
			key_depotRoleName = "Asset Library Administrator",
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_ROLES_TABLE_NAME",
			value1 = "Asset Library Administrator");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Asset Libraries");

		AssertElementNotPresent(
			key_card = "Test Depot Name",
			locator1 = "Card#CARD_ELLIPSIS");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			noViewApplicationPermission = "true");
	}

	@description = "This ensures that the Asset Library Connected Site Members role does not appear in user roles even after it is automatically assigned to a connected site member. This test also covers permissions and makes sure the library asset can be updated by the role."
	@priority = "5"
	@refactorneeded
	test AddSiteMemberWithPermissionsAfterConnectingSite {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "user1@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			password = "password",
			userEmailAddress = "user1@liferay.com",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Site.assignUserSitesCP(
			siteName = "Site Name",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoRoles();

		AssertTextEquals(
			locator1 = "Message#EMPTY_DEPOT_ROLE",
			value1 = "This user is not assigned any asset library roles.");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		AssertTextEquals(
			key_itemName = "Asset Library Connected Site Member",
			locator1 = "ListGroupItem#ITEM_SUB_INFO",
			value1 = "This role is automatically assigned.");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name",
			widgetName = "Web Content Display");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.gotoPermissions(webContentTitle = "WC WebContent Title");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.gotoPermissions(webContentTitle = "WC WebContent Title");

		Role.removePermissionPG(
			permissionDefinitionKey = "INLINE_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "user");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "user1@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		AssertElementNotPresent(locator1 = "WCD#WEB_CONTENT_CONTENT");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		PermissionsInline.gotoWCArticle(webContentTitle = "WC WebContent Title");

		for (var permissionDefinitionKey : list "INLINE_PERMISSIONS_UPDATE_CHECKBOX,INLINE_PERMISSIONS_VIEW_CHECKBOX") {
			Role.definePermissionPG(
				permissionDefinitionKey = "${permissionDefinitionKey}",
				roleTitle = "asset-library-connected-site-member");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "user1@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Depot");

		WebContentDisplayPortletNavigator.gotoArticleEllipsisMenu(webContentTitle = "WC WebContent Title");

		MenuItem.viewPresent(menuItem = "Edit Web Content");
	}

	@description = "This ensures that the user can perform CRUD operations with an AL role that has all WC permissions."
	@priority = "5"
	@refactorneeded
	test AssignALRoleWithAllWCPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		for (var resourceActionIndex : list "ADD_ARTICLE,ADD_FEED,ADD_FOLDER,ADD_STRUCTURE,ADD_TEMPLATE,PERMISSIONS,SUBSCRIBE,UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		for (var resourceActionIndex : list "ADD_DISCUSSION,DELETE,DELETE_DISCUSSION,EXPIRE,PERMISSIONS,SUBSCRIBE,UPDATE,UPDATE_DISCUSSION,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignAssetLibraryRole(
			resourceName = "userfn userln",
			roleTitle = "AL Role Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openToEditWCEntry(
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		DepotNavigator.openToEditWCEntry(
			depotName = "Test Depot Name",
			version = "1.1",
			webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This ensures that the user can edit documents with an AL role that has edit documents permissions."
	@priority = "5"
	@refactorneeded
	test AssignALRoleWithDMEditPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_document_library_web_portlet_DLAdminPortlet",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library",
			roleTitle = "AL Role Name",
			roleType = "asset library");

		for (var resourceActionIndex : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "AL Role Name",
				roleType = "asset library");
		}

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignAssetLibraryRole(
			resourceName = "userfn userln",
			roleTitle = "AL Role Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		AssertElementNotPresent(locator1 = "Button#PLUS");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This ensures that an asset library role can be deleted."
	@priority = "5"
	@refactorneeded
	test DeleteALRole {
		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_APPLICATIONS_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENT_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			roleTitle = "AL Role Name",
			roleType = "Asset Library");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.deleteCP(roleTitle = "AL Role Name");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.viewDefaultCP(roleTitle = "AL Role Name");
	}

	@description = "This ensures that an asset library role can be edited."
	@priority = "5"
	@refactorneeded
	test EditALRole {
		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Asset Library");

		Role.add(roleTitle = "AL Role Name");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_APPLICATIONS_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENT_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			roleTitle = "AL Role Name",
			roleType = "Asset Library");

		Role.openRolesAdmin();

		Role.viewCP(
			roleTitle = "AL Role Name",
			roleType = "Asset Library");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENTS_ADD_DOCUMENT_CHECKBOX",
			permissionDefinitionValue = "Add Document",
			roleTitle = "AL Role Name",
			roleTitleEdit = "AL Role Name Edit",
			roleType = "Asset Library");
	}

	@description = "This ensures that an asset library role can be edited."
	@priority = "5"
	@refactorneeded
	test ViewALAdminRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignUserAsMember(
			depotName = "Test Depot Name",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignAssetLibraryRole(
			roleTitle = "Asset Library Administrator",
			userScreenName = "usersn");

		Role.openRolesAdmin();

		Navigator.gotoNavItem(navItem = "Asset Library Roles");

		PermissionsInline.gotoRolePermissions(roleName = "Asset Library Content Reviewer");

		Role.definePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_ASSIGN_MEMBERS_CHECKBOX",
			roleTitle = "Asset Library Administrator");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		DepotNavigator.openDepotMembershipsAdmin(depotName = "Test Depot Name");

		LexiconCard.clickEllipsisItem(
			card = "userfn userln",
			item = "Assign Roles");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertTextEquals(
			key_card = "Asset Library Content Reviewer",
			locator1 = "Card#CARD_TITLE",
			value1 = "Asset Library Content Reviewer");

		AssertElementNotPresent(
			key_card = "Asset Library Administrator",
			locator1 = "Card#CARD_TITLE");

		AssertElementNotPresent(
			key_card = "Asset Library Owner",
			locator1 = "Card#CARD_TITLE");
	}

	@description = "This ensures that the Asset Library Connected Site Members role does not appear in user roles even it is automatically assigned to an existing site member after connecting site."
	@priority = "5"
	@refactorneeded
	test ViewExistingSiteMemberAfterConnectingSite {
		JSONUser.addUser(
			userEmailAddress = "user1@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			password = "password",
			userEmailAddress = "user1@liferay.com",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		JSONGroup.addGroup(groupName = "Site Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Site.assignUserSitesCP(
			siteName = "Site Name",
			userScreenName = "usersn");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoRoles();

		AssertTextEquals(
			locator1 = "Message#EMPTY_DEPOT_ROLE",
			value1 = "This user is not assigned any asset library roles.");

		AssertClick(
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_ROLES_SELECT_LINK",
			value1 = "SELECT");

		SelectFrame(locator1 = "IFrame#SELECT_DEPOT_ROLE");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO_TAGLIB",
			value1 = "No asset libraries were found.");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoRoles();

		AssertClick(
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_ROLES_SELECT_LINK",
			value1 = "SELECT");

		SelectFrame(locator1 = "IFrame#SELECT_DEPOT_ROLE");

		AssertElementNotPresent(
			key_roleTitle = "Asset Library Connected Site Member",
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_ROLES_TITLE");
	}

}