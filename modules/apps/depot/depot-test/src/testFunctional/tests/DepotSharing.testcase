@component-name = "portal-document-management"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test asserts that users get the proper notification based on depot sharing permissions granted to him."
	@priority = "5"
	@refactorneeded
	test AssertNotifications {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.png,Document_3.odt");

		DepotNavigator.gotoShare(dmDocumentTitle = "Document_1");

		Asset.share(
			noAutocomplete = "true",
			sharingPermissions = "View",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "Cards");

		AssertVisible(
			key_dmDocumentTitle = "Document_1",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_SHARED");

		DepotNavigator.gotoShare(dmDocumentTitle = "Document_2");

		Asset.share(
			sharingPermissions = "Update",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertVisible(
			key_dmDocumentTitle = "Document_2",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_SHARED");

		DepotNavigator.gotoShare(dmDocumentTitle = "Document_3");

		Asset.share(
			sharingPermissions = "Comment",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		AssertVisible(
			key_dmDocumentTitle = "Document_3",
			locator1 = "DocumentsAndMedia#TABLE_DOCUMENT_SHARED");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "3");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "Document_1",
			ownerName = "Test Test");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "updating",
			contentTitle = "Document_2",
			openNotification = "true",
			ownerName = "Test Test");

		NotificationsPortlet.configureNotificationPG(menuItem = "Edit");

		DMDocument.editCmd(dmDocumentTitleEdit = "DM Document Title");

		Button.clickPublish();

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = "Document_3",
			ownerName = "Test Test");
	}

	@description = "This test ensures that depot sharing can be disabled at the instance level."
	@priority = "4"
	test CanDisableDepotSharingAtInstanceScope {
		property test.name.skip.portal.instance = "DepotSharing#CanDisableDepotSharingAtInstanceScope";

		DepotNavigator.openToConfigSharingInInstanceSettings();

		FormFields.disableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		DepotNavigator.openDepotSettingsGeneral(depotName = "Test Depot Name");

		AssertElementNotPresent(
			key_panel = "Sharing",
			locator1 = "Panel#PANEL");
	}

	@description = "This test ensures that depot sharing can be disabled at the system level."
	@priority = "4"
	test CanDisableDepotSharingAtSystemScope {
		property test.name.skip.portal.instance = "DepotSharing#CanDisableDepotSharingAtSystemScope";

		DepotNavigator.openToConfigSharingInSystemSettings();

		FormFields.disableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		DepotNavigator.openDepotSettingsGeneral(depotName = "Test Depot Name");

		AssertElementNotPresent(
			key_panel = "Sharing",
			locator1 = "Panel#PANEL");
	}

	@description = "This test ensures that sharing can be disabled in a depot."
	@priority = "5"
	@refactorneeded
	test DisableSharing {
		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Click(
			key_dmDocumentTitle = "Document_1.doc",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

		MenuItem.viewPresent(menuItem = "Share");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		Depot.configureSharing(sharing = "Disabled");

		DepotNavigator.openDepotSettingsGeneral(depotName = "Test Depot Name");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_toggleSwitchLabel = "Enable Sharing",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.txt",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Click(
			key_dmDocumentTitle = "Document_1.txt",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

		MenuItem.viewNotPresent(menuItem = "Share");
	}

	@description = "This test ensures that sharing a depot document to a user, and changing its sharing permissions via Manage Collaborators."
	@priority = "5"
	@refactorneeded
	test ManageCollaborators {
		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.gotoShare(dmDocumentTitle = "Document_1.doc");

		Asset.share(
			noAutocomplete = "true",
			sharingPermissions = "View",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.doc");

		DMDocumentSharing.changePermission(
			depotName = "Test Depot Name",
			dmDocumentTitle = "Document_1.doc",
			selectPermission = "Can Comment",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = "Document_1.doc",
			openNotification = "true",
			ownerName = "Test Test");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertElementPresent(locator1 = "CKEditor#BODY");

		SelectFrame(value1 = "relative=top");

		AssertElementNotPresent(locator1 = "Button#EDIT");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "Shared Content");

		AssertTextEquals(
			key_contentTitle = "Document_1.doc",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_TITLE",
			value1 = "Document_1.doc");

		AssertElementNotPresent(
			key_contentTitle = "Document_1.doc",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_TITLE_2");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.doc");

		DMDocumentSharing.changePermission(
			depotName = "Test Depot Name",
			dmDocumentTitle = "Document_1.doc",
			selectPermission = "Can Update",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "updating",
			contentTitle = "Document_1.doc",
			openNotification = "true",
			ownerName = "Test Test");

		NotificationsPortlet.configureNotificationPG(menuItem = "Edit");

		DMDocument.editCmd(dmDocumentTitleEdit = "DM Document Title");

		Button.clickPublish();

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "Shared Content");

		AssertTextEquals(
			key_contentTitle = "DM Document Title",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_TITLE",
			value1 = "DM Document Title");

		AssertElementNotPresent(
			key_contentTitle = "DM Document Title",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_TITLE_2");
	}

	@description = "This test ensures that the same document can be shared by different users with sharing permissions."
	@priority = "4"
	@refactorneeded
	test ShareSameDocumentByDifferentUsers {
		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.gotoShare(dmDocumentTitle = "Document_1.jpg");

		Asset.share(
			sharingPermissions = "View",
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2 userln2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.gotoShareFromInfoPanel(dmDocumentTitle = "Document_1.jpg");

		Asset.share(
			sharingPermissions = "Update",
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2 userln2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		UserBar.gotoDropdownItem(dropdownItem = "Shared Content");

		AssertTextEquals(
			key_contentTitle = "Document_1.jpg",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_TITLE",
			value1 = "Document_1.jpg");

		AssertElementNotPresent(
			key_contentTitle = "Document_1.jpg",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_TITLE_2");
	}

	@description = "This test makes sure all collaborators will view all collaborators of a depot document that was shared to him. It also covers that a user can successfully remove collaborators through Manage Collaborators and asserts that empty message displays when all collaborators are removed."
	@priority = "5"
	@refactorneeded
	test ViewAndRemoveCollaborators {
		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.gotoShare(dmDocumentTitle = "Document_1.doc");

		Asset.share(
			sharingPermissions = "View",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.gotoShare(dmDocumentTitle = "Document_1.doc");

		Asset.share(
			sharingPermissions = "View",
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2 userln2");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.doc");

		DMDocumentSharing.viewSharedFlag(detailsView = "true");

		DMDocumentSharing.viewCollaborators(collaboratorList = "userfn,userfn2");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.doc");

		DMDocumentSharing.removeCollaborator(
			collaboratorList = "userfn,userfn2",
			emptyStateMessage = "true");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "Shared Content");

		AssertTextEquals(
			locator1 = "Message#NO_ENTRIES",
			value1 = "No entries were found.");
	}

}