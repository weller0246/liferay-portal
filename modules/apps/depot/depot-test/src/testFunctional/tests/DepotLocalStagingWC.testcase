@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONStaging.enableLocalStaging(
			groupName = "Test Depot Name",
			site = "false");

		JSONStaging.enableLocalStaging(groupName = "Site Name");
	}

	tearDown {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DepotNavigator.gotoPortlet(portlet = "Staging");

		Depot.deactivateStaging(siteName = "Test Depot Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.deactivateStagingCP(siteName = "Site Name");

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that image in basic article in depot can be deleted and republished in staging site when enabling local staging."
	@priority = "5"
	@refactorneeded
	test DeleteImageInDepot {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Test Depot Name-staging",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		ItemSelector.gotoItemSelectorViaCKEditor();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoPreviewEntryCP(
			liveSite = "true",
			webContentTitle = "WC WebContent Title");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			key_imageTitle = "Document_2.jpg",
			locator1 = "WCPreview#PREVIEW_IMAGE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		WebContentNavigator.openToEditWCInSite(
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name",
			staging = "true",
			webContentTitle = "WC WebContent Title");

		CKEditor.addSourceContent(content = " ");

		SelectFrame(value1 = "relative=top");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected web content?",
			entry = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoPreviewEntryCP(
			liveSite = "true",
			webContentTitle = "WC WebContent Title");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementNotPresent(
			key_imageTitle = "Document_2.jpg",
			locator1 = "WCPreview#PREVIEW_IMAGE");
	}

	@description = "This ensures that friendly URL in basic article in depot can be edited and republished in staging site when enabling local staging."
	@priority = "5"
	@refactorneeded
	test EditFriendlyURLInDepot {
		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithFriendlyURL(
			friendlyUrl = "friendlyurl",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			depotName = "Test Depot Name",
			webContentTitle = "Web Content Title");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortletNavigator.gotoEdit(
			menuItem = "Edit Web Content",
			webContentTitle = "Web Content Title");

		Panel.expandPanel(panel = "Friendly URL");

		AssertTextEquals(
			locator1 = "TextInput#FRIENDLY_URL",
			value1 = "friendlyurl");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.editFriendlyURL(webContentFriendlyURL = "friendlyUrledit");

		PortletEntry.publish();

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortletNavigator.gotoEdit(
			menuItem = "Edit Web Content",
			webContentTitle = "Web Content Title");

		Panel.expandPanel(panel = "Friendly URL");

		AssertTextEquals(
			locator1 = "TextInput#FRIENDLY_URL",
			value1 = "friendlyurledit");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");
	}

	@description = "This ensures that image in basic article in depot can be edited and republished in staging site when enabling local staging."
	@priority = "5"
	@refactorneeded
	test EditImageInDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		AssertTextEquals(
			locator1 = "Staging#STAGING_INDICATOR_TITLE_DEPOT",
			value1 = "Live");

		DepotNavigator.switchStagingStatus(stagingItem = "Staging");

		AssertTextEquals(
			locator1 = "Staging#STAGING_INDICATOR_TITLE_DEPOT",
			value1 = "Staging");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Test Depot Name-staging",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		ItemSelector.gotoItemSelectorViaCKEditor();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoPreviewEntryCP(
			liveSite = "true",
			webContentTitle = "WC WebContent Title");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			key_imageTitle = "Document_2.jpg",
			locator1 = "WCPreview#PREVIEW_IMAGE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_3.jpg",
			dmDocumentFileNameEdit = "Document_3.jpg",
			dmDocumentTitle = "Document_2.jpg",
			dmDocumentTitleEdit = "Document_3.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected web content?",
			entry = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoPreviewEntryCP(
			liveSite = "true",
			webContentTitle = "WC WebContent Title");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			key_imageTitle = "Document_3.jpg",
			locator1 = "WCPreview#PREVIEW_IMAGE");
	}

	@description = "This ensures that an article using a structure stored in depot can be deleted and republished in staging site when enabling local staging."
	@priority = "5"
	@refactorneeded
	test PublishDeletedWCCustomization {
		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Site Name",
			tableEntryText = "Yes");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContent.deleteStagedCP(
			pageName = "Test Page",
			siteName = "Site Name",
			webContentTitle = "Web Content Title");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
	}

	@description = "This ensures that an article using a structure stored in depot can be edited and republished in staging site when enabling local staging."
	@priority = "5"
	@refactorneeded
	test PublishEditedWCCustomization {
		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			disconnectDisabled = "true",
			siteName = "Site Name",
			tableEntryText = "Yes");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.viewTitle(
			onLive = "true",
			webContentTitle = "Web Content Title");

		WebContentNavigator.openToEditWCInSite(
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name",
			staging = "true",
			webContentTitle = "Web Content Title");

		WebContent.editCP(
			webContentTitle = "Web Content Title",
			webContentTitleEdit = "Web Content Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected web content?",
			entry = "Web Content Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.viewTitle(
			onLive = "true",
			webContentTitle = "Web Content Title Edit");
	}

	@description = "This ensures that web content with a category in depot can be published in local staging site."
	@priority = "4"
	@refactorneeded
	test PublishWCWithCategory {
		DepotNavigator.openDepotCategoriesAdminStaging(depotName = "Test Depot Name");

		Vocabulary.addCP(vocabularyName = "Vocabulary Name");

		Category.addCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Depot web content with a category",
			webContentTitle = "WC WebContent Title");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertTextEquals(
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_CONTENT",
			value1 = "Depot web content with a category");
	}

	@description = "This test ensures that a depot WC with an embedded video added from the item selector can be published on a connected local staging site."
	@priority = "4"
	@refactorneeded
	test PublishWCWithEmbeddedVideo {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Embedded Video Depot Name");

		JSONGroup.addGroup(groupName = "Test Embedded Video Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Embedded Video Site Name",
			layoutName = "Test Page");

		JSONDepot.connectSite(
			depotName = "Test Embedded Video Depot Name",
			groupName = "Test Embedded Video Site Name");

		JSONStaging.enableLocalStaging(
			groupName = "Test Embedded Video Depot Name",
			site = "false");

		JSONStaging.enableLocalStaging(groupName = "Test Embedded Video Site Name");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Embedded Video Depot Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			embedVideo = "true",
			extractedVideoShortcutTitle = "Liferay Digital Experience Platform",
			videoShortcutDescription = "Video Shortcut Description",
			videoShortcutPreview = "https://www.youtube.com",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://youtu.be/HOdbzGCI5ME",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Embedded Video Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Test Embedded Video Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			depotName = "Test Embedded Video Depot Name",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Test Embedded Video Site Name");

		AssertVisible(
			key_service = "youtube",
			locator1 = "WCPreview#BODY_FIELD_VIDEO");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Test Embedded Video Site Name");

		AssertVisible(
			key_service = "youtube",
			locator1 = "WCPreview#BODY_FIELD_VIDEO");
	}

	@description = "This ensures that a web content folder with an article in depot can be published in AP through widget config manual selection when enabling local staging."
	@priority = "5"
	@refactorneeded
	test PublishWebContentFolder {
		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC Folder Name",
			assetType = "Web Content Folder",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetDetailsPG(
			assetArticleDetails = "1 Article",
			assetSubfolderDetails = "0 Subfolders",
			assetTitle = "WC Folder Name",
			assetType = "Web Content Folder");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_assetTitle = "WC Folder Name",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetDetailsPG(
			assetArticleDetails = "1 Article",
			assetSubfolderDetails = "0 Subfolders",
			assetTitle = "WC Folder Name",
			assetType = "Web Content Folder");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DepotNavigator.gotoPortlet(portlet = "Staging");

		Depot.deactivateStaging(siteName = "Test Depot Name");
	}

}