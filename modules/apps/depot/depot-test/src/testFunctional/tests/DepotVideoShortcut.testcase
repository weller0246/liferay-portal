@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			JSONGroup.deleteGroupByName(groupName = "Site Name");

			User.logoutPG();
		}
	}

	@description = "This ensures that a user is able to embed a depot external video in a blog entry on a connected site."
	@priority = "5"
	@refactorneeded
	test AddBlogEntryWithEmbeddedVideo {
		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Blogs");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Blogs.addEntry(
			depotName = "Test Depot Name",
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title",
			navTab = "Documents and Media",
			videoShortcutTitle = "Test YouTube Video",
			viewVideoHelpMessage = "true");

		Navigator.openSiteURL(siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "video",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test ensures that a YouTube shortened URL video added via item selector can be embedded when adding a depot WC."
	@priority = "4"
	@refactorneeded
	test AddWithShortenedURLToWCViaItemSelector {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Shortened URL Depot Name");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Shortened URL Depot Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			embedVideo = "true",
			extractedVideoShortcutTitle = "Liferay Digital Experience Platform",
			videoShortcutDescription = "Video Shortcut Description",
			videoShortcutPreview = "https://www.youtube.com",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://youtu.be/HOdbzGCI5ME",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Shortened URL Depot Name");

		WebContentNavigator.gotoPreviewEntryCP(webContentTitle = "WC WebContent Title");

		Pause(locator1 = "3000");

		SelectFrame(
			key_title = "WC WebContent Title",
			locator1 = "IFrame#MODAL_ANY");

		AssertVisible(
			key_service = "https://www.youtube.com",
			locator1 = "WCPreview#BODY_FIELD_VIDEO");
	}

	@description = "This ensures that a depot video shortcut associated with a tag can be searched from the connected site."
	@priority = "5"
	@refactorneeded
	test SearchForTag {
		property test.name.skip.portal.instance = "DepotVideoShortcut#SearchForTag";

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Search Bar");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Search Results");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			tagNameList = "depot",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		Search.searchCP(searchTerm = "depot");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test YouTube Video",
			searchAssetType = "Document");
	}

	@description = "This ensures that a depot video shortcut associated with a tag cannot be searched on a connected site when searching is disabled."
	@priority = "5"
	@refactorneeded
	test SearchForUnsearchableTag {
		property test.name.skip.portal.instance = "DepotVideoShortcut#SearchForUnsearchableTag";

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Search Bar");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Search Results");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			tagNameList = "depot",
			videoShortcutTitle = "Test Vimeo Video",
			videoURL = "https://vimeo.com/483035084");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureSearch(
			depotName = "Test Depot Name",
			item = "Make Unsearchable",
			siteList = "Site Name",
			tableEntryText = "No");

		Navigator.openSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		Search.searchCP(searchTerm = "depot");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "depot");
	}

	@description = "This ensures that a depot external video cannot be viewed from the disconnected site."
	@priority = "4"
	@refactorneeded
	test ViewFromDisconnectedSite {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONDepot.disconnectSite(groupName = "Site Name");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		ItemSelector.gotoItemSelectorViaAlloyEditor(video = "true");

		ItemSelector.configureFilterViaSelectFile(
			filterBy = "Everywhere",
			navTab = "Documents and Media");

		AssertElementNotPresent(
			key_card = "Test YouTube Video",
			locator1 = "Card#CARD_TITLE");
	}

	@description = "This ensures that a depot video shortcut can be used through Related Assets on a connected site."
	@priority = "3"
	@refactorneeded
	test ViewInRelatedAssets {
		property test.name.skip.portal.instance = "DepotVideoShortcut#ViewInRelatedAssets";

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Asset Publisher");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		RelatedAssets.selectAsset(
			assetTitle = "Test YouTube Video",
			assetType = "External Video Shortcut",
			depotName = "Test Depot Name");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Related Assets");

		Navigator.openSiteURL(siteName = "Site Name");

		AssetPublisherPortlet.viewPG(
			assetContent = "WC WebContent Content",
			assetTitle = "WC WebContent Title",
			relatedAssetTitle = "Test YouTube Video");

		Click(
			key_relatedAssetTitle = "Test YouTube Video",
			locator1 = "AssetRelatedAssets#ASSET_TITLE");

		Pause(locator1 = "3000");

		AssertVisible(
			key_videoShortcutPreview = "https://www.youtube.com",
			locator1 = "DocumentsAndMediaDocument#VIDEO_SHORTCUT_PREVIEW");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#EXTERNAL_VIDEO_IFRAME");

		AssertElementPresent(locator1 = "Button#YOUTUBE_PLAY");
	}

}