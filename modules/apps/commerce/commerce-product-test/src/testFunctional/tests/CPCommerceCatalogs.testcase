@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6278. AddAnImageToCatalogAndRemove"
	@priority = "3"
	test AddAnImageToCatalogAndRemove {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Test Catalog");

		AssertClickNoError(
			locator1 = "Button#SUBMIT",
			value1 = "Submit");

		SelectFrameTop();

		AssertClick(
			locator1 = "CommerceEntry#PRODUCT_IMAGE_SELECT_FILE",
			value1 = "Select File");

		SelectFrameTop();

		CommerceItemSelector.uploadSingleFile(uploadFileName = "Commerce_Black.jpg");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click.clickNoWaitForVisible(
			key_value = "Test Catalog",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		Click.clickNoMouseOver(
			key_value = "Remove Image",
			locator1 = "Button#SECONDARY_BY_TITLE");

		AssertElementNotPresent(
			key_imageTitle = "Commerce_Black.jpg",
			locator1 = "WCPreview#PREVIEW_IMAGE");

		Button.clickSave();

		Click.clickNoWaitForVisible(
			key_value = "Test Catalog",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		AssertElementNotPresent(
			key_imageTitle = "Commerce_Black.jpg",
			locator1 = "WCPreview#PREVIEW_IMAGE");
	}

	@description = "Verify that by creating a new catalog with a language other than English, base pricelist and promotion will be translated into the new language and new product fields will have the new language as the default locale."
	@priority = "3"
	test CatalogProductsPromotionsAndPriceListsAreLocalized {
		property portal.acceptance = "false";

		task ("Given a catalog is created with Spanish set as the default catalog language") {
			CommerceJSONCatalogsAPI._addCatalog(
				catalogLanguage = "es_ES",
				catalogName = "Spanish Catalog");
		}

		task ("When the user goes to the price lists page") {
			CommercePriceLists.openPriceListsAdmin();
		}

		task ("Then the base price list name for the new catalog is in Spanish") {
			AssertElementPresent(
				key_entryName = "Spanish Catalog lista de precios base",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the user goes to the promotions page") {
			CommercePromotions.openPromotionsAdmin();
		}

		task ("Then the base promotion name for the new catalog is in Spanish") {
			AssertElementPresent(
				key_entryName = "Spanish Catalog promoci√≥n base",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the user creates a new product for the catalog") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Spanish Catalog",
				productName = "Test Product",
				productType = "Simple");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Product");
		}

		task ("Then the locale selected for the editable fields is Spanish") {
			AssertElementPresent(
				key_locale = "es-ES",
				locator1 = "Translation#CURRENT_LOCALE");
		}
	}

	test CreateNewCatalog {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Test Catalog");

		AssertClickNoError(
			locator1 = "Button#SUBMIT",
			value1 = "Submit");

		SelectFrameTop();

		Refresh();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		CommerceNavigator.gotoEntry(entryName = "Test Catalog");

		CommerceEntry.viewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Test Catalog");
	}

	@description = "This is a test for COMMERCE-6273. EditACatalog"
	@priority = "3"
	test EditACatalog {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Test Catalog");

		AssertClickNoError(
			locator1 = "Button#SUBMIT",
			value1 = "Submit");

		SelectFrameTop();

		Click(locator1 = "Icon#BACK");

		AssertElementPresent(
			key_entryName = "Test Catalog",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

		ClickNoError(
			key_entryName = "Test Catalog",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Edit");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Test Catalog Edited");

		Select(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Euro");

		AssertClick(
			locator1 = "CommerceEntry#PRODUCT_IMAGE_SELECT_FILE",
			value1 = "Select File");

		SelectFrameTop();

		CommerceItemSelector.uploadSingleFile(uploadFileName = "Commerce_Black.jpg");

		Button.clickSave();

		Alert.viewSuccessMessage();

		ClickNoError(
			key_entryName = "Test Catalog Edited",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Edit");

		AssertElementPresent(
			key_title = "Name",
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Test Catalog Edited");

		AssertElementPresent(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Euro");

		AssertElementPresent(
			key_imageTitle = "Commerce_Black",
			locator1 = "WCPreview#PREVIEW_IMAGE");
	}

	@description = "This is a test for COMMERCE-6279. EditAPermissionOnACatalog"
	@priority = "3"
	test EditAPermissionOnACatalog {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Test Catalog");

		AssertClickNoError(
			locator1 = "Button#SUBMIT",
			value1 = "Submit");

		SelectFrameTop();

		Click(locator1 = "Icon#BACK");

		Click(
			key_value = "Test Catalog",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Permissions");

		IFrame.selectPermissionsFrame();

		Check.checkToggleSwitch(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_VIEW_CHECKBOX");

		Check.checkToggleSwitch(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_PERMISSIONS_CHECKBOX");

		Check.checkToggleSwitch(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_DELETE_CHECKBOX");

		Check.checkToggleSwitch(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_UPDATE_CHECKBOX");

		Button.clickSave();

		Alert.viewSuccessMessage();

		SelectFrameTop();

		ClickNoError(
			key_modalTitle = "Permissions",
			locator1 = "Button#CLOSE_MODAL");

		Click(
			key_value = "Test Catalog",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Permissions");

		IFrame.selectPermissionsFrame();

		AssertChecked(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_UPDATE_CHECKBOX");

		AssertChecked(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_DELETE_CHECKBOX");

		AssertChecked(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_PERMISSIONS_CHECKBOX");

		AssertChecked(
			key_roleTitle = "user",
			locator1 = "Permissions#INLINE_PERMISSIONS_VIEW_CHECKBOX");
	}

	@description = "Verify that Master Catalog is created by default and cannot be deleted."
	@priority = "3"
	test MasterCatalogIsCreatedByDefaultAndCannotBeDeleted {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("When the admin goes to the catalogs page") {
			CommerceCatalog.openCatalogsAdmin();
		}

		task ("Then Master catalog is present") {
			AssertElementPresent(
				key_entryName = "Master",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the admin tries to delete the Master catalog") {
			ClickNoError(
				key_value = "Master",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			CommerceEntry.clickNoError(menuItem = "Delete");
		}

		task ("Then the Master catalog cannot be deleted") {
			AssertElementPresent(
				key_entryName = "Master",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "This is a test for COMMERCE-6272. RemoveACatalog"
	@priority = "3"
	test RemoveACatalog {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Test Catalog");

		AssertClickNoError(
			locator1 = "Button#SUBMIT",
			value1 = "Submit");

		SelectFrameTop();

		Click(locator1 = "Icon#BACK");

		ClickNoError(
			key_entryName = "Test Catalog",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			key_entryName = "Test Catalog",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");
	}

	@description = "Verify users without permission cannot add, edit, or delete catalogs."
	@priority = "3"
	test UserWithoutPermissionCannotAddEditOrDeleteCatalogs {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("And given the user has permission to view catalogs in the catalog section of the admin panel") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "User");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_commerce_catalog_web_internal_portlet_CommerceCatalogsPortlet",
				roleTitle = "User");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.commerce.product.model.CommerceCatalog",
				roleTitle = "User");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_COMMERCE_CATALOGS",
				resourceName = "com.liferay.commerce.catalog",
				roleTitle = "User");
		}

		task ("And given the user does not have permission to add, update, or delete catalogs") {
			Permissions.removePermissionViaAPI(
				resourceAction = "ADD_COMMERCE_CATALOG",
				resourceName = "com.liferay.commerce.catalog",
				roleTitle = "User");

			Permissions.removePermissionViaAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.commerce.product.model.CommerceCatalog",
				roleTitle = "User");

			Permissions.removePermissionViaAPI(
				resourceAction = "DELETE",
				resourceName = "com.liferay.commerce.product.model.CommerceCatalog",
				roleTitle = "User");
		}

		task ("When the user goes to the catalogs page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			CommerceCatalog.openCatalogsAdmin();
		}

		task ("Then the user cannot add a new catalog") {
			AssertElementNotPresent(locator1 = "Button#PLUS");
		}

		task ("And the user cannot edit or delete  a catalog") {
			AssertElementNotPresent(locator1 = "CommerceEntry#DROPDOWN");

			AssertElementNotPresent(locator1 = "Button#EDIT");

			AssertElementNotPresent(locator1 = "Button#DELETE");
		}
	}

	@description = "Verify users with the permission to edit catalog permissions can edit the permissions on a catalog."
	@priority = "3"
	test UserWithPermissionCanEditAPermissionOnACatalog {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("And given a catalog") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And given the user has permission to view catalogs in the admin panel and edit catalog permissions") {
			CommercePermissions.defineCatalogPermissionsViaJSONAPI(
				permissions = "true",
				roleTitle = "User",
				view = "true");
		}

		task ("When the user logs in and edits the catalog permissions") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			CommerceCatalog.openCatalogsAdmin();

			Click(
				key_indexNumber = "2",
				key_text = "Permissions",
				locator1 = "Button#ANY_N");

			IFrame.selectPermissionsFrame();

			CommercePermissions.defineSingleRolePermissionsPG(
				permissions = "delete,permissions,update,view",
				roleTitle = "Site Member");

			IFrame.closeFrame();
		}

		task ("Then those permissions should be saved on the catalog") {
			Click(
				key_indexNumber = "2",
				key_text = "Permissions",
				locator1 = "Button#ANY_N");

			CommercePermissions.assertSingleRolePermissionsPG(
				permissions = "delete,permissions,update,view",
				roleTitle = "Site Member");
		}
	}

}