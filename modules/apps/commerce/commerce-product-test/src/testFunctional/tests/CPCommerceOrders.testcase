@component-name = "portal-commerce"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			CommerceConfiguration.commerceAdminTearDown();

			CommerceConfiguration.commerceInitializersTearDown();

			User.logoutPG();
		}
	}

	@description = "This is a test for COMMERCE-6215. Maximum open order per account"
	@priority = "3"
	test AccountMaximumOpenOrderActive {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceOrders#AccountMaximumOpenOrderActive";

		// TODO Review

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.uncheckStrangersVerifyEmailCheckbox();

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Type(
			locator1 = "TextInput#NUMBER",
			value1 = "1");

		Button.clickSave();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Test Account",
			adminEmailAddress = "test@liferay.com");

		Click(
			key_navUnderline = "Members",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");

		CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
			emailAddress = "buyer@liferay.com",
			role = "Buyer");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "ttest",
			resetPassword = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();

		Alert.viewErrorMessage(errorMessage = "Unable to create a new order as the open order limit has been reached.");
	}

	@description = "This is a test for COMMERCE-6210. Shipment cancelled"
	@ignore = "true"
	@priority = "3"
	test CancelShipmentAndCreateNewFromPendingOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6210 CancelShipmentAndCreateNewFromPendingOrder Pending Implementation

	}

	@description = "This is a test for COMMERCE-5843. Deactivate Currency"
	@priority = "3"
	test DeactivateCurrency {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceOrders#DeactivateCurrency";

		// TODO Review

		var currencyName = "British Pound";
		var currencyAbbreviation = "GBP";
		var key_buttonAction = "Deactivate";
		var catalogName = "Master";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		CommerceNavigator.gotoEntry(entryName = "British Pound");

		ClickNoError(locator1 = "ToggleSwitch#ACTIVE");

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		CommerceNavigator.gotoEntry(entryName = "Minium");

		Click(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM");

		AssertElementNotPresent(
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "${currencyName}");

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Price Lists");

		CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

		Click(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM");

		AssertElementNotPresent(
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "${currencyAbbreviation}");

		Button.clickPublish();

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM");

		AssertElementNotPresent(
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "${currencyAbbreviation}");

		Button.clickSave();
	}

	test EditOrder {
		property portal.acceptance = "quarantine";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "CPCommerceOrders#EditOrder";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = "2");

		Pause(locator1 = "5000");

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "View Details");

		Button.click(button = "Checkout");

		Pause(locator1 = "3000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "ABS Sensor",
			productQuantity = "2",
			productUnitPrice = "50",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.editOrderItemDetails(
			orderItemQuantity = "4",
			orderItemSKU = "MIN93015");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.viewOrdersEntry(
			addressAddress = "Test Address",
			addressCity = "Test City",
			addressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = "4",
			productSKU = "MIN93015",
			productTotalPrice = "100.00");
	}

	@description = "This is a workaround for an issue with Minium's sidebar on CI"
	test EditOrderCheckingOutViaOrderDetails {
		property test.name.skip.portal.instance = "CPCommerceOrders#EditOrderCheckingOutViaOrderDetails";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = "2");

		Pause(locator1 = "5000");

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "View Details");

		Button.click(button = "Checkout");

		Pause(locator1 = "3000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "ABS Sensor",
			productQuantity = "2",
			productUnitPrice = "50",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.editOrderItemDetails(
			orderItemQuantity = "4",
			orderItemSKU = "MIN93015");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.viewOrdersEntry(
			addressAddress = "Test Address",
			addressCity = "Test City",
			addressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = "4",
			productSKU = "MIN93015",
			productTotalPrice = "100.00");
	}

	@description = "This is a test for COMMERCE-5980. As an order manager, I want to edit the payment method and payment status of a submitted order"
	@ignore = "true"
	@priority = "3"
	test EditOrderPaymentMethod {
		property portal.acceptance = "false";

		// TODO COMMERCE-5980 EditOrderPaymentMethod Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown

	}

	@description = "This is a test for COMMERCE-5980. As an order manager, I want to edit the payment method and payment status of a submitted order"
	@ignore = "true"
	@priority = "3"
	test EditOrderPaymentStatus {
		property portal.acceptance = "false";

		// TODO COMMERCE-5980 EditOrderPaymentStatus Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown

	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@priority = "3"
	test FilterOrderByAccount {
		property portal.acceptance = "Intern Test";
		property test.name.skip.portal.instance = "CPCommerceOrders#FilterOrderByAccount";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceAccelerators.initializeNewSiteViaAccelerator(
			siteName = "Minium2",
			siteTemplateName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		AssertElementPresent(
			key_entryName = "Minium Portal",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		AssertElementPresent(
			key_entryName = "Minium2 Portal",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account 1",
			adminEmailAddress = "test@liferay.com");

		Click(locator1 = "Link#BACK");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account 2",
			adminEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		Refresh();

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "View Details");

		Button.click(button = "Checkout");

		Pause(locator1 = "5000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Commerce Account 2");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		ApplicationsMenu.gotoSite(site = "Minium2");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		AssertTextEquals.assertPartialText(
			locator1 = "Account#ACCOUNT_MANAGEMENT",
			value1 = "Commerce Account 1");

		AssertTextEquals.assertPartialText(
			locator1 = "Account#ACCOUNT_MANAGEMENT",
			value1 = "Commerce Account 2");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_categoryFilter = "Account",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Check.checkNotVisible(
			checkboxName = "Commerce Account 1",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			key_productName = "Commerce Account 1",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Check.checkNotVisible(
			checkboxName = "Commerce Account 2",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			key_productName = "Commerce Account 2",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Channel",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Click(
			key_fieldType = "Minium Portal",
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementPresent(
			key_productName = "Commerce Account 2",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_fieldType = "Minium2 Portal",
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementNotPresent(
			key_productName = "Commerce Account 2",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Order Status",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Check.checkNotVisible(
			checkboxName = "Open",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			key_productName = "Commerce Account 2",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Check.checkNotVisible(
			checkboxName = "Pending",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			key_productName = "Commerce Account 1",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");
	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@ignore = "true"
	@priority = "3"
	test FilterOrderByChannel {
		property portal.acceptance = "false";

		// TODO COMMERCE-5997 FilterOrderByChannel Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown

	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@ignore = "true"
	@priority = "3"
	test FilterOrderByOrderDataRange {
		property portal.acceptance = "false";

		// TODO COMMERCE-5997 FilterOrderByOrderDataRange Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown

	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@ignore = "true"
	@priority = "3"
	test FilterOrderByStatus {
		property portal.acceptance = "false";

		// TODO COMMERCE-5997 FilterOrderByStatus Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown

	}

	@description = "This is a test for COMMERCE-6209. Admin order fulfillment"
	@ignore = "true"
	@priority = "3"
	test FulfillOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6209 FulfillOrder Pending Implementation

	}

	@description = "This is a test for COMMERCE-6213. Buyer Order Approval Workflow"
	@priority = "3"
	test FulfillOrderWithBuyerOrderApprovalWorkflowActive {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceOrders#FulfillOrderWithBuyerOrderApprovalWorkflowActive";

		// TODO Review

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.uncheckStrangersVerifyEmailCheckbox();

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		Click(
			key_navUnderline = "Members",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");

		CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
			emailAddress = "buyer@liferay.com",
			role = "Buyer");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		MenuItem.click(menuItem = "Account Users");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Select(
			key_title = "Buyer Order Approval Workflow",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Single Approver (Version 1)");

		Button.clickSave();

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "ttest",
			resetPassword = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Review Order");

		Button.click(button = "View Details");

		Button.click(button = "Submit");

		AssertElementPresent(
			key_status = "Pending",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click(
			key_orderAuthor = "Commerce Account",
			locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

		Button.click(button = "Approve");

		SelectFrameTop();

		Button.click(button = "Done");

		Refresh();

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			resetPassword = "ttest",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click(
			key_orderAuthor = "Commerce Account",
			locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

		Button.click(button = "Checkout");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");
	}

	@description = "This is a test for COMMERCE-6214. Seller Order Acceptance Workflow"
	@priority = "3"
	test FulfillOrderWithSellerOrderAcceptanceWorkflowActive {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceOrders#FulfillOrderWithSellerOrderAcceptanceWorkflowActive";

		// TODO Review

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.uncheckStrangersVerifyEmailCheckbox();

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Test Account",
			adminEmailAddress = "test@liferay.com");

		Click(
			key_navUnderline = "Members",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");

		CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
			emailAddress = "buyer@liferay.com",
			role = "Buyer");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		MenuItem.click(menuItem = "Account Users");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Select(
			key_title = "Seller Order Acceptance Workflow",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Single Approver (Version 1)");

		Button.clickSave();

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "ttest",
			resetPassword = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		Refresh();

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "View Details");

		Button.click(button = "Checkout");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		ClickNoError(
			key_orderStatus = "Pending",
			locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

		CommerceEntry.clickNoError(menuItem = "View");

		Click(
			key_index = "Approve",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		Refresh();

		Click(locator1 = "Icon#BACK");

		Refresh();

		AssertElementPresent(
			key_orderStatus = "Approved",
			locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");
	}

	@description = "This is a test for COMMERCE-6211. Stock management from order"
	@ignore = "true"
	@priority = "3"
	test ManageBackOrdersFromOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6211 ManageBackOrdersFromOrder Pending Implementation

	}

	@description = "This is a test for COMMERCE-6211. Stock management from order"
	@ignore = "true"
	@priority = "3"
	test ManageProductAvailabilityFromOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6211 ManageProductAvailabilityFromOrder Pending Implementation

	}

	@description = "This is a test for COMMERCE-6217. Order Permission Management"
	@ignore = "true"
	@priority = "3"
	test OrderPermissionManagement {
		property portal.acceptance = "false";

		// TODO COMMERCE-6217 OrderPermissionManagement Pending Implementation

	}

	@description = "This is a test for COMMERCE-6216. Search Order from UI"
	@priority = "3"
	test SearchOrder {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceOrders#SearchOrder";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Test",
			adminEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();

		Refresh();

		var orderId = selenium.getText("CommerceOrders#PENDING_ORDERS_ORDER_ID");

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "Mount",
			productQuantity = "1");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.searchEntry(entryName = "${orderId}");

		AssertElementPresent(
			key_entryName = "${orderId}",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		AssertTextEquals(
			locator1 = "CommerceEntry#PAGINATION_RESULTS",
			value1 = "Showing 1 to 1 of 1");
	}

	@description = "This is a test for COMMERCE-5982. As an order manager, I want to sort orders by ascending or descending order date"
	@priority = "3"
	test SortOrdersByOrderDate {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceOrders#SortOrdersByOrderDate";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "2");

		Pause(locator1 = "5000");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account 2",
			adminEmailAddress = "test@liferay.com");

		CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Commerce Account 2");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "Transmission Cooler Line Assembly",
			productQuantity = "3");

		Pause(locator1 = "5000");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		Button.click(button = "Order Date");

		var index = "1";

		for (var accountName : list "Commerce Account,Commerce Account 2") {
			AssertTextEquals.assertPartialText(
				index = "${index}",
				locator1 = "CommerceAccelerators#ACCOUNT_ORDER_NAME",
				value1 = "${accountName}");

			var index = ${index} + 1;
		}
	}

	@description = "This is a test for COMMERCE-5845. As a product specialist I want to see if a SKU is on order"
	@priority = "3"
	test ViewOrderSKU {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceOrders#ViewOrderSKU";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		Click(
			key_navUnderline = "Members",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");

		CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
			emailAddress = "buyertester@test.com",
			role = "Buyer");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		Pause(locator1 = "5000");

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "View Details");

		Button.click(button = "Checkout");

		Pause(locator1 = "3000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Inventory");

		CommerceNavigator.searchEntry(entryName = "MIN55861");

		AssertElementPresent(
			key_orderQuantity = "1",
			locator1 = "CommerceEntry#ON_ORDER_QUANTITY");

		CommerceNavigator.gotoEntry(entryName = "MIN55861");

		Navigator.gotoNavTab(navTab = "On Order");

		AssertElementPresent(
			key_orderQuantity = "1",
			locator1 = "CommerceEntry#ON_ORDER_QUANTITY");
	}

}