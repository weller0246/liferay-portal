definition {

	macro accountGroupsTearDown {
		var accountGroupsList = "";

		var count = "1";

		while (IsElementPresent(key_rowNumber = "${count}", locator1 = "CommerceNavigation#ENTRY_NAME_N")) {
			var key_rowNumber = "${count}";

			var entryName = selenium.getText("CommerceNavigation#ENTRY_NAME_N");

			if ("${entryName}" != "Guest") {
				accountGroupsList = StringUtil.add("${accountGroupsList}", "${entryName}");
			}

			var count = ${count} + 1;
		}

		if ("${accountGroupsList}" != "") {
			for (var accountGroupName : list "${accountGroupsList}") {
				ClickNoError(
					key_entryName = "${accountGroupName}",
					locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS_2");

				CommerceEntry.clickNoError(menuItem = "Delete");

				AssertElementPresent(locator1 = "Message#SUCCESS");

				AssertElementNotPresent(locator1 = "Message#ERROR");
			}
		}
	}

	macro commerceAdminSetUp {
		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "commerceuser@liferay.com",
			userFirstName = "Commerce",
			userLastName = "User",
			userScreenName = "commerceuser");

		CommerceEntry.createNewCurrenciesEntry(
			code = "NCU",
			entryName = "New Currency");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Test Channel",
			channelType = "Site",
			siteName = "Guest");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	macro commerceAdminTearDown {
		Navigator.openURL();

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		Refresh();

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceEntry.deleteCommerceEntry();
		}

		Pause(locator1 = "3000");

		if (isSet(userScreenName)) {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			if (IsElementPresent(key_rowEntry = "${userScreenName}", locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME")) {
				User.tearDownSpecificUser(userScreenName = "${userScreenName}");
			}
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			Click.clickNoMouseOver(locator1 = "CommerceEntry#ROW_VERTICAL_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this? It will be deleted immediately.");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Groups");

		CommerceConfiguration.accountGroupsTearDown();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		while (IsElementPresent(locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS") && (maxIterations = "50")) {
			CommerceEntry.deleteCommerceEntry();
		}

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		while (IsElementPresent(locator1 = "CommerceEntry#DELETE_OPTION_BUTTON")) {
			CommerceOptions.deleteOptionsEntries();
		}

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected specification labels?");
		}

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected specification groups?");
		}

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceEntry.deleteCommerceEntry();
		}

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		CommerceConfiguration.commerceTearDownExcludingMaster();

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Price Lists");

		CommerceConfiguration.commerceTearDownExcludingMaster();

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Promotions");

		CommerceConfiguration.commerceTearDownExcludingMaster();

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Discounts");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceEntry.deleteCommerceEntry();
		}

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Inventory");

		while (IsElementPresent(locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS") && (maxIterations = "100")) {
			CommerceEntry.deleteCommerceEntry();
		}

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Availability Estimates");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected availability estimates?");
		}

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Countries");

		if (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			if (IsElementPresent(locator1 = "Pagination#ITEMS_PER_PAGE_SELECT")) {
				Pagination.changePagination(itemsPerPage = "60");
			}

			while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
				CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected countries?");
			}
		}

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected currencies?");
		}

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Measurement Units");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected measurement units?");
		}

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Weight");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected measurement units?");
		}

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Tax Categories");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected measurement units?");
		}

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Warehouses");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this? It will be deleted immediately.");
		}
	}

	macro commerceInitializersTearDown {
		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		PortletEntry.selectAll();

		if (IsElementPresent(locator1 = "Icon#DELETE")) {
			ClickNoError(locator1 = "Icon#DELETE");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}
	}

	macro commerceStoreFrontSetUp {
		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Health Check");

		for (var buttonRowNumber : list "1,2,3,4,5") {
			if (!(IsElementPresent(locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_N", key_buttonStatus = "disabled"))) {
				Click(
					key_buttonRowNumber = "${buttonRowNumber}",
					key_buttonStatus = "",
					locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_N");

				WaitForElementPresent(
					key_value = "${buttonRowNumber}",
					locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_N");
			}
		}

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Test Channel",
			channelType = "Site",
			siteName = "Guest");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Click(
			key_menuTab = "General",
			locator1 = "CommerceEntry#MENU_TAB");

		for (var fixIssueButtonName : list "Product Detail,Product Compare,Commerce Cart,Checkout") {
			if (IsElementPresent(locator1 = "CommerceEntry#FIX_ISSUE_BUTTON", key_fixIssueButtonName = "${fixIssueButtonName}")) {
				Click(
					key_fixIssueButtonName = "${fixIssueButtonName}",
					locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

				Alert.viewSuccessMessage();
			}
		}
	}

	macro commerceStoreFrontTearDown {
		Navigator.openURL();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalog");

		if (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.moveCatalogEntriesToRecycleBin();
		}

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Options");

		Pause(locator1 = "3000");

		CommerceOptions.deleteOptionsEntries();

		User.logoutPG();
	}

	@summary = "Deletes if present, catalogs, price lists or promotions, excluding Master occurrencies"
	macro commerceTearDownExcludingMaster {
		var elementsList= "";

		var count = "1";

		while (IsElementPresent(key_rowNumber = "${count}", locator1 = "CommerceNavigation#ENTRY_NAME_N")) {
			var key_rowNumber = "${count}";

			var entryName = selenium.getText("CommerceNavigation#ENTRY_NAME_N");

			if (("${entryName}" != "Master") && ("${entryName}" != "Master Base Price List") && ("${entryName}" != "Master Base Promotion")) {
				elementsList = StringUtil.add("${elementsList}", "${entryName}");
			}

			var count = ${count} + 1;
		}

		if ("${elementsList}" != "") {
			for (var catalogName : list "${elementsList}") {
				ClickNoError(
					key_entryName = "${catalogName}",
					locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

				CommerceEntry.clickNoError(menuItem = "Delete");

				AssertElementPresent(locator1 = "Message#SUCCESS");

				AssertElementNotPresent(locator1 = "Message#ERROR");
			}
		}
	}

	macro reindexAllSearchIndexes {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");
	}

}