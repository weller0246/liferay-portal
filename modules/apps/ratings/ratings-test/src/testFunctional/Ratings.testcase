@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Ratings";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@priority = "4"
	@refactordone
	test CanChangeBlogsRatingType {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Ratings.openToConfigInInstanceSettings(portlet = "Ratings");

		PortalSettings.configureRatingType(
			configureBlogsRatingType = "true",
			ratingType = "Stars");

		Navigator.gotoPage(pageName = "Blogs Page");

		Ratings.viewDefault();
	}

	@description = "This is a use case for LPS-74621."
	@refactordone
	@priority = "3"
	test CanCommentAndRateBlogsEntryOnLiveSite {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name");

		JSONBlog.addComment(
			commentBody = "Blogs Entry Comment",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		Ratings.rateThumb(ratingResult = "Rate this as good");

		Staging.openStagingAdmin(siteURLKey = "site-name-staging");

		Staging.deactivateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		LAR.exportPortlet(larFileName = "Blogs.portlet.lar");

		JSONGroup.addGroup(groupName = "Second Site");

		JSONLayout.addPublicLayout(
			groupName = "Second Site",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Second Site",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.openSiteURL(siteName = "Second Site");

		LAR.importPortlet(larFileName = "Blogs.portlet.lar");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "second-site");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Blogs Entry Comment",
			userFullName = "Test Test (You)");
	}

	@description = "This is a use case for LPS-74621."
	@refactordone
	@priority = "3"
	test CanCommentAndRateWikiFrontPageOnLiveSite {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging Test Page",
			widgetName = "Wiki");

		Navigator.openSiteURL(siteName = "Site Name");

		JSONWiki.updateWikiPage(
			groupName = "Site Name",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki FrontPage Content",
			wikiPageName = "FrontPage");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WikiNavigator.openToWikiPage(
			layoutURLKey = "staging-test-page",
			siteURLKey = "site-name",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		Ratings.rateStar(ratingStarCount = "2");

		Comments.addPG(entryComment = "Wiki FrontPage Comment");

		Staging.openStagingAdmin(siteURLKey = "site-name-staging");

		Staging.deactivateStagingCP(siteName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		LAR.exportPortlet(
			larFileName = "Wiki.portlet.lar",
			wikiPortlet = "true");

		JSONGroup.addGroup(groupName = "Second Site");

		JSONLayout.addPublicLayout(
			groupName = "Second Site",
			layoutName = "Wiki Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Second Site",
			layoutName = "Wiki Page",
			widgetName = "Wiki");

		Navigator.openSiteURL(siteName = "Second Site");

		LAR.importPortlet(
			larFileName = "Wiki.portlet.lar",
			wikiPortlet = "true");

		WikiNavigator.openToWikiPage(
			layoutURLKey = "wiki-page",
			siteURLKey = "second-site",
			wikiNodeName = "Main 2",
			wikiPageTitle = "FrontPage");

		Ratings.viewRateStar(
			averageRatingStarCount = "2.0",
			ratingStarCount = "2");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Wiki FrontPage Comment",
			userFullName = "Test Test (You)");
	}

	@priority = "5"
	@refactordone
	test CanRateAndEditWikiPageComment {
		property custom.properties = "default.layout.template.id=1_column";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Wiki Test Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Wiki Test Page",
			widgetName = "Wiki");

		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content 1",
			wikiPageName = "Wiki Page 1");

		WikiNavigator.openToWikiPage(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page 1");

		WikiPage.addComment(entryComment = "Wiki Page Comment");

		Ratings.rateThumb(
			commentRating = "true",
			ratingResult = "Rate this as good");

		WikiPage.editComment(
			entryComment = "Wiki Page Comment",
			entryCommentEdit = "Wiki Page Comment Edited");

		WikiNavigator.openToWikiPage(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page 1");

		Ratings.viewRateThumb(
			commentRating = "true",
			ratingResult = "You have rated this as good",
			voteCount = "1");

		Ratings.viewRateThumb(
			commentRating = "true",
			ratingResult = "Rate this as bad",
			voteCount = "0");
	}

	@priority = "4"
	@refactordone
	test CanRateBlogsEntry {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "Rate this as bad");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as bad",
			voteCount = "1");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "Rate this as good");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "Rate this as good");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "2");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "Rate this as bad");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "1");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as bad",
			voteCount = "1");
	}

	@priority = "4"
	@refactordone
	test CanRateKBArticleWithoutSuggestions {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Knowledge Base Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Knowledge Base Display Page",
			widgetName = "Knowledge Base Display");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		Navigator.gotoPage(pageName = "Knowledge Base Display Page");

		Ratings.rateThumb(ratingResult = "Rate this as good");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");
	}

	@priority = "4"
	@refactordone
	test CanRateMBThreadAndReply {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Message Boards Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Message Boards Page",
			widgetName = "Message Boards");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.openToThread(
			groupName = "Guest",
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			threadSubject = "MB Thread Message Subject");

		Ratings.rateThumb(ratingResult = "Rate this as good");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");

		JSONMBMessage.addMessageReply(
			groupName = "Guest",
			replyBody = "MB Thread Message Reply Body",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.openToThread(
			groupName = "Guest",
			layoutName = "message-boards-page",
			siteURLKey = "guest",
			threadSubject = "MB Thread Message Subject");

		Ratings.rateThumb(
			ratingResult = "Rate this as bad",
			replyRating = "true",
			threadSubject = "MB Thread Message Subject");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as bad",
			voteCount = "1");
	}

	@priority = "5"
	@refactordone
	test CanRateWikiPage {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Wiki Test Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Wiki Test Page",
			widgetName = "Wiki");

		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content 1",
			wikiPageName = "Wiki Page 1");

		WikiNavigator.openToWikiPage(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page 1");

		Ratings.rateStar(ratingStarCount = "4");

		WikiNavigator.openToWikiPage(
			layoutURLKey = "wiki-test-page",
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page 1");

		Ratings.viewRateStar(
			averageRatingStarCount = "4.0",
			ratingStarCount = "4");
	}

	@description = "This test covers LPS-117741. It ensures that the rated stacked stars can be removed from the blog entry."
	@refactordone
	@priority = "4"
	test CanRemoveRatedStackedStarsFromBlogsEntry {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Ratings.configureRatingType(
			applications = "Blogs",
			portlet = "Ratings",
			ratingType = "Stacked Stars",
			siteURLKey = "guest");

		Navigator.gotoPage(pageName = "Blogs Page");

		Ratings.rateStackedStars(ratingStarCount = "3");

		Ratings.viewRateStackedStar(
			averageStarCount = "3.0",
			ratingStarCount = "3");

		Ratings.revokeStackedStarsRating();

		Ratings.viewNoRateStackedStar(averageStarCount = "0.0");
	}

	@description = "This ensures that the stars rating can be revoked."
	@refactordone
	@priority = "5"
	test CanRevokeBlogsStarsRating {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Guest");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		Ratings.configureRatingType(
			applications = "Blogs",
			portlet = "Ratings",
			ratingType = "Stars",
			siteURLKey = "guest");

		Navigator.gotoPage(pageName = "Blogs Page");

		Ratings.rateStar(
			checkDeleteButton = "true",
			ratingStarCount = "3");

		Ratings.revokeStarsRating();

		Ratings.rateStar(ratingStarCount = "4");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Blogs Page");

		Ratings.rateStar(ratingStarCount = "5");

		Ratings.viewRateStar(
			averageRatingStarCount = "4.5 (2 Votes)",
			ratingStarCount = "5");
	}

	@description = "This is a test for LPS-136949. It checks that Stacked stars can be added and removed from comments."
	@ignore = "true"
	@priority = "5"
	test CanRevokeStackedStarsFromComments {
		property portal.acceptance = "false";

		// TODO LPS-136949 CanRevokeStackedStarsFromComments pending implementation

	}

	@description = "This is a test for LPS-136958. It checks that Stacked stars can be added and removed from a web content."
	@ignore = "true"
	@priority = "5"
	test CanRevokeStackedStarsFromWC {
		property portal.acceptance = "false";

		// TODO LPS-136958 CanRevokeStackedStarsFromWC pending implementation

	}

	@description = "This is a test for LPS-136951. It checks that Stacked stars can be added and removed from a wiki entry."
	@ignore = "true"
	@priority = "5"
	test CanRevokeStackedStarsFromWiki {
		property portal.acceptance = "false";

		// TODO LPS-136951 CanRevokeStackedStarsFromWiki pending implementation

	}

	@description = "This is a test for LPS-136954. It checks that stars can be added and removed from a document."
	@ignore = "true"
	@priority = "5"
	test CanRevokeStarsFromDocument {
		property portal.acceptance = "false";

		// TODO LPS-136954 CanRevokeStarsFromDocument pending implementation

	}

	@description = "This is a test for LPS-136956. It checks that stars can be added and removed from a KB article."
	@ignore = "true"
	@priority = "5"
	test CanRevokeStarsFromKB {
		property portal.acceptance = "false";

		// TODO LPS-136956 CanRevokeStarsFromKB pending implementation

	}

	@description = "This is a test for LPS-136960. It checks that stars can be added and removed from a MB thread."
	@ignore = "true"
	@priority = "5"
	test CanRevokeStarsFromMB {
		property portal.acceptance = "false";

		// TODO LPS-136960 CanRevokeStarsFromMB pending implementation

	}

	@priority = "3"
	@refactordone
	test CanViewKBArticleWithEditedStarRatings {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Knowledge Base Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Knowledge Base Display Page",
			widgetName = "Knowledge Base Display");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		Ratings.openToConfigInInstanceSettings(portlet = "Ratings");

		PortalSettings.configureRatingType(
			configureKBRatingType = "true",
			ratingType = "Stars");

		Navigator.gotoPage(pageName = "Knowledge Base Display Page");

		Ratings.rateStar(ratingStarCount = "2");

		Ratings.viewRateStar(
			averageRatingStarCount = "2.0",
			ratingStarCount = "2");

		Ratings.rateStar(ratingStarCount = "5");

		Ratings.viewRateStar(
			averageRatingStarCount = "5.0",
			ratingStarCount = "5");
	}

	@priority = "4"
	@refactordone
	test CanViewKBArticleWithStarRatings {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Knowledge Base Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Knowledge Base Display Page",
			widgetName = "Knowledge Base Display");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		Navigator.gotoPage(pageName = "Knowledge Base Display Page");

		Ratings.rateThumb(ratingResult = "Rate this as good");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");

		Ratings.openToConfigInInstanceSettings(portlet = "Ratings");

		PortalSettings.configureRatingType(
			configureKBRatingType = "true",
			ratingType = "Stars");

		Navigator.gotoPage(pageName = "Knowledge Base Display Page");

		Ratings.viewRateStar(
			averageRatingStarCount = "5.0",
			ratingStarCount = "5");

		Ratings.openToConfigInInstanceSettings(portlet = "Ratings");

		PortalSettings.configureRatingType(
			configureKBRatingType = "true",
			ratingType = "Thumbs");

		Navigator.gotoPage(pageName = "Knowledge Base Display Page");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");
	}

	@priority = "4"
	@refactordone
	test CanViewLikeCountForDocument {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Ratings.configureRatingType(
			applications = "document",
			portlet = "Ratings",
			ratingType = "Like",
			siteURLKey = "guest");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Title",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.expandInfo();

		Ratings.rateLike();

		Ratings.viewRateLike(ratingLikeCount = "1");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Title",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.expandInfo();

		Ratings.rateLike();

		Ratings.viewRateLike(ratingLikeCount = "2");
	}

}